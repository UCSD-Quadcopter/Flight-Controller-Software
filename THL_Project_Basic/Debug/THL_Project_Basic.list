
THL_Project_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c8  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08005560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003f4  200001dc  0800573c  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005d0  0800573c  000205d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a898  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000031e6  00000000  00000000  0003aaa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008a08  00000000  00000000  0003dc8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000da8  00000000  00000000  00046698  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cf0  00000000  00000000  00047440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007269  00000000  00000000  00048130  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000042bd  00000000  00000000  0004f399  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00053656  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d20  00000000  00000000  000536d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000df  00000000  00000000  000563f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b70 	.word	0x08004b70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08004b70 	.word	0x08004b70

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b97a 	b.w	80005cc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	468c      	mov	ip, r1
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	9e08      	ldr	r6, [sp, #32]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d151      	bne.n	80003a4 <__udivmoddi4+0xb4>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d96d      	bls.n	80003e2 <__udivmoddi4+0xf2>
 8000306:	fab2 fe82 	clz	lr, r2
 800030a:	f1be 0f00 	cmp.w	lr, #0
 800030e:	d00b      	beq.n	8000328 <__udivmoddi4+0x38>
 8000310:	f1ce 0c20 	rsb	ip, lr, #32
 8000314:	fa01 f50e 	lsl.w	r5, r1, lr
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000320:	ea4c 0c05 	orr.w	ip, ip, r5
 8000324:	fa00 f40e 	lsl.w	r4, r0, lr
 8000328:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	fbbc f8fa 	udiv	r8, ip, sl
 8000332:	fa1f f987 	uxth.w	r9, r7
 8000336:	fb0a cc18 	mls	ip, sl, r8, ip
 800033a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800033e:	fb08 f309 	mul.w	r3, r8, r9
 8000342:	42ab      	cmp	r3, r5
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x6c>
 8000346:	19ed      	adds	r5, r5, r7
 8000348:	f108 32ff 	add.w	r2, r8, #4294967295
 800034c:	f080 8123 	bcs.w	8000596 <__udivmoddi4+0x2a6>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f240 8120 	bls.w	8000596 <__udivmoddi4+0x2a6>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	443d      	add	r5, r7
 800035c:	1aed      	subs	r5, r5, r3
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb5 f0fa 	udiv	r0, r5, sl
 8000364:	fb0a 5510 	mls	r5, sl, r0, r5
 8000368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800036c:	fb00 f909 	mul.w	r9, r0, r9
 8000370:	45a1      	cmp	r9, r4
 8000372:	d909      	bls.n	8000388 <__udivmoddi4+0x98>
 8000374:	19e4      	adds	r4, r4, r7
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	f080 810a 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800037e:	45a1      	cmp	r9, r4
 8000380:	f240 8107 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000384:	3802      	subs	r0, #2
 8000386:	443c      	add	r4, r7
 8000388:	eba4 0409 	sub.w	r4, r4, r9
 800038c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000390:	2100      	movs	r1, #0
 8000392:	2e00      	cmp	r6, #0
 8000394:	d061      	beq.n	800045a <__udivmoddi4+0x16a>
 8000396:	fa24 f40e 	lsr.w	r4, r4, lr
 800039a:	2300      	movs	r3, #0
 800039c:	6034      	str	r4, [r6, #0]
 800039e:	6073      	str	r3, [r6, #4]
 80003a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xc8>
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d054      	beq.n	8000456 <__udivmoddi4+0x166>
 80003ac:	2100      	movs	r1, #0
 80003ae:	e886 0021 	stmia.w	r6, {r0, r5}
 80003b2:	4608      	mov	r0, r1
 80003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b8:	fab3 f183 	clz	r1, r3
 80003bc:	2900      	cmp	r1, #0
 80003be:	f040 808e 	bne.w	80004de <__udivmoddi4+0x1ee>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xdc>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80fa 	bhi.w	80005c0 <__udivmoddi4+0x2d0>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb65 0503 	sbc.w	r5, r5, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	46ac      	mov	ip, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d03f      	beq.n	800045a <__udivmoddi4+0x16a>
 80003da:	e886 1010 	stmia.w	r6, {r4, ip}
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b912      	cbnz	r2, 80003ea <__udivmoddi4+0xfa>
 80003e4:	2701      	movs	r7, #1
 80003e6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ea:	fab7 fe87 	clz	lr, r7
 80003ee:	f1be 0f00 	cmp.w	lr, #0
 80003f2:	d134      	bne.n	800045e <__udivmoddi4+0x16e>
 80003f4:	1beb      	subs	r3, r5, r7
 80003f6:	0c3a      	lsrs	r2, r7, #16
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	2101      	movs	r1, #1
 80003fe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000402:	0c25      	lsrs	r5, r4, #16
 8000404:	fb02 3318 	mls	r3, r2, r8, r3
 8000408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040c:	fb0c f308 	mul.w	r3, ip, r8
 8000410:	42ab      	cmp	r3, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x134>
 8000414:	19ed      	adds	r5, r5, r7
 8000416:	f108 30ff 	add.w	r0, r8, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x132>
 800041c:	42ab      	cmp	r3, r5
 800041e:	f200 80d1 	bhi.w	80005c4 <__udivmoddi4+0x2d4>
 8000422:	4680      	mov	r8, r0
 8000424:	1aed      	subs	r5, r5, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb5 f0f2 	udiv	r0, r5, r2
 800042c:	fb02 5510 	mls	r5, r2, r0, r5
 8000430:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000434:	fb0c fc00 	mul.w	ip, ip, r0
 8000438:	45a4      	cmp	ip, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x15c>
 800043c:	19e4      	adds	r4, r4, r7
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x15a>
 8000444:	45a4      	cmp	ip, r4
 8000446:	f200 80b8 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 040c 	sub.w	r4, r4, ip
 8000450:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000454:	e79d      	b.n	8000392 <__udivmoddi4+0xa2>
 8000456:	4631      	mov	r1, r6
 8000458:	4630      	mov	r0, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1ce 0420 	rsb	r4, lr, #32
 8000462:	fa05 f30e 	lsl.w	r3, r5, lr
 8000466:	fa07 f70e 	lsl.w	r7, r7, lr
 800046a:	fa20 f804 	lsr.w	r8, r0, r4
 800046e:	0c3a      	lsrs	r2, r7, #16
 8000470:	fa25 f404 	lsr.w	r4, r5, r4
 8000474:	ea48 0803 	orr.w	r8, r8, r3
 8000478:	fbb4 f1f2 	udiv	r1, r4, r2
 800047c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000480:	fb02 4411 	mls	r4, r2, r1, r4
 8000484:	fa1f fc87 	uxth.w	ip, r7
 8000488:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800048c:	fb01 f30c 	mul.w	r3, r1, ip
 8000490:	42ab      	cmp	r3, r5
 8000492:	fa00 f40e 	lsl.w	r4, r0, lr
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x1bc>
 8000498:	19ed      	adds	r5, r5, r7
 800049a:	f101 30ff 	add.w	r0, r1, #4294967295
 800049e:	f080 808a 	bcs.w	80005b6 <__udivmoddi4+0x2c6>
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	f240 8087 	bls.w	80005b6 <__udivmoddi4+0x2c6>
 80004a8:	3902      	subs	r1, #2
 80004aa:	443d      	add	r5, r7
 80004ac:	1aeb      	subs	r3, r5, r3
 80004ae:	fa1f f588 	uxth.w	r5, r8
 80004b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004b6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004be:	fb00 f30c 	mul.w	r3, r0, ip
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1e6>
 80004c6:	19ed      	adds	r5, r5, r7
 80004c8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004cc:	d26f      	bcs.n	80005ae <__udivmoddi4+0x2be>
 80004ce:	42ab      	cmp	r3, r5
 80004d0:	d96d      	bls.n	80005ae <__udivmoddi4+0x2be>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	1aeb      	subs	r3, r5, r3
 80004d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004dc:	e78f      	b.n	80003fe <__udivmoddi4+0x10e>
 80004de:	f1c1 0720 	rsb	r7, r1, #32
 80004e2:	fa22 f807 	lsr.w	r8, r2, r7
 80004e6:	408b      	lsls	r3, r1
 80004e8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ec:	ea48 0303 	orr.w	r3, r8, r3
 80004f0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004f8:	40fd      	lsrs	r5, r7
 80004fa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004fe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000502:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000506:	fb0c 5519 	mls	r5, ip, r9, r5
 800050a:	fa1f f883 	uxth.w	r8, r3
 800050e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000512:	fb09 f408 	mul.w	r4, r9, r8
 8000516:	42ac      	cmp	r4, r5
 8000518:	fa02 f201 	lsl.w	r2, r2, r1
 800051c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x244>
 8000522:	18ed      	adds	r5, r5, r3
 8000524:	f109 30ff 	add.w	r0, r9, #4294967295
 8000528:	d243      	bcs.n	80005b2 <__udivmoddi4+0x2c2>
 800052a:	42ac      	cmp	r4, r5
 800052c:	d941      	bls.n	80005b2 <__udivmoddi4+0x2c2>
 800052e:	f1a9 0902 	sub.w	r9, r9, #2
 8000532:	441d      	add	r5, r3
 8000534:	1b2d      	subs	r5, r5, r4
 8000536:	fa1f fe8e 	uxth.w	lr, lr
 800053a:	fbb5 f0fc 	udiv	r0, r5, ip
 800053e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000542:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000546:	fb00 f808 	mul.w	r8, r0, r8
 800054a:	45a0      	cmp	r8, r4
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x26e>
 800054e:	18e4      	adds	r4, r4, r3
 8000550:	f100 35ff 	add.w	r5, r0, #4294967295
 8000554:	d229      	bcs.n	80005aa <__udivmoddi4+0x2ba>
 8000556:	45a0      	cmp	r8, r4
 8000558:	d927      	bls.n	80005aa <__udivmoddi4+0x2ba>
 800055a:	3802      	subs	r0, #2
 800055c:	441c      	add	r4, r3
 800055e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000562:	eba4 0408 	sub.w	r4, r4, r8
 8000566:	fba0 8902 	umull	r8, r9, r0, r2
 800056a:	454c      	cmp	r4, r9
 800056c:	46c6      	mov	lr, r8
 800056e:	464d      	mov	r5, r9
 8000570:	d315      	bcc.n	800059e <__udivmoddi4+0x2ae>
 8000572:	d012      	beq.n	800059a <__udivmoddi4+0x2aa>
 8000574:	b156      	cbz	r6, 800058c <__udivmoddi4+0x29c>
 8000576:	ebba 030e 	subs.w	r3, sl, lr
 800057a:	eb64 0405 	sbc.w	r4, r4, r5
 800057e:	fa04 f707 	lsl.w	r7, r4, r7
 8000582:	40cb      	lsrs	r3, r1
 8000584:	431f      	orrs	r7, r3
 8000586:	40cc      	lsrs	r4, r1
 8000588:	6037      	str	r7, [r6, #0]
 800058a:	6074      	str	r4, [r6, #4]
 800058c:	2100      	movs	r1, #0
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	4618      	mov	r0, r3
 8000594:	e6f8      	b.n	8000388 <__udivmoddi4+0x98>
 8000596:	4690      	mov	r8, r2
 8000598:	e6e0      	b.n	800035c <__udivmoddi4+0x6c>
 800059a:	45c2      	cmp	sl, r8
 800059c:	d2ea      	bcs.n	8000574 <__udivmoddi4+0x284>
 800059e:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a2:	eb69 0503 	sbc.w	r5, r9, r3
 80005a6:	3801      	subs	r0, #1
 80005a8:	e7e4      	b.n	8000574 <__udivmoddi4+0x284>
 80005aa:	4628      	mov	r0, r5
 80005ac:	e7d7      	b.n	800055e <__udivmoddi4+0x26e>
 80005ae:	4640      	mov	r0, r8
 80005b0:	e791      	b.n	80004d6 <__udivmoddi4+0x1e6>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e7be      	b.n	8000534 <__udivmoddi4+0x244>
 80005b6:	4601      	mov	r1, r0
 80005b8:	e778      	b.n	80004ac <__udivmoddi4+0x1bc>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e745      	b.n	800044c <__udivmoddi4+0x15c>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e708      	b.n	80003d6 <__udivmoddi4+0xe6>
 80005c4:	f1a8 0802 	sub.w	r8, r8, #2
 80005c8:	443d      	add	r5, r7
 80005ca:	e72b      	b.n	8000424 <__udivmoddi4+0x134>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b510      	push	{r4, lr}
 80005d2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_InitTick+0x40>)
 80005d6:	7818      	ldrb	r0, [r3, #0]
 80005d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80005e0:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <HAL_InitTick+0x44>)
 80005e2:	6810      	ldr	r0, [r2, #0]
 80005e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005e8:	f000 f894 	bl	8000714 <HAL_SYSTICK_Config>
 80005ec:	b968      	cbnz	r0, 800060a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ee:	2c0f      	cmp	r4, #15
 80005f0:	d901      	bls.n	80005f6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80005f2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80005f4:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f6:	2200      	movs	r2, #0
 80005f8:	4621      	mov	r1, r4
 80005fa:	f04f 30ff 	mov.w	r0, #4294967295
 80005fe:	f000 f84b 	bl	8000698 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <HAL_InitTick+0x48>)
 8000604:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000606:	2000      	movs	r0, #0
 8000608:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800060a:	2001      	movs	r0, #1
 800060c:	bd10      	pop	{r4, pc}
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000
 8000614:	20000008 	.word	0x20000008
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_Init>:
{
 800061c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <HAL_Init+0x30>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000626:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800062e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000636:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000638:	2003      	movs	r0, #3
 800063a:	f000 f81b 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff ffc6 	bl	80005d0 <HAL_InitTick>
  HAL_MspInit();
 8000644:	f002 f99e 	bl	8002984 <HAL_MspInit>
}
 8000648:	2000      	movs	r0, #0
 800064a:	bd08      	pop	{r3, pc}
 800064c:	40023c00 	.word	0x40023c00

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	6811      	ldr	r1, [r2, #0]
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_IncTick+0x14>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000208 	.word	0x20000208
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000208 	.word	0x20000208

08000674 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000676:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000678:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800067c:	041b      	lsls	r3, r3, #16
 800067e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000680:	0200      	lsls	r0, r0, #8
 8000682:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000686:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000688:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800068c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000690:	60d0      	str	r0, [r2, #12]
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000698:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <HAL_NVIC_SetPriority+0x5c>)
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a2:	f1c3 0407 	rsb	r4, r3, #7
 80006a6:	2c04      	cmp	r4, #4
 80006a8:	bf28      	it	cs
 80006aa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ac:	1d1d      	adds	r5, r3, #4
 80006ae:	2d06      	cmp	r5, #6
 80006b0:	d917      	bls.n	80006e2 <HAL_NVIC_SetPriority+0x4a>
 80006b2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	2501      	movs	r5, #1
 80006b6:	fa05 f404 	lsl.w	r4, r5, r4
 80006ba:	3c01      	subs	r4, #1
 80006bc:	4021      	ands	r1, r4
 80006be:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	fa05 f303 	lsl.w	r3, r5, r3
 80006c4:	3b01      	subs	r3, #1
 80006c6:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80006ca:	2800      	cmp	r0, #0
 80006cc:	db0b      	blt.n	80006e6 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	0109      	lsls	r1, r1, #4
 80006d0:	b2c9      	uxtb	r1, r1
 80006d2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006d6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006da:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006de:	bc30      	pop	{r4, r5}
 80006e0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	2300      	movs	r3, #0
 80006e4:	e7e6      	b.n	80006b4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e6:	f000 000f 	and.w	r0, r0, #15
 80006ea:	0109      	lsls	r1, r1, #4
 80006ec:	b2c9      	uxtb	r1, r1
 80006ee:	4b02      	ldr	r3, [pc, #8]	; (80006f8 <HAL_NVIC_SetPriority+0x60>)
 80006f0:	5419      	strb	r1, [r3, r0]
 80006f2:	e7f4      	b.n	80006de <HAL_NVIC_SetPriority+0x46>
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	e000ed14 	.word	0xe000ed14

080006fc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006fc:	0942      	lsrs	r2, r0, #5
 80006fe:	f000 001f 	and.w	r0, r0, #31
 8000702:	2301      	movs	r3, #1
 8000704:	fa03 f000 	lsl.w	r0, r3, r0
 8000708:	4b01      	ldr	r3, [pc, #4]	; (8000710 <HAL_NVIC_EnableIRQ+0x14>)
 800070a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800070e:	4770      	bx	lr
 8000710:	e000e100 	.word	0xe000e100

08000714 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000714:	3801      	subs	r0, #1
 8000716:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800071a:	d20a      	bcs.n	8000732 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_SYSTICK_Config+0x24>)
 800071e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	21f0      	movs	r1, #240	; 0xf0
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <HAL_SYSTICK_Config+0x28>)
 8000724:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000728:	2000      	movs	r0, #0
 800072a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072c:	2207      	movs	r2, #7
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000e010 	.word	0xe000e010
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000740:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000742:	6805      	ldr	r5, [r0, #0]
 8000744:	682c      	ldr	r4, [r5, #0]
 8000746:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800074a:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800074c:	6804      	ldr	r4, [r0, #0]
 800074e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000750:	6883      	ldr	r3, [r0, #8]
 8000752:	2b40      	cmp	r3, #64	; 0x40
 8000754:	d005      	beq.n	8000762 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000756:	6803      	ldr	r3, [r0, #0]
 8000758:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800075a:	6803      	ldr	r3, [r0, #0]
 800075c:	60da      	str	r2, [r3, #12]
  }
}
 800075e:	bc30      	pop	{r4, r5}
 8000760:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000762:	6803      	ldr	r3, [r0, #0]
 8000764:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000766:	6803      	ldr	r3, [r0, #0]
 8000768:	60d9      	str	r1, [r3, #12]
 800076a:	e7f8      	b.n	800075e <DMA_SetConfig+0x1e>

0800076c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800076c:	6802      	ldr	r2, [r0, #0]
 800076e:	b2d3      	uxtb	r3, r2
 8000770:	3b10      	subs	r3, #16
 8000772:	490b      	ldr	r1, [pc, #44]	; (80007a0 <DMA_CalcBaseAndBitshift+0x34>)
 8000774:	fba1 1303 	umull	r1, r3, r1, r3
 8000778:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800077a:	490a      	ldr	r1, [pc, #40]	; (80007a4 <DMA_CalcBaseAndBitshift+0x38>)
 800077c:	5cc9      	ldrb	r1, [r1, r3]
 800077e:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000780:	2b03      	cmp	r3, #3
 8000782:	d806      	bhi.n	8000792 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000784:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8000788:	f022 0203 	bic.w	r2, r2, #3
 800078c:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800078e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000790:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000792:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8000796:	f022 0203 	bic.w	r2, r2, #3
 800079a:	3204      	adds	r2, #4
 800079c:	6582      	str	r2, [r0, #88]	; 0x58
 800079e:	e7f6      	b.n	800078e <DMA_CalcBaseAndBitshift+0x22>
 80007a0:	aaaaaaab 	.word	0xaaaaaaab
 80007a4:	08004b94 	.word	0x08004b94

080007a8 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80007a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80007aa:	6982      	ldr	r2, [r0, #24]
 80007ac:	b992      	cbnz	r2, 80007d4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d00a      	beq.n	80007c8 <DMA_CheckFifoParam+0x20>
 80007b2:	b11b      	cbz	r3, 80007bc <DMA_CheckFifoParam+0x14>
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d001      	beq.n	80007bc <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80007b8:	2000      	movs	r0, #0
 80007ba:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007be:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80007c2:	d12c      	bne.n	800081e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80007c4:	2000      	movs	r0, #0
 80007c6:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80007c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80007ce:	d028      	beq.n	8000822 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80007d0:	2000      	movs	r0, #0
 80007d2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80007d4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80007d8:	d005      	beq.n	80007e6 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d929      	bls.n	8000832 <DMA_CheckFifoParam+0x8a>
 80007de:	2b03      	cmp	r3, #3
 80007e0:	d015      	beq.n	800080e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80007e2:	2000      	movs	r0, #0
 80007e4:	4770      	bx	lr
    switch (tmp)
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d803      	bhi.n	80007f2 <DMA_CheckFifoParam+0x4a>
 80007ea:	e8df f003 	tbb	[pc, r3]
 80007ee:	041c      	.short	0x041c
 80007f0:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80007f2:	2000      	movs	r0, #0
 80007f4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80007fc:	d115      	bne.n	800082a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80007fe:	2000      	movs	r0, #0
 8000800:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000802:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000804:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000808:	d011      	beq.n	800082e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800080a:	2000      	movs	r0, #0
 800080c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800080e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000810:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000814:	d001      	beq.n	800081a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8000816:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000818:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800081a:	2000      	movs	r0, #0
 800081c:	4770      	bx	lr
        status = HAL_ERROR;
 800081e:	2001      	movs	r0, #1
 8000820:	4770      	bx	lr
        status = HAL_ERROR;
 8000822:	2001      	movs	r0, #1
 8000824:	4770      	bx	lr
      status = HAL_ERROR;
 8000826:	2001      	movs	r0, #1
 8000828:	4770      	bx	lr
        status = HAL_ERROR;
 800082a:	2001      	movs	r0, #1
 800082c:	4770      	bx	lr
        status = HAL_ERROR;
 800082e:	2001      	movs	r0, #1
 8000830:	4770      	bx	lr
      status = HAL_ERROR;
 8000832:	2001      	movs	r0, #1
 8000834:	4770      	bx	lr
	...

08000838 <HAL_DMA_Init>:
{
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800083c:	f7ff ff14 	bl	8000668 <HAL_GetTick>
  if(hdma == NULL)
 8000840:	2c00      	cmp	r4, #0
 8000842:	d05d      	beq.n	8000900 <HAL_DMA_Init+0xc8>
 8000844:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8000846:	2300      	movs	r3, #0
 8000848:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800084c:	2302      	movs	r3, #2
 800084e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000852:	6822      	ldr	r2, [r4, #0]
 8000854:	6813      	ldr	r3, [r2, #0]
 8000856:	f023 0301 	bic.w	r3, r3, #1
 800085a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	f012 0f01 	tst.w	r2, #1
 8000864:	d00a      	beq.n	800087c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000866:	f7ff feff 	bl	8000668 <HAL_GetTick>
 800086a:	1b40      	subs	r0, r0, r5
 800086c:	2805      	cmp	r0, #5
 800086e:	d9f5      	bls.n	800085c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000870:	2320      	movs	r3, #32
 8000872:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000874:	2003      	movs	r0, #3
 8000876:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800087a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800087c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800087e:	4921      	ldr	r1, [pc, #132]	; (8000904 <HAL_DMA_Init+0xcc>)
 8000880:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000882:	6862      	ldr	r2, [r4, #4]
 8000884:	68a0      	ldr	r0, [r4, #8]
 8000886:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000888:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800088a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800088c:	6920      	ldr	r0, [r4, #16]
 800088e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000890:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000892:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000894:	69a0      	ldr	r0, [r4, #24]
 8000896:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000898:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800089a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800089c:	6a20      	ldr	r0, [r4, #32]
 800089e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008a0:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80008a4:	2904      	cmp	r1, #4
 80008a6:	d016      	beq.n	80008d6 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 80008a8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80008aa:	6826      	ldr	r6, [r4, #0]
 80008ac:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008ae:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80008b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008b4:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	d012      	beq.n	80008e0 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 80008ba:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008bc:	4620      	mov	r0, r4
 80008be:	f7ff ff55 	bl	800076c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80008c4:	233f      	movs	r3, #63	; 0x3f
 80008c6:	4093      	lsls	r3, r2
 80008c8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008ca:	2000      	movs	r0, #0
 80008cc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80008ce:	2301      	movs	r3, #1
 80008d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80008d4:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80008d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80008da:	4301      	orrs	r1, r0
 80008dc:	430a      	orrs	r2, r1
 80008de:	e7e3      	b.n	80008a8 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 80008e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008e2:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0e7      	beq.n	80008ba <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008ea:	4620      	mov	r0, r4
 80008ec:	f7ff ff5c 	bl	80007a8 <DMA_CheckFifoParam>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d0e2      	beq.n	80008ba <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80008f8:	2001      	movs	r0, #1
 80008fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000900:	2001      	movs	r0, #1
}
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f010803f 	.word	0xf010803f

08000908 <HAL_DMA_Start_IT>:
{
 8000908:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800090a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800090c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000910:	2c01      	cmp	r4, #1
 8000912:	d031      	beq.n	8000978 <HAL_DMA_Start_IT+0x70>
 8000914:	2401      	movs	r4, #1
 8000916:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800091a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800091e:	b2e4      	uxtb	r4, r4
 8000920:	2c01      	cmp	r4, #1
 8000922:	d004      	beq.n	800092e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8000924:	2300      	movs	r3, #0
 8000926:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 800092a:	2002      	movs	r0, #2
 800092c:	bd38      	pop	{r3, r4, r5, pc}
 800092e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000930:	2002      	movs	r0, #2
 8000932:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000936:	2000      	movs	r0, #0
 8000938:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800093a:	4620      	mov	r0, r4
 800093c:	f7ff ff00 	bl	8000740 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000940:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000942:	233f      	movs	r3, #63	; 0x3f
 8000944:	4093      	lsls	r3, r2
 8000946:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000948:	6822      	ldr	r2, [r4, #0]
 800094a:	6813      	ldr	r3, [r2, #0]
 800094c:	f043 0316 	orr.w	r3, r3, #22
 8000950:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000952:	6822      	ldr	r2, [r4, #0]
 8000954:	6953      	ldr	r3, [r2, #20]
 8000956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095a:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800095c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800095e:	b123      	cbz	r3, 800096a <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000960:	6822      	ldr	r2, [r4, #0]
 8000962:	6813      	ldr	r3, [r2, #0]
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800096a:	6822      	ldr	r2, [r4, #0]
 800096c:	6813      	ldr	r3, [r2, #0]
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000974:	2000      	movs	r0, #0
 8000976:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 8000978:	2002      	movs	r0, #2
}
 800097a:	bd38      	pop	{r3, r4, r5, pc}

0800097c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800097c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b02      	cmp	r3, #2
 8000984:	d003      	beq.n	800098e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800098a:	2001      	movs	r0, #1
 800098c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800098e:	2305      	movs	r3, #5
 8000990:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000994:	6802      	ldr	r2, [r0, #0]
 8000996:	6813      	ldr	r3, [r2, #0]
 8000998:	f023 0301 	bic.w	r3, r3, #1
 800099c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800099e:	2000      	movs	r0, #0
}
 80009a0:	4770      	bx	lr
	...

080009a4 <HAL_DMA_IRQHandler>:
{
 80009a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a6:	b083      	sub	sp, #12
 80009a8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80009aa:	2300      	movs	r3, #0
 80009ac:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009ae:	4b72      	ldr	r3, [pc, #456]	; (8000b78 <HAL_DMA_IRQHandler+0x1d4>)
 80009b0:	681d      	ldr	r5, [r3, #0]
 80009b2:	4b72      	ldr	r3, [pc, #456]	; (8000b7c <HAL_DMA_IRQHandler+0x1d8>)
 80009b4:	fba3 3505 	umull	r3, r5, r3, r5
 80009b8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009ba:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80009bc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009be:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80009c0:	2308      	movs	r3, #8
 80009c2:	4093      	lsls	r3, r2
 80009c4:	421e      	tst	r6, r3
 80009c6:	d010      	beq.n	80009ea <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80009c8:	6803      	ldr	r3, [r0, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	f012 0f04 	tst.w	r2, #4
 80009d0:	d00b      	beq.n	80009ea <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	f022 0204 	bic.w	r2, r2, #4
 80009d8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80009da:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80009dc:	2308      	movs	r3, #8
 80009de:	4093      	lsls	r3, r2
 80009e0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80009e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80009ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80009ec:	2301      	movs	r3, #1
 80009ee:	4093      	lsls	r3, r2
 80009f0:	421e      	tst	r6, r3
 80009f2:	d009      	beq.n	8000a08 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80009f4:	6822      	ldr	r2, [r4, #0]
 80009f6:	6952      	ldr	r2, [r2, #20]
 80009f8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80009fc:	d004      	beq.n	8000a08 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80009fe:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a08:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	4093      	lsls	r3, r2
 8000a0e:	421e      	tst	r6, r3
 8000a10:	d009      	beq.n	8000a26 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a12:	6822      	ldr	r2, [r4, #0]
 8000a14:	6812      	ldr	r2, [r2, #0]
 8000a16:	f012 0f02 	tst.w	r2, #2
 8000a1a:	d004      	beq.n	8000a26 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a1c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a26:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a28:	2310      	movs	r3, #16
 8000a2a:	4093      	lsls	r3, r2
 8000a2c:	421e      	tst	r6, r3
 8000a2e:	d024      	beq.n	8000a7a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000a30:	6822      	ldr	r2, [r4, #0]
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	f012 0f08 	tst.w	r2, #8
 8000a38:	d01f      	beq.n	8000a7a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000a3a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000a44:	d00d      	beq.n	8000a62 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000a4c:	d104      	bne.n	8000a58 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000a4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a50:	b19b      	cbz	r3, 8000a7a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000a52:	4620      	mov	r0, r4
 8000a54:	4798      	blx	r3
 8000a56:	e010      	b.n	8000a7a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000a58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000a5a:	b173      	cbz	r3, 8000a7a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	4798      	blx	r3
 8000a60:	e00b      	b.n	8000a7a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000a68:	d103      	bne.n	8000a72 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	f022 0208 	bic.w	r2, r2, #8
 8000a70:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a74:	b10b      	cbz	r3, 8000a7a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000a76:	4620      	mov	r0, r4
 8000a78:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000a7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	4093      	lsls	r3, r2
 8000a80:	421e      	tst	r6, r3
 8000a82:	d055      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000a84:	6822      	ldr	r2, [r4, #0]
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	f012 0f10 	tst.w	r2, #16
 8000a8c:	d050      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000a8e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000a90:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b05      	cmp	r3, #5
 8000a98:	d00e      	beq.n	8000ab8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000aa2:	d033      	beq.n	8000b0c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000aaa:	d12a      	bne.n	8000b02 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000aac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d03e      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	4798      	blx	r3
 8000ab6:	e03b      	b.n	8000b30 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ab8:	6822      	ldr	r2, [r4, #0]
 8000aba:	6813      	ldr	r3, [r2, #0]
 8000abc:	f023 0316 	bic.w	r3, r3, #22
 8000ac0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ac2:	6822      	ldr	r2, [r4, #0]
 8000ac4:	6953      	ldr	r3, [r2, #20]
 8000ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000aca:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ace:	b1a3      	cbz	r3, 8000afa <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ad0:	6822      	ldr	r2, [r4, #0]
 8000ad2:	6813      	ldr	r3, [r2, #0]
 8000ad4:	f023 0308 	bic.w	r3, r3, #8
 8000ad8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ada:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000adc:	233f      	movs	r3, #63	; 0x3f
 8000ade:	4093      	lsls	r3, r2
 8000ae0:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000aee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d03f      	beq.n	8000b74 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000af4:	4620      	mov	r0, r4
 8000af6:	4798      	blx	r3
 8000af8:	e03c      	b.n	8000b74 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000afa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1e7      	bne.n	8000ad0 <HAL_DMA_IRQHandler+0x12c>
 8000b00:	e7eb      	b.n	8000ada <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000b02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b04:	b1a3      	cbz	r3, 8000b30 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000b06:	4620      	mov	r0, r4
 8000b08:	4798      	blx	r3
 8000b0a:	e011      	b.n	8000b30 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000b12:	d109      	bne.n	8000b28 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	f022 0210 	bic.w	r2, r2, #16
 8000b1a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000b22:	2301      	movs	r3, #1
 8000b24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000b28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b2a:	b10b      	cbz	r3, 8000b30 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000b30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b32:	b1fb      	cbz	r3, 8000b74 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000b34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b36:	f013 0f01 	tst.w	r3, #1
 8000b3a:	d017      	beq.n	8000b6c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b3c:	2305      	movs	r3, #5
 8000b3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000b42:	6822      	ldr	r2, [r4, #0]
 8000b44:	6813      	ldr	r3, [r2, #0]
 8000b46:	f023 0301 	bic.w	r3, r3, #1
 8000b4a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000b4c:	9b01      	ldr	r3, [sp, #4]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	429d      	cmp	r5, r3
 8000b54:	d304      	bcc.n	8000b60 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f013 0f01 	tst.w	r3, #1
 8000b5e:	d1f5      	bne.n	8000b4c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8000b60:	2300      	movs	r3, #0
 8000b62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000b6c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b6e:	b10b      	cbz	r3, 8000b74 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000b70:	4620      	mov	r0, r4
 8000b72:	4798      	blx	r3
}
 8000b74:	b003      	add	sp, #12
 8000b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	1b4e81b5 	.word	0x1b4e81b5

08000b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b82:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b84:	2400      	movs	r4, #0
 8000b86:	e098      	b.n	8000cba <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b88:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000b8c:	f10e 0e08 	add.w	lr, lr, #8
 8000b90:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b94:	f004 0607 	and.w	r6, r4, #7
 8000b98:	00b6      	lsls	r6, r6, #2
 8000b9a:	270f      	movs	r7, #15
 8000b9c:	40b7      	lsls	r7, r6
 8000b9e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ba2:	690f      	ldr	r7, [r1, #16]
 8000ba4:	fa07 f606 	lsl.w	r6, r7, r6
 8000ba8:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000baa:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000bae:	e094      	b.n	8000cda <HAL_GPIO_Init+0x15a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bb0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bb2:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb4:	68cf      	ldr	r7, [r1, #12]
 8000bb6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bba:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000bbc:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bbe:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bc0:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bc4:	684e      	ldr	r6, [r1, #4]
 8000bc6:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000bca:	40a6      	lsls	r6, r4
 8000bcc:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000bce:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bd0:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bd2:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd4:	688b      	ldr	r3, [r1, #8]
 8000bd6:	fa03 f30e 	lsl.w	r3, r3, lr
 8000bda:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8000bdc:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bde:	684b      	ldr	r3, [r1, #4]
 8000be0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000be4:	d068      	beq.n	8000cb8 <HAL_GPIO_Init+0x138>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	4b51      	ldr	r3, [pc, #324]	; (8000d30 <HAL_GPIO_Init+0x1b0>)
 8000bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bf2:	645a      	str	r2, [r3, #68]	; 0x44
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bfe:	08a3      	lsrs	r3, r4, #2
 8000c00:	1c9e      	adds	r6, r3, #2
 8000c02:	4a4c      	ldr	r2, [pc, #304]	; (8000d34 <HAL_GPIO_Init+0x1b4>)
 8000c04:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c08:	f004 0603 	and.w	r6, r4, #3
 8000c0c:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8000c10:	260f      	movs	r6, #15
 8000c12:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c16:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c1a:	4f47      	ldr	r7, [pc, #284]	; (8000d38 <HAL_GPIO_Init+0x1b8>)
 8000c1c:	42b8      	cmp	r0, r7
 8000c1e:	d079      	beq.n	8000d14 <HAL_GPIO_Init+0x194>
 8000c20:	4e46      	ldr	r6, [pc, #280]	; (8000d3c <HAL_GPIO_Init+0x1bc>)
 8000c22:	42b0      	cmp	r0, r6
 8000c24:	d078      	beq.n	8000d18 <HAL_GPIO_Init+0x198>
 8000c26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c2a:	42b0      	cmp	r0, r6
 8000c2c:	d076      	beq.n	8000d1c <HAL_GPIO_Init+0x19c>
 8000c2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c32:	42b0      	cmp	r0, r6
 8000c34:	d074      	beq.n	8000d20 <HAL_GPIO_Init+0x1a0>
 8000c36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c3a:	42b0      	cmp	r0, r6
 8000c3c:	d072      	beq.n	8000d24 <HAL_GPIO_Init+0x1a4>
 8000c3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c42:	42b0      	cmp	r0, r6
 8000c44:	d070      	beq.n	8000d28 <HAL_GPIO_Init+0x1a8>
 8000c46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c4a:	42b0      	cmp	r0, r6
 8000c4c:	d060      	beq.n	8000d10 <HAL_GPIO_Init+0x190>
 8000c4e:	2607      	movs	r6, #7
 8000c50:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c54:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c56:	3302      	adds	r3, #2
 8000c58:	4e36      	ldr	r6, [pc, #216]	; (8000d34 <HAL_GPIO_Init+0x1b4>)
 8000c5a:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c5e:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <HAL_GPIO_Init+0x1c0>)
 8000c60:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c62:	43eb      	mvns	r3, r5
 8000c64:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c68:	684f      	ldr	r7, [r1, #4]
 8000c6a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000c6e:	d001      	beq.n	8000c74 <HAL_GPIO_Init+0xf4>
        {
          temp |= iocurrent;
 8000c70:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000c74:	4a32      	ldr	r2, [pc, #200]	; (8000d40 <HAL_GPIO_Init+0x1c0>)
 8000c76:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000c78:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c7a:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c7e:	684f      	ldr	r7, [r1, #4]
 8000c80:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000c84:	d001      	beq.n	8000c8a <HAL_GPIO_Init+0x10a>
        {
          temp |= iocurrent;
 8000c86:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000c8a:	4a2d      	ldr	r2, [pc, #180]	; (8000d40 <HAL_GPIO_Init+0x1c0>)
 8000c8c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c8e:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c90:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c94:	684f      	ldr	r7, [r1, #4]
 8000c96:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000c9a:	d001      	beq.n	8000ca0 <HAL_GPIO_Init+0x120>
        {
          temp |= iocurrent;
 8000c9c:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <HAL_GPIO_Init+0x1c0>)
 8000ca2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000ca4:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000ca6:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca8:	684e      	ldr	r6, [r1, #4]
 8000caa:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000cae:	d001      	beq.n	8000cb4 <HAL_GPIO_Init+0x134>
        {
          temp |= iocurrent;
 8000cb0:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000cb4:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <HAL_GPIO_Init+0x1c0>)
 8000cb6:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb8:	3401      	adds	r4, #1
 8000cba:	2c0f      	cmp	r4, #15
 8000cbc:	d836      	bhi.n	8000d2c <HAL_GPIO_Init+0x1ac>
    ioposition = 0x01U << position;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	680a      	ldr	r2, [r1, #0]
 8000cc4:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000cc8:	42ab      	cmp	r3, r5
 8000cca:	d1f5      	bne.n	8000cb8 <HAL_GPIO_Init+0x138>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ccc:	684a      	ldr	r2, [r1, #4]
 8000cce:	2a02      	cmp	r2, #2
 8000cd0:	f43f af5a 	beq.w	8000b88 <HAL_GPIO_Init+0x8>
 8000cd4:	2a12      	cmp	r2, #18
 8000cd6:	f43f af57 	beq.w	8000b88 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000cda:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cdc:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ce6:	43d2      	mvns	r2, r2
 8000ce8:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cea:	684f      	ldr	r7, [r1, #4]
 8000cec:	f007 0703 	and.w	r7, r7, #3
 8000cf0:	fa07 f70e 	lsl.w	r7, r7, lr
 8000cf4:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000cf6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf8:	684e      	ldr	r6, [r1, #4]
 8000cfa:	1e77      	subs	r7, r6, #1
 8000cfc:	2f01      	cmp	r7, #1
 8000cfe:	f67f af57 	bls.w	8000bb0 <HAL_GPIO_Init+0x30>
 8000d02:	2e11      	cmp	r6, #17
 8000d04:	f43f af54 	beq.w	8000bb0 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d08:	2e12      	cmp	r6, #18
 8000d0a:	f47f af61 	bne.w	8000bd0 <HAL_GPIO_Init+0x50>
 8000d0e:	e74f      	b.n	8000bb0 <HAL_GPIO_Init+0x30>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d10:	2606      	movs	r6, #6
 8000d12:	e79d      	b.n	8000c50 <HAL_GPIO_Init+0xd0>
 8000d14:	2600      	movs	r6, #0
 8000d16:	e79b      	b.n	8000c50 <HAL_GPIO_Init+0xd0>
 8000d18:	2601      	movs	r6, #1
 8000d1a:	e799      	b.n	8000c50 <HAL_GPIO_Init+0xd0>
 8000d1c:	2602      	movs	r6, #2
 8000d1e:	e797      	b.n	8000c50 <HAL_GPIO_Init+0xd0>
 8000d20:	2603      	movs	r6, #3
 8000d22:	e795      	b.n	8000c50 <HAL_GPIO_Init+0xd0>
 8000d24:	2604      	movs	r6, #4
 8000d26:	e793      	b.n	8000c50 <HAL_GPIO_Init+0xd0>
 8000d28:	2605      	movs	r6, #5
 8000d2a:	e791      	b.n	8000c50 <HAL_GPIO_Init+0xd0>
      }
    }
  }
}
 8000d2c:	b003      	add	sp, #12
 8000d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40013800 	.word	0x40013800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40013c00 	.word	0x40013c00

08000d44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d44:	b912      	cbnz	r2, 8000d4c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d46:	0409      	lsls	r1, r1, #16
 8000d48:	6181      	str	r1, [r0, #24]
 8000d4a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000d4c:	6181      	str	r1, [r0, #24]
 8000d4e:	4770      	bx	lr

08000d50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000d50:	b510      	push	{r4, lr}
 8000d52:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_PWREx_EnableOverDrive+0x70>)
 8000d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_PWREx_EnableOverDrive+0x74>)
 8000d70:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d72:	f7ff fc79 	bl	8000668 <HAL_GetTick>
 8000d76:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d80:	d108      	bne.n	8000d94 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d82:	f7ff fc71 	bl	8000668 <HAL_GetTick>
 8000d86:	1b00      	subs	r0, r0, r4
 8000d88:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d8c:	d9f4      	bls.n	8000d78 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000d8e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000d90:	b002      	add	sp, #8
 8000d92:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d94:	2201      	movs	r2, #1
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_PWREx_EnableOverDrive+0x7c>)
 8000d98:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000d9a:	f7ff fc65 	bl	8000668 <HAL_GetTick>
 8000d9e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000da8:	d107      	bne.n	8000dba <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000daa:	f7ff fc5d 	bl	8000668 <HAL_GetTick>
 8000dae:	1b00      	subs	r0, r0, r4
 8000db0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000db4:	d9f4      	bls.n	8000da0 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8000db6:	2003      	movs	r0, #3
 8000db8:	e7ea      	b.n	8000d90 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000dba:	2000      	movs	r0, #0
 8000dbc:	e7e8      	b.n	8000d90 <HAL_PWREx_EnableOverDrive+0x40>
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	420e0040 	.word	0x420e0040
 8000dc8:	40007000 	.word	0x40007000
 8000dcc:	420e0044 	.word	0x420e0044

08000dd0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	f000 809d 	beq.w	8000f10 <HAL_RCC_ClockConfig+0x140>
{
 8000dd6:	b570      	push	{r4, r5, r6, lr}
 8000dd8:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000dda:	4b4f      	ldr	r3, [pc, #316]	; (8000f18 <HAL_RCC_ClockConfig+0x148>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d209      	bcs.n	8000dfa <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000de6:	b2cb      	uxtb	r3, r1
 8000de8:	4a4b      	ldr	r2, [pc, #300]	; (8000f18 <HAL_RCC_ClockConfig+0x148>)
 8000dea:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dec:	6813      	ldr	r3, [r2, #0]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	4299      	cmp	r1, r3
 8000df4:	d001      	beq.n	8000dfa <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 8000df6:	2001      	movs	r0, #1
 8000df8:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	f013 0f02 	tst.w	r3, #2
 8000e00:	d017      	beq.n	8000e32 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e02:	f013 0f04 	tst.w	r3, #4
 8000e06:	d004      	beq.n	8000e12 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e08:	4a44      	ldr	r2, [pc, #272]	; (8000f1c <HAL_RCC_ClockConfig+0x14c>)
 8000e0a:	6893      	ldr	r3, [r2, #8]
 8000e0c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000e10:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	f013 0f08 	tst.w	r3, #8
 8000e18:	d004      	beq.n	8000e24 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e1a:	4a40      	ldr	r2, [pc, #256]	; (8000f1c <HAL_RCC_ClockConfig+0x14c>)
 8000e1c:	6893      	ldr	r3, [r2, #8]
 8000e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e24:	4a3d      	ldr	r2, [pc, #244]	; (8000f1c <HAL_RCC_ClockConfig+0x14c>)
 8000e26:	6893      	ldr	r3, [r2, #8]
 8000e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e2c:	68a0      	ldr	r0, [r4, #8]
 8000e2e:	4303      	orrs	r3, r0
 8000e30:	6093      	str	r3, [r2, #8]
 8000e32:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	f013 0f01 	tst.w	r3, #1
 8000e3a:	d032      	beq.n	8000ea2 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e3c:	6863      	ldr	r3, [r4, #4]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d021      	beq.n	8000e86 <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e42:	1e9a      	subs	r2, r3, #2
 8000e44:	2a01      	cmp	r2, #1
 8000e46:	d925      	bls.n	8000e94 <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e48:	4a34      	ldr	r2, [pc, #208]	; (8000f1c <HAL_RCC_ClockConfig+0x14c>)
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	f012 0f02 	tst.w	r2, #2
 8000e50:	d060      	beq.n	8000f14 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e52:	4932      	ldr	r1, [pc, #200]	; (8000f1c <HAL_RCC_ClockConfig+0x14c>)
 8000e54:	688a      	ldr	r2, [r1, #8]
 8000e56:	f022 0203 	bic.w	r2, r2, #3
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e5e:	f7ff fc03 	bl	8000668 <HAL_GetTick>
 8000e62:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e64:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <HAL_RCC_ClockConfig+0x14c>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f003 030c 	and.w	r3, r3, #12
 8000e6c:	6862      	ldr	r2, [r4, #4]
 8000e6e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e72:	d016      	beq.n	8000ea2 <HAL_RCC_ClockConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e74:	f7ff fbf8 	bl	8000668 <HAL_GetTick>
 8000e78:	1b80      	subs	r0, r0, r6
 8000e7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d9f0      	bls.n	8000e64 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_TIMEOUT;
 8000e82:	2003      	movs	r0, #3
 8000e84:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e86:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <HAL_RCC_ClockConfig+0x14c>)
 8000e88:	6812      	ldr	r2, [r2, #0]
 8000e8a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000e8e:	d1e0      	bne.n	8000e52 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000e90:	2001      	movs	r0, #1
 8000e92:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e94:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <HAL_RCC_ClockConfig+0x14c>)
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000e9c:	d1d9      	bne.n	8000e52 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_RCC_ClockConfig+0x148>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	429d      	cmp	r5, r3
 8000eac:	d209      	bcs.n	8000ec2 <HAL_RCC_ClockConfig+0xf2>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eae:	b2ea      	uxtb	r2, r5
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_RCC_ClockConfig+0x148>)
 8000eb2:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	429d      	cmp	r5, r3
 8000ebc:	d001      	beq.n	8000ec2 <HAL_RCC_ClockConfig+0xf2>
    {
      return HAL_ERROR;
 8000ebe:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8000ec0:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	f013 0f04 	tst.w	r3, #4
 8000ec8:	d006      	beq.n	8000ed8 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <HAL_RCC_ClockConfig+0x14c>)
 8000ecc:	6893      	ldr	r3, [r2, #8]
 8000ece:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000ed2:	68e1      	ldr	r1, [r4, #12]
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	f013 0f08 	tst.w	r3, #8
 8000ede:	d007      	beq.n	8000ef0 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_RCC_ClockConfig+0x14c>)
 8000ee2:	6893      	ldr	r3, [r2, #8]
 8000ee4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ee8:	6921      	ldr	r1, [r4, #16]
 8000eea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000eee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ef0:	f000 f840 	bl	8000f74 <HAL_RCC_GetSysClockFreq>
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_RCC_ClockConfig+0x14c>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000efc:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_RCC_ClockConfig+0x150>)
 8000efe:	5cd3      	ldrb	r3, [r2, r3]
 8000f00:	40d8      	lsrs	r0, r3
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_RCC_ClockConfig+0x154>)
 8000f04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fb62 	bl	80005d0 <HAL_InitTick>
  return HAL_OK;
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000f10:	2001      	movs	r0, #1
 8000f12:	4770      	bx	lr
        return HAL_ERROR;
 8000f14:	2001      	movs	r0, #1
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
 8000f18:	40023c00 	.word	0x40023c00
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	08004b9c 	.word	0x08004b9c
 8000f24:	20000008 	.word	0x20000008

08000f28 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000f28:	4b01      	ldr	r3, [pc, #4]	; (8000f30 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f34:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000f36:	f7ff fff7 	bl	8000f28 <HAL_RCC_GetHCLKFreq>
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000f42:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000f44:	5cd3      	ldrb	r3, [r2, r3]
}
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	bd08      	pop	{r3, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	08004bac 	.word	0x08004bac

08000f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f56:	f7ff ffe7 	bl	8000f28 <HAL_RCC_GetHCLKFreq>
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000f62:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000f64:	5cd3      	ldrb	r3, [r2, r3]
}
 8000f66:	40d8      	lsrs	r0, r3
 8000f68:	bd08      	pop	{r3, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	08004bac 	.word	0x08004bac

08000f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f76:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <HAL_RCC_GetSysClockFreq+0x174>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	d006      	beq.n	8000f90 <HAL_RCC_GetSysClockFreq+0x1c>
 8000f82:	2b0c      	cmp	r3, #12
 8000f84:	d05a      	beq.n	800103c <HAL_RCC_GetSysClockFreq+0xc8>
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	f000 80ac 	beq.w	80010e4 <HAL_RCC_GetSysClockFreq+0x170>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f8c:	4857      	ldr	r0, [pc, #348]	; (80010ec <HAL_RCC_GetSysClockFreq+0x178>)
 8000f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f90:	4b55      	ldr	r3, [pc, #340]	; (80010e8 <HAL_RCC_GetSysClockFreq+0x174>)
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f9e:	d02a      	beq.n	8000ff6 <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fa0:	4b51      	ldr	r3, [pc, #324]	; (80010e8 <HAL_RCC_GetSysClockFreq+0x174>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000fa8:	461e      	mov	r6, r3
 8000faa:	2700      	movs	r7, #0
 8000fac:	015c      	lsls	r4, r3, #5
 8000fae:	2500      	movs	r5, #0
 8000fb0:	1ae4      	subs	r4, r4, r3
 8000fb2:	eb65 0507 	sbc.w	r5, r5, r7
 8000fb6:	01a9      	lsls	r1, r5, #6
 8000fb8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000fbc:	01a0      	lsls	r0, r4, #6
 8000fbe:	1b00      	subs	r0, r0, r4
 8000fc0:	eb61 0105 	sbc.w	r1, r1, r5
 8000fc4:	00cb      	lsls	r3, r1, #3
 8000fc6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fca:	00c4      	lsls	r4, r0, #3
 8000fcc:	19a0      	adds	r0, r4, r6
 8000fce:	eb43 0107 	adc.w	r1, r3, r7
 8000fd2:	024b      	lsls	r3, r1, #9
 8000fd4:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8000fd8:	0244      	lsls	r4, r0, #9
 8000fda:	4620      	mov	r0, r4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f7ff f96e 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fe4:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <HAL_RCC_GetSysClockFreq+0x174>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000fec:	3301      	adds	r3, #1
 8000fee:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000ff0:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ff6:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <HAL_RCC_GetSysClockFreq+0x174>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000ffe:	461e      	mov	r6, r3
 8001000:	2700      	movs	r7, #0
 8001002:	015c      	lsls	r4, r3, #5
 8001004:	2500      	movs	r5, #0
 8001006:	1ae4      	subs	r4, r4, r3
 8001008:	eb65 0507 	sbc.w	r5, r5, r7
 800100c:	01a9      	lsls	r1, r5, #6
 800100e:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001012:	01a0      	lsls	r0, r4, #6
 8001014:	1b00      	subs	r0, r0, r4
 8001016:	eb61 0105 	sbc.w	r1, r1, r5
 800101a:	00cb      	lsls	r3, r1, #3
 800101c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001020:	00c4      	lsls	r4, r0, #3
 8001022:	19a0      	adds	r0, r4, r6
 8001024:	eb43 0107 	adc.w	r1, r3, r7
 8001028:	028b      	lsls	r3, r1, #10
 800102a:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800102e:	0284      	lsls	r4, r0, #10
 8001030:	4620      	mov	r0, r4
 8001032:	4619      	mov	r1, r3
 8001034:	2300      	movs	r3, #0
 8001036:	f7ff f943 	bl	80002c0 <__aeabi_uldivmod>
 800103a:	e7d3      	b.n	8000fe4 <HAL_RCC_GetSysClockFreq+0x70>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_RCC_GetSysClockFreq+0x174>)
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800104a:	d028      	beq.n	800109e <HAL_RCC_GetSysClockFreq+0x12a>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_RCC_GetSysClockFreq+0x174>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001054:	461e      	mov	r6, r3
 8001056:	2700      	movs	r7, #0
 8001058:	015c      	lsls	r4, r3, #5
 800105a:	2500      	movs	r5, #0
 800105c:	1ae4      	subs	r4, r4, r3
 800105e:	eb65 0507 	sbc.w	r5, r5, r7
 8001062:	01a9      	lsls	r1, r5, #6
 8001064:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001068:	01a0      	lsls	r0, r4, #6
 800106a:	1b00      	subs	r0, r0, r4
 800106c:	eb61 0105 	sbc.w	r1, r1, r5
 8001070:	00cb      	lsls	r3, r1, #3
 8001072:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001076:	00c4      	lsls	r4, r0, #3
 8001078:	19a0      	adds	r0, r4, r6
 800107a:	eb43 0107 	adc.w	r1, r3, r7
 800107e:	024b      	lsls	r3, r1, #9
 8001080:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001084:	0244      	lsls	r4, r0, #9
 8001086:	4620      	mov	r0, r4
 8001088:	4619      	mov	r1, r3
 800108a:	2300      	movs	r3, #0
 800108c:	f7ff f918 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_RCC_GetSysClockFreq+0x174>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 8001098:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800109c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_RCC_GetSysClockFreq+0x174>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80010a6:	461e      	mov	r6, r3
 80010a8:	2700      	movs	r7, #0
 80010aa:	015c      	lsls	r4, r3, #5
 80010ac:	2500      	movs	r5, #0
 80010ae:	1ae4      	subs	r4, r4, r3
 80010b0:	eb65 0507 	sbc.w	r5, r5, r7
 80010b4:	01a9      	lsls	r1, r5, #6
 80010b6:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80010ba:	01a0      	lsls	r0, r4, #6
 80010bc:	1b00      	subs	r0, r0, r4
 80010be:	eb61 0105 	sbc.w	r1, r1, r5
 80010c2:	00cb      	lsls	r3, r1, #3
 80010c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010c8:	00c4      	lsls	r4, r0, #3
 80010ca:	19a0      	adds	r0, r4, r6
 80010cc:	eb43 0107 	adc.w	r1, r3, r7
 80010d0:	028b      	lsls	r3, r1, #10
 80010d2:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80010d6:	0284      	lsls	r4, r0, #10
 80010d8:	4620      	mov	r0, r4
 80010da:	4619      	mov	r1, r3
 80010dc:	2300      	movs	r3, #0
 80010de:	f7ff f8ef 	bl	80002c0 <__aeabi_uldivmod>
 80010e2:	e7d5      	b.n	8001090 <HAL_RCC_GetSysClockFreq+0x11c>
      sysclockfreq = HSE_VALUE;
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <HAL_RCC_GetSysClockFreq+0x17c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	00f42400 	.word	0x00f42400
 80010f0:	007a1200 	.word	0x007a1200

080010f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b570      	push	{r4, r5, r6, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	6803      	ldr	r3, [r0, #0]
 80010fc:	f013 0f01 	tst.w	r3, #1
 8001100:	d041      	beq.n	8001186 <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001102:	4ba6      	ldr	r3, [pc, #664]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b04      	cmp	r3, #4
 800110c:	d032      	beq.n	8001174 <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800110e:	4ba3      	ldr	r3, [pc, #652]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001116:	2b08      	cmp	r3, #8
 8001118:	d027      	beq.n	800116a <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	4ba0      	ldr	r3, [pc, #640]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001122:	2b0c      	cmp	r3, #12
 8001124:	d059      	beq.n	80011da <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001126:	6863      	ldr	r3, [r4, #4]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	d05b      	beq.n	80011e6 <HAL_RCC_OscConfig+0xf2>
 800112e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001132:	d05e      	beq.n	80011f2 <HAL_RCC_OscConfig+0xfe>
 8001134:	4b99      	ldr	r3, [pc, #612]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001144:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001146:	6863      	ldr	r3, [r4, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d05c      	beq.n	8001206 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fa8c 	bl	8000668 <HAL_GetTick>
 8001150:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b92      	ldr	r3, [pc, #584]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800115a:	d114      	bne.n	8001186 <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fa84 	bl	8000668 <HAL_GetTick>
 8001160:	1b40      	subs	r0, r0, r5
 8001162:	2864      	cmp	r0, #100	; 0x64
 8001164:	d9f5      	bls.n	8001152 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8001166:	2003      	movs	r0, #3
 8001168:	e19d      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800116a:	4b8c      	ldr	r3, [pc, #560]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001172:	d0d2      	beq.n	800111a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	4b89      	ldr	r3, [pc, #548]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800117c:	d003      	beq.n	8001186 <HAL_RCC_OscConfig+0x92>
 800117e:	6863      	ldr	r3, [r4, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 818d 	beq.w	80014a0 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	f013 0f02 	tst.w	r3, #2
 800118c:	d067      	beq.n	800125e <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800118e:	4b83      	ldr	r3, [pc, #524]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f013 0f0c 	tst.w	r3, #12
 8001196:	d04a      	beq.n	800122e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001198:	4b80      	ldr	r3, [pc, #512]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d03f      	beq.n	8001224 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a4:	4b7d      	ldr	r3, [pc, #500]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	d048      	beq.n	8001242 <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011b0:	68e3      	ldr	r3, [r4, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d074      	beq.n	80012a0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b6:	2201      	movs	r2, #1
 80011b8:	4b79      	ldr	r3, [pc, #484]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80011ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011bc:	f7ff fa54 	bl	8000668 <HAL_GetTick>
 80011c0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c2:	4b76      	ldr	r3, [pc, #472]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f013 0f02 	tst.w	r3, #2
 80011ca:	d160      	bne.n	800128e <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011cc:	f7ff fa4c 	bl	8000668 <HAL_GetTick>
 80011d0:	1b40      	subs	r0, r0, r5
 80011d2:	2802      	cmp	r0, #2
 80011d4:	d9f5      	bls.n	80011c2 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 80011d6:	2003      	movs	r0, #3
 80011d8:	e165      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011da:	4b70      	ldr	r3, [pc, #448]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80011e2:	d0a0      	beq.n	8001126 <HAL_RCC_OscConfig+0x32>
 80011e4:	e7c6      	b.n	8001174 <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e6:	4a6d      	ldr	r2, [pc, #436]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 80011e8:	6813      	ldr	r3, [r2, #0]
 80011ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	e7a9      	b.n	8001146 <HAL_RCC_OscConfig+0x52>
 80011f2:	4b6a      	ldr	r3, [pc, #424]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e79f      	b.n	8001146 <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 8001206:	f7ff fa2f 	bl	8000668 <HAL_GetTick>
 800120a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120c:	4b63      	ldr	r3, [pc, #396]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001214:	d0b7      	beq.n	8001186 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001216:	f7ff fa27 	bl	8000668 <HAL_GetTick>
 800121a:	1b40      	subs	r0, r0, r5
 800121c:	2864      	cmp	r0, #100	; 0x64
 800121e:	d9f5      	bls.n	800120c <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001220:	2003      	movs	r0, #3
 8001222:	e140      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001224:	4b5d      	ldr	r3, [pc, #372]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800122c:	d1ba      	bne.n	80011a4 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	4b5b      	ldr	r3, [pc, #364]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f013 0f02 	tst.w	r3, #2
 8001236:	d00a      	beq.n	800124e <HAL_RCC_OscConfig+0x15a>
 8001238:	68e3      	ldr	r3, [r4, #12]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d007      	beq.n	800124e <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 800123e:	2001      	movs	r0, #1
 8001240:	e131      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001242:	4b56      	ldr	r3, [pc, #344]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800124a:	d1b1      	bne.n	80011b0 <HAL_RCC_OscConfig+0xbc>
 800124c:	e7ef      	b.n	800122e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4a53      	ldr	r2, [pc, #332]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001250:	6813      	ldr	r3, [r2, #0]
 8001252:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001256:	6921      	ldr	r1, [r4, #16]
 8001258:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800125c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	f013 0f08 	tst.w	r3, #8
 8001264:	d040      	beq.n	80012e8 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001266:	6963      	ldr	r3, [r4, #20]
 8001268:	b363      	cbz	r3, 80012c4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126a:	2201      	movs	r2, #1
 800126c:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <HAL_RCC_OscConfig+0x2b0>)
 800126e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001270:	f7ff f9fa 	bl	8000668 <HAL_GetTick>
 8001274:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001276:	4b49      	ldr	r3, [pc, #292]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127a:	f013 0f02 	tst.w	r3, #2
 800127e:	d133      	bne.n	80012e8 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff f9f2 	bl	8000668 <HAL_GetTick>
 8001284:	1b40      	subs	r0, r0, r5
 8001286:	2802      	cmp	r0, #2
 8001288:	d9f5      	bls.n	8001276 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 800128a:	2003      	movs	r0, #3
 800128c:	e10b      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128e:	4a43      	ldr	r2, [pc, #268]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001290:	6813      	ldr	r3, [r2, #0]
 8001292:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001296:	6921      	ldr	r1, [r4, #16]
 8001298:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e7de      	b.n	800125e <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 80012a0:	2200      	movs	r2, #0
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012a6:	f7ff f9df 	bl	8000668 <HAL_GetTick>
 80012aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ac:	4b3b      	ldr	r3, [pc, #236]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f013 0f02 	tst.w	r3, #2
 80012b4:	d0d3      	beq.n	800125e <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b6:	f7ff f9d7 	bl	8000668 <HAL_GetTick>
 80012ba:	1b40      	subs	r0, r0, r5
 80012bc:	2802      	cmp	r0, #2
 80012be:	d9f5      	bls.n	80012ac <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80012c0:	2003      	movs	r0, #3
 80012c2:	e0f0      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c4:	2200      	movs	r2, #0
 80012c6:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <HAL_RCC_OscConfig+0x2b0>)
 80012c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ca:	f7ff f9cd 	bl	8000668 <HAL_GetTick>
 80012ce:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	4b32      	ldr	r3, [pc, #200]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 80012d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d4:	f013 0f02 	tst.w	r3, #2
 80012d8:	d006      	beq.n	80012e8 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012da:	f7ff f9c5 	bl	8000668 <HAL_GetTick>
 80012de:	1b40      	subs	r0, r0, r5
 80012e0:	2802      	cmp	r0, #2
 80012e2:	d9f5      	bls.n	80012d0 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 80012e4:	2003      	movs	r0, #3
 80012e6:	e0de      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e8:	6823      	ldr	r3, [r4, #0]
 80012ea:	f013 0f04 	tst.w	r3, #4
 80012ee:	d079      	beq.n	80013e4 <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f0:	4b2a      	ldr	r3, [pc, #168]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80012f8:	d133      	bne.n	8001362 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001302:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001312:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_RCC_OscConfig+0x2b4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f413 7f80 	tst.w	r3, #256	; 0x100
 800131c:	d023      	beq.n	8001366 <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131e:	68a3      	ldr	r3, [r4, #8]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d034      	beq.n	800138e <HAL_RCC_OscConfig+0x29a>
 8001324:	2b05      	cmp	r3, #5
 8001326:	d041      	beq.n	80013ac <HAL_RCC_OscConfig+0x2b8>
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 800132a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	671a      	str	r2, [r3, #112]	; 0x70
 8001332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001334:	f022 0204 	bic.w	r2, r2, #4
 8001338:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800133a:	68a3      	ldr	r3, [r4, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d03f      	beq.n	80013c0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001340:	f7ff f992 	bl	8000668 <HAL_GetTick>
 8001344:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	f013 0f02 	tst.w	r3, #2
 800134e:	d148      	bne.n	80013e2 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001350:	f7ff f98a 	bl	8000668 <HAL_GetTick>
 8001354:	1b80      	subs	r0, r0, r6
 8001356:	f241 3388 	movw	r3, #5000	; 0x1388
 800135a:	4298      	cmp	r0, r3
 800135c:	d9f3      	bls.n	8001346 <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 800135e:	2003      	movs	r0, #3
 8001360:	e0a1      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8001362:	2500      	movs	r5, #0
 8001364:	e7d6      	b.n	8001314 <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <HAL_RCC_OscConfig+0x2b4>)
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001370:	f7ff f97a 	bl	8000668 <HAL_GetTick>
 8001374:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_RCC_OscConfig+0x2b4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800137e:	d1ce      	bne.n	800131e <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001380:	f7ff f972 	bl	8000668 <HAL_GetTick>
 8001384:	1b80      	subs	r0, r0, r6
 8001386:	2802      	cmp	r0, #2
 8001388:	d9f5      	bls.n	8001376 <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 800138a:	2003      	movs	r0, #3
 800138c:	e08b      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138e:	4a03      	ldr	r2, [pc, #12]	; (800139c <HAL_RCC_OscConfig+0x2a8>)
 8001390:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6713      	str	r3, [r2, #112]	; 0x70
 8001398:	e7cf      	b.n	800133a <HAL_RCC_OscConfig+0x246>
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	42470000 	.word	0x42470000
 80013a4:	42470e80 	.word	0x42470e80
 80013a8:	40007000 	.word	0x40007000
 80013ac:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <HAL_RCC_OscConfig+0x3bc>)
 80013ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013b0:	f042 0204 	orr.w	r2, r2, #4
 80013b4:	671a      	str	r2, [r3, #112]	; 0x70
 80013b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80013b8:	f042 0201 	orr.w	r2, r2, #1
 80013bc:	671a      	str	r2, [r3, #112]	; 0x70
 80013be:	e7bc      	b.n	800133a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c0:	f7ff f952 	bl	8000668 <HAL_GetTick>
 80013c4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c6:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <HAL_RCC_OscConfig+0x3bc>)
 80013c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ca:	f013 0f02 	tst.w	r3, #2
 80013ce:	d008      	beq.n	80013e2 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff f94a 	bl	8000668 <HAL_GetTick>
 80013d4:	1b80      	subs	r0, r0, r6
 80013d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80013da:	4298      	cmp	r0, r3
 80013dc:	d9f3      	bls.n	80013c6 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 80013de:	2003      	movs	r0, #3
 80013e0:	e061      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e2:	b9e5      	cbnz	r5, 800141e <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e4:	69a3      	ldr	r3, [r4, #24]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d05c      	beq.n	80014a4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013ea:	4a31      	ldr	r2, [pc, #196]	; (80014b0 <HAL_RCC_OscConfig+0x3bc>)
 80013ec:	6892      	ldr	r2, [r2, #8]
 80013ee:	f002 020c 	and.w	r2, r2, #12
 80013f2:	2a08      	cmp	r2, #8
 80013f4:	d059      	beq.n	80014aa <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d017      	beq.n	800142a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fa:	2200      	movs	r2, #0
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_RCC_OscConfig+0x3c0>)
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff f932 	bl	8000668 <HAL_GetTick>
 8001404:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_RCC_OscConfig+0x3bc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800140e:	d045      	beq.n	800149c <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001410:	f7ff f92a 	bl	8000668 <HAL_GetTick>
 8001414:	1b00      	subs	r0, r0, r4
 8001416:	2802      	cmp	r0, #2
 8001418:	d9f5      	bls.n	8001406 <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 800141a:	2003      	movs	r0, #3
 800141c:	e043      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800141e:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <HAL_RCC_OscConfig+0x3bc>)
 8001420:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001426:	6413      	str	r3, [r2, #64]	; 0x40
 8001428:	e7dc      	b.n	80013e4 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 800142a:	2200      	movs	r2, #0
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <HAL_RCC_OscConfig+0x3c0>)
 800142e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001430:	f7ff f91a 	bl	8000668 <HAL_GetTick>
 8001434:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_RCC_OscConfig+0x3bc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800143e:	d006      	beq.n	800144e <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff f912 	bl	8000668 <HAL_GetTick>
 8001444:	1b40      	subs	r0, r0, r5
 8001446:	2802      	cmp	r0, #2
 8001448:	d9f5      	bls.n	8001436 <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 800144a:	2003      	movs	r0, #3
 800144c:	e02b      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800144e:	69e3      	ldr	r3, [r4, #28]
 8001450:	6a22      	ldr	r2, [r4, #32]
 8001452:	4313      	orrs	r3, r2
 8001454:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001456:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800145a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800145c:	0852      	lsrs	r2, r2, #1
 800145e:	3a01      	subs	r2, #1
 8001460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001464:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001466:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800146a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800146c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001470:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_RCC_OscConfig+0x3bc>)
 8001472:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001474:	2201      	movs	r2, #1
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_RCC_OscConfig+0x3c0>)
 8001478:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800147a:	f7ff f8f5 	bl	8000668 <HAL_GetTick>
 800147e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_RCC_OscConfig+0x3bc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001488:	d106      	bne.n	8001498 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff f8ed 	bl	8000668 <HAL_GetTick>
 800148e:	1b00      	subs	r0, r0, r4
 8001490:	2802      	cmp	r0, #2
 8001492:	d9f5      	bls.n	8001480 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 8001494:	2003      	movs	r0, #3
 8001496:	e006      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001498:	2000      	movs	r0, #0
 800149a:	e004      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
 800149c:	2000      	movs	r0, #0
 800149e:	e002      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 80014a0:	2001      	movs	r0, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 80014a4:	2000      	movs	r0, #0
}
 80014a6:	b002      	add	sp, #8
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80014aa:	2001      	movs	r0, #1
 80014ac:	e7fb      	b.n	80014a6 <HAL_RCC_OscConfig+0x3b2>
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	42470060 	.word	0x42470060

080014b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80014b8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014ba:	6a03      	ldr	r3, [r0, #32]
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014c2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80014c4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80014c6:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80014c8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014cc:	680d      	ldr	r5, [r1, #0]
 80014ce:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80014d0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80014d4:	688d      	ldr	r5, [r1, #8]
 80014d6:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80014d8:	4d0f      	ldr	r5, [pc, #60]	; (8001518 <TIM_OC1_SetConfig+0x60>)
 80014da:	42a8      	cmp	r0, r5
 80014dc:	d01a      	beq.n	8001514 <TIM_OC1_SetConfig+0x5c>
 80014de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014e2:	42a8      	cmp	r0, r5
 80014e4:	d014      	beq.n	8001510 <TIM_OC1_SetConfig+0x58>
 80014e6:	2500      	movs	r5, #0
 80014e8:	b15d      	cbz	r5, 8001502 <TIM_OC1_SetConfig+0x4a>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80014ea:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80014ee:	68cd      	ldr	r5, [r1, #12]
 80014f0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80014f2:	f023 0304 	bic.w	r3, r3, #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80014f6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80014fa:	694d      	ldr	r5, [r1, #20]
 80014fc:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80014fe:	698d      	ldr	r5, [r1, #24]
 8001500:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001502:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001504:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001506:	684a      	ldr	r2, [r1, #4]
 8001508:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800150a:	6203      	str	r3, [r0, #32]
} 
 800150c:	bc30      	pop	{r4, r5}
 800150e:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001510:	2501      	movs	r5, #1
 8001512:	e7e9      	b.n	80014e8 <TIM_OC1_SetConfig+0x30>
 8001514:	2501      	movs	r5, #1
 8001516:	e7e7      	b.n	80014e8 <TIM_OC1_SetConfig+0x30>
 8001518:	40010000 	.word	0x40010000

0800151c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800151c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800151e:	6a03      	ldr	r3, [r0, #32]
 8001520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001524:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001526:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001528:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800152a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800152c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001530:	680d      	ldr	r5, [r1, #0]
 8001532:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001538:	688d      	ldr	r5, [r1, #8]
 800153a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800153e:	4d11      	ldr	r5, [pc, #68]	; (8001584 <TIM_OC3_SetConfig+0x68>)
 8001540:	42a8      	cmp	r0, r5
 8001542:	d01d      	beq.n	8001580 <TIM_OC3_SetConfig+0x64>
 8001544:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001548:	42a8      	cmp	r0, r5
 800154a:	d017      	beq.n	800157c <TIM_OC3_SetConfig+0x60>
 800154c:	2500      	movs	r5, #0
 800154e:	b175      	cbz	r5, 800156e <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001554:	68cd      	ldr	r5, [r1, #12]
 8001556:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800155a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800155e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001562:	694d      	ldr	r5, [r1, #20]
 8001564:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001568:	698d      	ldr	r5, [r1, #24]
 800156a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800156e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001570:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001572:	684a      	ldr	r2, [r1, #4]
 8001574:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001576:	6203      	str	r3, [r0, #32]
}
 8001578:	bc30      	pop	{r4, r5}
 800157a:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800157c:	2501      	movs	r5, #1
 800157e:	e7e6      	b.n	800154e <TIM_OC3_SetConfig+0x32>
 8001580:	2501      	movs	r5, #1
 8001582:	e7e4      	b.n	800154e <TIM_OC3_SetConfig+0x32>
 8001584:	40010000 	.word	0x40010000

08001588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001588:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800158a:	6a03      	ldr	r3, [r0, #32]
 800158c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001590:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001592:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001594:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001596:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001598:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800159c:	680d      	ldr	r5, [r1, #0]
 800159e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80015a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80015a6:	688d      	ldr	r5, [r1, #8]
 80015a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80015ac:	4d0c      	ldr	r5, [pc, #48]	; (80015e0 <TIM_OC4_SetConfig+0x58>)
 80015ae:	42a8      	cmp	r0, r5
 80015b0:	d013      	beq.n	80015da <TIM_OC4_SetConfig+0x52>
 80015b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015b6:	42a8      	cmp	r0, r5
 80015b8:	d00d      	beq.n	80015d6 <TIM_OC4_SetConfig+0x4e>
 80015ba:	2500      	movs	r5, #0
 80015bc:	b125      	cbz	r5, 80015c8 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80015be:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80015c2:	694d      	ldr	r5, [r1, #20]
 80015c4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015c8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80015ca:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80015cc:	684a      	ldr	r2, [r1, #4]
 80015ce:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015d0:	6203      	str	r3, [r0, #32]
}
 80015d2:	bc30      	pop	{r4, r5}
 80015d4:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80015d6:	2501      	movs	r5, #1
 80015d8:	e7f0      	b.n	80015bc <TIM_OC4_SetConfig+0x34>
 80015da:	2501      	movs	r5, #1
 80015dc:	e7ee      	b.n	80015bc <TIM_OC4_SetConfig+0x34>
 80015de:	bf00      	nop
 80015e0:	40010000 	.word	0x40010000

080015e4 <TIM_TI2_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80015e4:	b430      	push	{r4, r5}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015e6:	6a04      	ldr	r4, [r0, #32]
 80015e8:	f024 0410 	bic.w	r4, r4, #16
 80015ec:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015ee:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80015f0:	6a05      	ldr	r5, [r0, #32]
  
  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80015f2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80015f6:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015fa:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80015fe:	031b      	lsls	r3, r3, #12
 8001600:	b29b      	uxth	r3, r3
 8001602:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001604:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001608:	0109      	lsls	r1, r1, #4
 800160a:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 800160e:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001610:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001612:	6205      	str	r5, [r0, #32]
}
 8001614:	bc30      	pop	{r4, r5}
 8001616:	4770      	bx	lr

08001618 <TIM_TI3_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001618:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800161a:	6a04      	ldr	r4, [r0, #32]
 800161c:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8001620:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001622:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8001624:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001626:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 800162a:	4322      	orrs	r2, r4

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800162c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	b2db      	uxtb	r3, r3
 8001634:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001636:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800163a:	0209      	lsls	r1, r1, #8
 800163c:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8001640:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001642:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8001644:	6205      	str	r5, [r0, #32]
}
 8001646:	bc30      	pop	{r4, r5}
 8001648:	4770      	bx	lr

0800164a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800164a:	b430      	push	{r4, r5}
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800164c:	6a04      	ldr	r4, [r0, #32]
 800164e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001652:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001654:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8001656:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001658:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800165c:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001660:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001664:	031b      	lsls	r3, r3, #12
 8001666:	b29b      	uxth	r3, r3
 8001668:	431a      	orrs	r2, r3

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800166a:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800166e:	0309      	lsls	r1, r1, #12
 8001670:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8001674:	430d      	orrs	r5, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001676:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8001678:	6205      	str	r5, [r0, #32]
}
 800167a:	bc30      	pop	{r4, r5}
 800167c:	4770      	bx	lr

0800167e <HAL_TIM_IC_MspInit>:
{
 800167e:	4770      	bx	lr

08001680 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001680:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001682:	4a45      	ldr	r2, [pc, #276]	; (8001798 <TIM_Base_SetConfig+0x118>)
 8001684:	4290      	cmp	r0, r2
 8001686:	d04a      	beq.n	800171e <TIM_Base_SetConfig+0x9e>
 8001688:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800168c:	d049      	beq.n	8001722 <TIM_Base_SetConfig+0xa2>
 800168e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001692:	4290      	cmp	r0, r2
 8001694:	d047      	beq.n	8001726 <TIM_Base_SetConfig+0xa6>
 8001696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800169a:	4290      	cmp	r0, r2
 800169c:	d045      	beq.n	800172a <TIM_Base_SetConfig+0xaa>
 800169e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016a2:	4290      	cmp	r0, r2
 80016a4:	d043      	beq.n	800172e <TIM_Base_SetConfig+0xae>
 80016a6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80016aa:	4290      	cmp	r0, r2
 80016ac:	d035      	beq.n	800171a <TIM_Base_SetConfig+0x9a>
 80016ae:	2200      	movs	r2, #0
 80016b0:	b11a      	cbz	r2, 80016ba <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016b6:	684a      	ldr	r2, [r1, #4]
 80016b8:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80016ba:	4a37      	ldr	r2, [pc, #220]	; (8001798 <TIM_Base_SetConfig+0x118>)
 80016bc:	4290      	cmp	r0, r2
 80016be:	d03a      	beq.n	8001736 <TIM_Base_SetConfig+0xb6>
 80016c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016c4:	d050      	beq.n	8001768 <TIM_Base_SetConfig+0xe8>
 80016c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80016ca:	4290      	cmp	r0, r2
 80016cc:	d04e      	beq.n	800176c <TIM_Base_SetConfig+0xec>
 80016ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016d2:	4290      	cmp	r0, r2
 80016d4:	d04c      	beq.n	8001770 <TIM_Base_SetConfig+0xf0>
 80016d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016da:	4290      	cmp	r0, r2
 80016dc:	d04a      	beq.n	8001774 <TIM_Base_SetConfig+0xf4>
 80016de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80016e2:	4290      	cmp	r0, r2
 80016e4:	d048      	beq.n	8001778 <TIM_Base_SetConfig+0xf8>
 80016e6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80016ea:	4290      	cmp	r0, r2
 80016ec:	d046      	beq.n	800177c <TIM_Base_SetConfig+0xfc>
 80016ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016f2:	4290      	cmp	r0, r2
 80016f4:	d044      	beq.n	8001780 <TIM_Base_SetConfig+0x100>
 80016f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016fa:	4290      	cmp	r0, r2
 80016fc:	d042      	beq.n	8001784 <TIM_Base_SetConfig+0x104>
 80016fe:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001702:	4290      	cmp	r0, r2
 8001704:	d040      	beq.n	8001788 <TIM_Base_SetConfig+0x108>
 8001706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800170a:	4290      	cmp	r0, r2
 800170c:	d03e      	beq.n	800178c <TIM_Base_SetConfig+0x10c>
 800170e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001712:	4290      	cmp	r0, r2
 8001714:	d00d      	beq.n	8001732 <TIM_Base_SetConfig+0xb2>
 8001716:	2200      	movs	r2, #0
 8001718:	e00e      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800171a:	2201      	movs	r2, #1
 800171c:	e7c8      	b.n	80016b0 <TIM_Base_SetConfig+0x30>
 800171e:	2201      	movs	r2, #1
 8001720:	e7c6      	b.n	80016b0 <TIM_Base_SetConfig+0x30>
 8001722:	2201      	movs	r2, #1
 8001724:	e7c4      	b.n	80016b0 <TIM_Base_SetConfig+0x30>
 8001726:	2201      	movs	r2, #1
 8001728:	e7c2      	b.n	80016b0 <TIM_Base_SetConfig+0x30>
 800172a:	2201      	movs	r2, #1
 800172c:	e7c0      	b.n	80016b0 <TIM_Base_SetConfig+0x30>
 800172e:	2201      	movs	r2, #1
 8001730:	e7be      	b.n	80016b0 <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001732:	2201      	movs	r2, #1
 8001734:	e000      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
 8001736:	2201      	movs	r2, #1
 8001738:	b11a      	cbz	r2, 8001742 <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 800173a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800173e:	68ca      	ldr	r2, [r1, #12]
 8001740:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001742:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001744:	688b      	ldr	r3, [r1, #8]
 8001746:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001748:	680b      	ldr	r3, [r1, #0]
 800174a:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <TIM_Base_SetConfig+0x118>)
 800174e:	4298      	cmp	r0, r3
 8001750:	d020      	beq.n	8001794 <TIM_Base_SetConfig+0x114>
 8001752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001756:	4298      	cmp	r0, r3
 8001758:	d01a      	beq.n	8001790 <TIM_Base_SetConfig+0x110>
 800175a:	2300      	movs	r3, #0
 800175c:	b10b      	cbz	r3, 8001762 <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 800175e:	690b      	ldr	r3, [r1, #16]
 8001760:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001762:	2301      	movs	r3, #1
 8001764:	6143      	str	r3, [r0, #20]
 8001766:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001768:	2201      	movs	r2, #1
 800176a:	e7e5      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
 800176c:	2201      	movs	r2, #1
 800176e:	e7e3      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
 8001770:	2201      	movs	r2, #1
 8001772:	e7e1      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
 8001774:	2201      	movs	r2, #1
 8001776:	e7df      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
 8001778:	2201      	movs	r2, #1
 800177a:	e7dd      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
 800177c:	2201      	movs	r2, #1
 800177e:	e7db      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
 8001780:	2201      	movs	r2, #1
 8001782:	e7d9      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
 8001784:	2201      	movs	r2, #1
 8001786:	e7d7      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
 8001788:	2201      	movs	r2, #1
 800178a:	e7d5      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
 800178c:	2201      	movs	r2, #1
 800178e:	e7d3      	b.n	8001738 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001790:	2301      	movs	r3, #1
 8001792:	e7e3      	b.n	800175c <TIM_Base_SetConfig+0xdc>
 8001794:	2301      	movs	r3, #1
 8001796:	e7e1      	b.n	800175c <TIM_Base_SetConfig+0xdc>
 8001798:	40010000 	.word	0x40010000

0800179c <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 800179c:	b1a8      	cbz	r0, 80017ca <HAL_TIM_PWM_Init+0x2e>
{
 800179e:	b510      	push	{r4, lr}
 80017a0:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80017a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017a6:	b15b      	cbz	r3, 80017c0 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 80017a8:	2302      	movs	r3, #2
 80017aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80017ae:	1d21      	adds	r1, r4, #4
 80017b0:	6820      	ldr	r0, [r4, #0]
 80017b2:	f7ff ff65 	bl	8001680 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80017bc:	2000      	movs	r0, #0
 80017be:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80017c0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80017c4:	f001 f8fe 	bl	80029c4 <HAL_TIM_PWM_MspInit>
 80017c8:	e7ee      	b.n	80017a8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80017ca:	2001      	movs	r0, #1
 80017cc:	4770      	bx	lr

080017ce <HAL_TIM_IC_Init>:
  if(htim == NULL)
 80017ce:	b1a8      	cbz	r0, 80017fc <HAL_TIM_IC_Init+0x2e>
{
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80017d4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017d8:	b15b      	cbz	r3, 80017f2 <HAL_TIM_IC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;   
 80017da:	2302      	movs	r3, #2
 80017dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80017e0:	1d21      	adds	r1, r4, #4
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	f7ff ff4c 	bl	8001680 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80017ee:	2000      	movs	r0, #0
 80017f0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80017f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 80017f6:	f7ff ff42 	bl	800167e <HAL_TIM_IC_MspInit>
 80017fa:	e7ee      	b.n	80017da <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 80017fc:	2001      	movs	r0, #1
 80017fe:	4770      	bx	lr

08001800 <HAL_TIM_Encoder_Init>:
  if(htim == NULL)
 8001800:	2800      	cmp	r0, #0
 8001802:	d047      	beq.n	8001894 <HAL_TIM_Encoder_Init+0x94>
{
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001806:	4605      	mov	r5, r0
 8001808:	460c      	mov	r4, r1
  if(htim->State == HAL_TIM_STATE_RESET)
 800180a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800180e:	2b00      	cmp	r3, #0
 8001810:	d03b      	beq.n	800188a <HAL_TIM_Encoder_Init+0x8a>
  htim->State= HAL_TIM_STATE_BUSY;   
 8001812:	2302      	movs	r3, #2
 8001814:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001818:	4629      	mov	r1, r5
 800181a:	f851 2b04 	ldr.w	r2, [r1], #4
 800181e:	6893      	ldr	r3, [r2, #8]
 8001820:	f023 0307 	bic.w	r3, r3, #7
 8001824:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8001826:	6828      	ldr	r0, [r5, #0]
 8001828:	f7ff ff2a 	bl	8001680 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800182c:	6828      	ldr	r0, [r5, #0]
 800182e:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001830:	6983      	ldr	r3, [r0, #24]
  tmpccer = htim->Instance->CCER;
 8001832:	6a02      	ldr	r2, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001834:	6821      	ldr	r1, [r4, #0]
 8001836:	430e      	orrs	r6, r1
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800183c:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001840:	68a1      	ldr	r1, [r4, #8]
 8001842:	69a7      	ldr	r7, [r4, #24]
 8001844:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001848:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800184a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800184e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001852:	68e1      	ldr	r1, [r4, #12]
 8001854:	69e7      	ldr	r7, [r4, #28]
 8001856:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800185a:	430b      	orrs	r3, r1
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800185c:	6927      	ldr	r7, [r4, #16]
 800185e:	6a21      	ldr	r1, [r4, #32]
 8001860:	0309      	lsls	r1, r1, #12
 8001862:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 8001866:	430b      	orrs	r3, r1
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001868:	f022 02aa 	bic.w	r2, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800186c:	6861      	ldr	r1, [r4, #4]
 800186e:	6964      	ldr	r4, [r4, #20]
 8001870:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
 8001874:	430a      	orrs	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8001876:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8001878:	6829      	ldr	r1, [r5, #0]
 800187a:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	621a      	str	r2, [r3, #32]
  htim->State= HAL_TIM_STATE_READY;
 8001880:	2301      	movs	r3, #1
 8001882:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 8001886:	2000      	movs	r0, #0
 8001888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800188a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 800188e:	f001 f8cf 	bl	8002a30 <HAL_TIM_Encoder_MspInit>
 8001892:	e7be      	b.n	8001812 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	4770      	bx	lr

08001898 <TIM_TI1_SetConfig>:
{
 8001898:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800189a:	6a04      	ldr	r4, [r0, #32]
 800189c:	f024 0401 	bic.w	r4, r4, #1
 80018a0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018a2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80018a4:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80018a6:	4e23      	ldr	r6, [pc, #140]	; (8001934 <TIM_TI1_SetConfig+0x9c>)
 80018a8:	42b0      	cmp	r0, r6
 80018aa:	d030      	beq.n	800190e <TIM_TI1_SetConfig+0x76>
 80018ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018b0:	d02f      	beq.n	8001912 <TIM_TI1_SetConfig+0x7a>
 80018b2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80018b6:	42b0      	cmp	r0, r6
 80018b8:	d02d      	beq.n	8001916 <TIM_TI1_SetConfig+0x7e>
 80018ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80018be:	42b0      	cmp	r0, r6
 80018c0:	d02b      	beq.n	800191a <TIM_TI1_SetConfig+0x82>
 80018c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80018c6:	42b0      	cmp	r0, r6
 80018c8:	d029      	beq.n	800191e <TIM_TI1_SetConfig+0x86>
 80018ca:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80018ce:	42b0      	cmp	r0, r6
 80018d0:	d027      	beq.n	8001922 <TIM_TI1_SetConfig+0x8a>
 80018d2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80018d6:	42b0      	cmp	r0, r6
 80018d8:	d025      	beq.n	8001926 <TIM_TI1_SetConfig+0x8e>
 80018da:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80018de:	42b0      	cmp	r0, r6
 80018e0:	d013      	beq.n	800190a <TIM_TI1_SetConfig+0x72>
 80018e2:	2600      	movs	r6, #0
 80018e4:	bb0e      	cbnz	r6, 800192a <TIM_TI1_SetConfig+0x92>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80018e6:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80018ea:	f042 0201 	orr.w	r2, r2, #1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018f8:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80018fc:	f001 010a 	and.w	r1, r1, #10
 8001900:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 8001902:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001904:	6201      	str	r1, [r0, #32]
}
 8001906:	bc70      	pop	{r4, r5, r6}
 8001908:	4770      	bx	lr
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800190a:	2601      	movs	r6, #1
 800190c:	e7ea      	b.n	80018e4 <TIM_TI1_SetConfig+0x4c>
 800190e:	2601      	movs	r6, #1
 8001910:	e7e8      	b.n	80018e4 <TIM_TI1_SetConfig+0x4c>
 8001912:	2601      	movs	r6, #1
 8001914:	e7e6      	b.n	80018e4 <TIM_TI1_SetConfig+0x4c>
 8001916:	2601      	movs	r6, #1
 8001918:	e7e4      	b.n	80018e4 <TIM_TI1_SetConfig+0x4c>
 800191a:	2601      	movs	r6, #1
 800191c:	e7e2      	b.n	80018e4 <TIM_TI1_SetConfig+0x4c>
 800191e:	2601      	movs	r6, #1
 8001920:	e7e0      	b.n	80018e4 <TIM_TI1_SetConfig+0x4c>
 8001922:	2601      	movs	r6, #1
 8001924:	e7de      	b.n	80018e4 <TIM_TI1_SetConfig+0x4c>
 8001926:	2601      	movs	r6, #1
 8001928:	e7dc      	b.n	80018e4 <TIM_TI1_SetConfig+0x4c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800192a:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800192e:	4322      	orrs	r2, r4
 8001930:	e7dd      	b.n	80018ee <TIM_TI1_SetConfig+0x56>
 8001932:	bf00      	nop
 8001934:	40010000 	.word	0x40010000

08001938 <HAL_TIM_IC_ConfigChannel>:
{
 8001938:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800193a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800193e:	2b01      	cmp	r3, #1
 8001940:	d058      	beq.n	80019f4 <HAL_TIM_IC_ConfigChannel+0xbc>
 8001942:	460d      	mov	r5, r1
 8001944:	4604      	mov	r4, r0
 8001946:	2301      	movs	r3, #1
 8001948:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800194c:	2302      	movs	r3, #2
 800194e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8001952:	b1da      	cbz	r2, 800198c <HAL_TIM_IC_ConfigChannel+0x54>
  else if (Channel == TIM_CHANNEL_2)
 8001954:	2a04      	cmp	r2, #4
 8001956:	d02a      	beq.n	80019ae <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_3)
 8001958:	2a08      	cmp	r2, #8
 800195a:	d03a      	beq.n	80019d2 <HAL_TIM_IC_ConfigChannel+0x9a>
    TIM_TI4_SetConfig(htim->Instance, 
 800195c:	68cb      	ldr	r3, [r1, #12]
 800195e:	684a      	ldr	r2, [r1, #4]
 8001960:	6809      	ldr	r1, [r1, #0]
 8001962:	6800      	ldr	r0, [r0, #0]
 8001964:	f7ff fe71 	bl	800164a <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001968:	6822      	ldr	r2, [r4, #0]
 800196a:	69d3      	ldr	r3, [r2, #28]
 800196c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001970:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001972:	6822      	ldr	r2, [r4, #0]
 8001974:	69d3      	ldr	r3, [r2, #28]
 8001976:	68a9      	ldr	r1, [r5, #8]
 8001978:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800197c:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 800197e:	2301      	movs	r3, #1
 8001980:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001984:	2000      	movs	r0, #0
 8001986:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK; 
 800198a:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800198c:	68cb      	ldr	r3, [r1, #12]
 800198e:	684a      	ldr	r2, [r1, #4]
 8001990:	6809      	ldr	r1, [r1, #0]
 8001992:	6800      	ldr	r0, [r0, #0]
 8001994:	f7ff ff80 	bl	8001898 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	6993      	ldr	r3, [r2, #24]
 800199c:	f023 030c 	bic.w	r3, r3, #12
 80019a0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80019a2:	6822      	ldr	r2, [r4, #0]
 80019a4:	6993      	ldr	r3, [r2, #24]
 80019a6:	68a9      	ldr	r1, [r5, #8]
 80019a8:	430b      	orrs	r3, r1
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	e7e7      	b.n	800197e <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI2_SetConfig(htim->Instance, 
 80019ae:	68cb      	ldr	r3, [r1, #12]
 80019b0:	684a      	ldr	r2, [r1, #4]
 80019b2:	6809      	ldr	r1, [r1, #0]
 80019b4:	6800      	ldr	r0, [r0, #0]
 80019b6:	f7ff fe15 	bl	80015e4 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	6993      	ldr	r3, [r2, #24]
 80019be:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019c2:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80019c4:	6822      	ldr	r2, [r4, #0]
 80019c6:	6993      	ldr	r3, [r2, #24]
 80019c8:	68a9      	ldr	r1, [r5, #8]
 80019ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	e7d5      	b.n	800197e <HAL_TIM_IC_ConfigChannel+0x46>
    TIM_TI3_SetConfig(htim->Instance,  
 80019d2:	68cb      	ldr	r3, [r1, #12]
 80019d4:	684a      	ldr	r2, [r1, #4]
 80019d6:	6809      	ldr	r1, [r1, #0]
 80019d8:	6800      	ldr	r0, [r0, #0]
 80019da:	f7ff fe1d 	bl	8001618 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80019de:	6822      	ldr	r2, [r4, #0]
 80019e0:	69d3      	ldr	r3, [r2, #28]
 80019e2:	f023 030c 	bic.w	r3, r3, #12
 80019e6:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80019e8:	6822      	ldr	r2, [r4, #0]
 80019ea:	69d3      	ldr	r3, [r2, #28]
 80019ec:	68a9      	ldr	r1, [r5, #8]
 80019ee:	430b      	orrs	r3, r1
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	e7c4      	b.n	800197e <HAL_TIM_IC_ConfigChannel+0x46>
  __HAL_LOCK(htim);
 80019f4:	2002      	movs	r0, #2
}
 80019f6:	bd38      	pop	{r3, r4, r5, pc}

080019f8 <TIM_OC2_SetConfig>:
{
 80019f8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019fa:	6a03      	ldr	r3, [r0, #32]
 80019fc:	f023 0310 	bic.w	r3, r3, #16
 8001a00:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001a02:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001a04:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001a06:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a08:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a0c:	680d      	ldr	r5, [r1, #0]
 8001a0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001a12:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a16:	688d      	ldr	r5, [r1, #8]
 8001a18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001a1c:	4d11      	ldr	r5, [pc, #68]	; (8001a64 <TIM_OC2_SetConfig+0x6c>)
 8001a1e:	42a8      	cmp	r0, r5
 8001a20:	d01d      	beq.n	8001a5e <TIM_OC2_SetConfig+0x66>
 8001a22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a26:	42a8      	cmp	r0, r5
 8001a28:	d017      	beq.n	8001a5a <TIM_OC2_SetConfig+0x62>
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	b175      	cbz	r5, 8001a4c <TIM_OC2_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a32:	68cd      	ldr	r5, [r1, #12]
 8001a34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a3c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a40:	694d      	ldr	r5, [r1, #20]
 8001a42:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a46:	698d      	ldr	r5, [r1, #24]
 8001a48:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001a4c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a4e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a50:	684a      	ldr	r2, [r1, #4]
 8001a52:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001a54:	6203      	str	r3, [r0, #32]
}
 8001a56:	bc30      	pop	{r4, r5}
 8001a58:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001a5a:	2501      	movs	r5, #1
 8001a5c:	e7e6      	b.n	8001a2c <TIM_OC2_SetConfig+0x34>
 8001a5e:	2501      	movs	r5, #1
 8001a60:	e7e4      	b.n	8001a2c <TIM_OC2_SetConfig+0x34>
 8001a62:	bf00      	nop
 8001a64:	40010000 	.word	0x40010000

08001a68 <HAL_TIM_PWM_ConfigChannel>:
{
 8001a68:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001a6a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d066      	beq.n	8001b40 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8001a72:	460d      	mov	r5, r1
 8001a74:	4604      	mov	r4, r0
 8001a76:	2301      	movs	r3, #1
 8001a78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 8001a82:	2a0c      	cmp	r2, #12
 8001a84:	d81a      	bhi.n	8001abc <HAL_TIM_PWM_ConfigChannel+0x54>
 8001a86:	e8df f002 	tbb	[pc, r2]
 8001a8a:	1907      	.short	0x1907
 8001a8c:	19201919 	.word	0x19201919
 8001a90:	19341919 	.word	0x19341919
 8001a94:	1919      	.short	0x1919
 8001a96:	47          	.byte	0x47
 8001a97:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a98:	6800      	ldr	r0, [r0, #0]
 8001a9a:	f7ff fd0d 	bl	80014b8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a9e:	6822      	ldr	r2, [r4, #0]
 8001aa0:	6993      	ldr	r3, [r2, #24]
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001aa8:	6822      	ldr	r2, [r4, #0]
 8001aaa:	6993      	ldr	r3, [r2, #24]
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ab2:	6822      	ldr	r2, [r4, #0]
 8001ab4:	6993      	ldr	r3, [r2, #24]
 8001ab6:	6929      	ldr	r1, [r5, #16]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001abc:	2301      	movs	r3, #1
 8001abe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8001ac8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001aca:	6800      	ldr	r0, [r0, #0]
 8001acc:	f7ff ff94 	bl	80019f8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ad0:	6822      	ldr	r2, [r4, #0]
 8001ad2:	6993      	ldr	r3, [r2, #24]
 8001ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ad8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ada:	6822      	ldr	r2, [r4, #0]
 8001adc:	6993      	ldr	r3, [r2, #24]
 8001ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ae2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ae4:	6822      	ldr	r2, [r4, #0]
 8001ae6:	6993      	ldr	r3, [r2, #24]
 8001ae8:	6929      	ldr	r1, [r5, #16]
 8001aea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001aee:	6193      	str	r3, [r2, #24]
    break;
 8001af0:	e7e4      	b.n	8001abc <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001af2:	6800      	ldr	r0, [r0, #0]
 8001af4:	f7ff fd12 	bl	800151c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	69d3      	ldr	r3, [r2, #28]
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b02:	6822      	ldr	r2, [r4, #0]
 8001b04:	69d3      	ldr	r3, [r2, #28]
 8001b06:	f023 0304 	bic.w	r3, r3, #4
 8001b0a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001b0c:	6822      	ldr	r2, [r4, #0]
 8001b0e:	69d3      	ldr	r3, [r2, #28]
 8001b10:	6929      	ldr	r1, [r5, #16]
 8001b12:	430b      	orrs	r3, r1
 8001b14:	61d3      	str	r3, [r2, #28]
    break;
 8001b16:	e7d1      	b.n	8001abc <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b18:	6800      	ldr	r0, [r0, #0]
 8001b1a:	f7ff fd35 	bl	8001588 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	69d3      	ldr	r3, [r2, #28]
 8001b22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b26:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	69d3      	ldr	r3, [r2, #28]
 8001b2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b30:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001b32:	6822      	ldr	r2, [r4, #0]
 8001b34:	69d3      	ldr	r3, [r2, #28]
 8001b36:	6929      	ldr	r1, [r5, #16]
 8001b38:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b3c:	61d3      	str	r3, [r2, #28]
    break;
 8001b3e:	e7bd      	b.n	8001abc <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8001b40:	2002      	movs	r0, #2
}
 8001b42:	bd38      	pop	{r3, r4, r5, pc}

08001b44 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001b44:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d022      	beq.n	8001b92 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 8001b4c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	2302      	movs	r3, #2
 8001b56:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001b5a:	6804      	ldr	r4, [r0, #0]
 8001b5c:	6863      	ldr	r3, [r4, #4]
 8001b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b62:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001b64:	6804      	ldr	r4, [r0, #0]
 8001b66:	6863      	ldr	r3, [r4, #4]
 8001b68:	680d      	ldr	r5, [r1, #0]
 8001b6a:	432b      	orrs	r3, r5
 8001b6c:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001b6e:	6804      	ldr	r4, [r0, #0]
 8001b70:	68a3      	ldr	r3, [r4, #8]
 8001b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b76:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001b78:	6804      	ldr	r4, [r0, #0]
 8001b7a:	68a3      	ldr	r3, [r4, #8]
 8001b7c:	6849      	ldr	r1, [r1, #4]
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	60a3      	str	r3, [r4, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001b82:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001b86:	2300      	movs	r3, #0
 8001b88:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8001b8c:	4618      	mov	r0, r3
} 
 8001b8e:	bc30      	pop	{r4, r5}
 8001b90:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001b92:	2002      	movs	r0, #2
 8001b94:	4770      	bx	lr

08001b96 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001b96:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d025      	beq.n	8001bea <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001ba4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001baa:	688a      	ldr	r2, [r1, #8]
 8001bac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001bae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bb2:	684a      	ldr	r2, [r1, #4]
 8001bb4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001bb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bba:	680a      	ldr	r2, [r1, #0]
 8001bbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bc2:	690a      	ldr	r2, [r1, #16]
 8001bc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bca:	694a      	ldr	r2, [r1, #20]
 8001bcc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bd2:	698a      	ldr	r2, [r1, #24]
 8001bd4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001bd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001bda:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001bdc:	6802      	ldr	r2, [r0, #0]
 8001bde:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8001be0:	2300      	movs	r3, #0
 8001be2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001be6:	4618      	mov	r0, r3
 8001be8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001bea:	2002      	movs	r0, #2
}
 8001bec:	4770      	bx	lr

08001bee <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001bee:	6802      	ldr	r2, [r0, #0]
 8001bf0:	68d3      	ldr	r3, [r2, #12]
 8001bf2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001bf6:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8001bfe:	4770      	bx	lr

08001c00 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c00:	6802      	ldr	r2, [r0, #0]
 8001c02:	68d3      	ldr	r3, [r2, #12]
 8001c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001c08:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c0a:	6802      	ldr	r2, [r0, #0]
 8001c0c:	6953      	ldr	r3, [r2, #20]
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c14:	2320      	movs	r3, #32
 8001c16:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001c1a:	4770      	bx	lr

08001c1c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c1c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b21      	cmp	r3, #33	; 0x21
 8001c24:	d001      	beq.n	8001c2a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001c26:	2002      	movs	r0, #2
 8001c28:	4770      	bx	lr
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c2a:	6883      	ldr	r3, [r0, #8]
 8001c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c30:	d017      	beq.n	8001c62 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001c32:	6802      	ldr	r2, [r0, #0]
 8001c34:	6a03      	ldr	r3, [r0, #32]
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	6201      	str	r1, [r0, #32]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	6053      	str	r3, [r2, #4]
    if(--huart->TxXferCount == 0U)
 8001c3e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001c48:	b9db      	cbnz	r3, 8001c82 <UART_Transmit_IT+0x66>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001c4a:	6802      	ldr	r2, [r0, #0]
 8001c4c:	68d3      	ldr	r3, [r2, #12]
 8001c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c52:	60d3      	str	r3, [r2, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001c54:	6802      	ldr	r2, [r0, #0]
 8001c56:	68d3      	ldr	r3, [r2, #12]
 8001c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001c5e:	2000      	movs	r0, #0
 8001c60:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001c62:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c64:	6802      	ldr	r2, [r0, #0]
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c6c:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001c6e:	6903      	ldr	r3, [r0, #16]
 8001c70:	b91b      	cbnz	r3, 8001c7a <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8001c72:	6a03      	ldr	r3, [r0, #32]
 8001c74:	3302      	adds	r3, #2
 8001c76:	6203      	str	r3, [r0, #32]
 8001c78:	e7e1      	b.n	8001c3e <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8001c7a:	6a03      	ldr	r3, [r0, #32]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	6203      	str	r3, [r0, #32]
 8001c80:	e7dd      	b.n	8001c3e <UART_Transmit_IT+0x22>
    return HAL_OK;
 8001c82:	2000      	movs	r0, #0
  }
}
 8001c84:	4770      	bx	lr
	...

08001c88 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c8c:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001c8e:	6802      	ldr	r2, [r0, #0]
 8001c90:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001c92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001c96:	68c1      	ldr	r1, [r0, #12]
 8001c98:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001c9a:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001c9c:	6801      	ldr	r1, [r0, #0]
 8001c9e:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001ca0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001ca4:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ca8:	6882      	ldr	r2, [r0, #8]
 8001caa:	6900      	ldr	r0, [r0, #16]
 8001cac:	4302      	orrs	r2, r0
 8001cae:	6960      	ldr	r0, [r4, #20]
 8001cb0:	4302      	orrs	r2, r0
 8001cb2:	69e0      	ldr	r0, [r4, #28]
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001cb8:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001cba:	6822      	ldr	r2, [r4, #0]
 8001cbc:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001cc2:	69a1      	ldr	r1, [r4, #24]
 8001cc4:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001cc6:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc8:	69e3      	ldr	r3, [r4, #28]
 8001cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cce:	d062      	beq.n	8001d96 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cd0:	f8d4 8000 	ldr.w	r8, [r4]
 8001cd4:	4bbb      	ldr	r3, [pc, #748]	; (8001fc4 <UART_SetConfig+0x33c>)
 8001cd6:	4598      	cmp	r8, r3
 8001cd8:	f000 811b 	beq.w	8001f12 <UART_SetConfig+0x28a>
 8001cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce0:	4598      	cmp	r8, r3
 8001ce2:	f000 8116 	beq.w	8001f12 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001ce6:	f7ff f925 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 8001cea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cf2:	6865      	ldr	r5, [r4, #4]
 8001cf4:	00ad      	lsls	r5, r5, #2
 8001cf6:	fbb0 f5f5 	udiv	r5, r0, r5
 8001cfa:	4fb3      	ldr	r7, [pc, #716]	; (8001fc8 <UART_SetConfig+0x340>)
 8001cfc:	fba7 3505 	umull	r3, r5, r7, r5
 8001d00:	096d      	lsrs	r5, r5, #5
 8001d02:	012e      	lsls	r6, r5, #4
 8001d04:	f7ff f916 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 8001d08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d10:	6865      	ldr	r5, [r4, #4]
 8001d12:	00ad      	lsls	r5, r5, #2
 8001d14:	fbb0 faf5 	udiv	sl, r0, r5
 8001d18:	f7ff f90c 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 8001d1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d24:	6865      	ldr	r5, [r4, #4]
 8001d26:	00ad      	lsls	r5, r5, #2
 8001d28:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d2c:	fba7 3505 	umull	r3, r5, r7, r5
 8001d30:	096d      	lsrs	r5, r5, #5
 8001d32:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d36:	fb09 a515 	mls	r5, r9, r5, sl
 8001d3a:	012d      	lsls	r5, r5, #4
 8001d3c:	3532      	adds	r5, #50	; 0x32
 8001d3e:	fba7 3505 	umull	r3, r5, r7, r5
 8001d42:	096d      	lsrs	r5, r5, #5
 8001d44:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001d48:	4435      	add	r5, r6
 8001d4a:	f7ff f8f3 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 8001d4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d56:	6866      	ldr	r6, [r4, #4]
 8001d58:	00b6      	lsls	r6, r6, #2
 8001d5a:	fbb0 f6f6 	udiv	r6, r0, r6
 8001d5e:	f7ff f8e9 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 8001d62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d6a:	6863      	ldr	r3, [r4, #4]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d72:	fba7 3000 	umull	r3, r0, r7, r0
 8001d76:	0940      	lsrs	r0, r0, #5
 8001d78:	fb09 6910 	mls	r9, r9, r0, r6
 8001d7c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001d80:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001d84:	fba7 3709 	umull	r3, r7, r7, r9
 8001d88:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001d8c:	442f      	add	r7, r5
 8001d8e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d96:	f8d4 8000 	ldr.w	r8, [r4]
 8001d9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d9e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8001da2:	4598      	cmp	r8, r3
 8001da4:	d05c      	beq.n	8001e60 <UART_SetConfig+0x1d8>
 8001da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001daa:	4598      	cmp	r8, r3
 8001dac:	d058      	beq.n	8001e60 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001dae:	f7ff f8c1 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 8001db2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001db6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dba:	6865      	ldr	r5, [r4, #4]
 8001dbc:	006d      	lsls	r5, r5, #1
 8001dbe:	fbb0 f5f5 	udiv	r5, r0, r5
 8001dc2:	4f81      	ldr	r7, [pc, #516]	; (8001fc8 <UART_SetConfig+0x340>)
 8001dc4:	fba7 3505 	umull	r3, r5, r7, r5
 8001dc8:	096d      	lsrs	r5, r5, #5
 8001dca:	012e      	lsls	r6, r5, #4
 8001dcc:	f7ff f8b2 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 8001dd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dd8:	6865      	ldr	r5, [r4, #4]
 8001dda:	006d      	lsls	r5, r5, #1
 8001ddc:	fbb0 faf5 	udiv	sl, r0, r5
 8001de0:	f7ff f8a8 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 8001de4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001de8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dec:	6865      	ldr	r5, [r4, #4]
 8001dee:	006d      	lsls	r5, r5, #1
 8001df0:	fbb0 f5f5 	udiv	r5, r0, r5
 8001df4:	fba7 3505 	umull	r3, r5, r7, r5
 8001df8:	096d      	lsrs	r5, r5, #5
 8001dfa:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001dfe:	fb09 a515 	mls	r5, r9, r5, sl
 8001e02:	00ed      	lsls	r5, r5, #3
 8001e04:	3532      	adds	r5, #50	; 0x32
 8001e06:	fba7 3505 	umull	r3, r5, r7, r5
 8001e0a:	096d      	lsrs	r5, r5, #5
 8001e0c:	006d      	lsls	r5, r5, #1
 8001e0e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001e12:	4435      	add	r5, r6
 8001e14:	f7ff f88e 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 8001e18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e20:	6866      	ldr	r6, [r4, #4]
 8001e22:	0076      	lsls	r6, r6, #1
 8001e24:	fbb0 f6f6 	udiv	r6, r0, r6
 8001e28:	f7ff f884 	bl	8000f34 <HAL_RCC_GetPCLK1Freq>
 8001e2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e34:	6863      	ldr	r3, [r4, #4]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3c:	fba7 2303 	umull	r2, r3, r7, r3
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	fb09 6913 	mls	r9, r9, r3, r6
 8001e46:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001e4a:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001e4e:	fba7 3709 	umull	r3, r7, r7, r9
 8001e52:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001e56:	442f      	add	r7, r5
 8001e58:	f8c8 7008 	str.w	r7, [r8, #8]
 8001e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e60:	f7ff f878 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 8001e64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e6c:	6865      	ldr	r5, [r4, #4]
 8001e6e:	006d      	lsls	r5, r5, #1
 8001e70:	fbb0 f5f5 	udiv	r5, r0, r5
 8001e74:	4f54      	ldr	r7, [pc, #336]	; (8001fc8 <UART_SetConfig+0x340>)
 8001e76:	fba7 3505 	umull	r3, r5, r7, r5
 8001e7a:	096d      	lsrs	r5, r5, #5
 8001e7c:	012e      	lsls	r6, r5, #4
 8001e7e:	f7ff f869 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 8001e82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e8a:	6865      	ldr	r5, [r4, #4]
 8001e8c:	006d      	lsls	r5, r5, #1
 8001e8e:	fbb0 faf5 	udiv	sl, r0, r5
 8001e92:	f7ff f85f 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 8001e96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e9e:	6865      	ldr	r5, [r4, #4]
 8001ea0:	006d      	lsls	r5, r5, #1
 8001ea2:	fbb0 f5f5 	udiv	r5, r0, r5
 8001ea6:	fba7 3505 	umull	r3, r5, r7, r5
 8001eaa:	096d      	lsrs	r5, r5, #5
 8001eac:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001eb0:	fb09 a515 	mls	r5, r9, r5, sl
 8001eb4:	00ed      	lsls	r5, r5, #3
 8001eb6:	3532      	adds	r5, #50	; 0x32
 8001eb8:	fba7 3505 	umull	r3, r5, r7, r5
 8001ebc:	096d      	lsrs	r5, r5, #5
 8001ebe:	006d      	lsls	r5, r5, #1
 8001ec0:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001ec4:	4435      	add	r5, r6
 8001ec6:	f7ff f845 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 8001eca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ece:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ed2:	6866      	ldr	r6, [r4, #4]
 8001ed4:	0076      	lsls	r6, r6, #1
 8001ed6:	fbb0 f6f6 	udiv	r6, r0, r6
 8001eda:	f7ff f83b 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 8001ede:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ee2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ee6:	6863      	ldr	r3, [r4, #4]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eee:	fba7 2303 	umull	r2, r3, r7, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	fb09 6913 	mls	r9, r9, r3, r6
 8001ef8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001efc:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001f00:	fba7 3709 	umull	r3, r7, r7, r9
 8001f04:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001f08:	442f      	add	r7, r5
 8001f0a:	f8c8 7008 	str.w	r7, [r8, #8]
 8001f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f12:	f7ff f81f 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 8001f16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f1e:	6865      	ldr	r5, [r4, #4]
 8001f20:	00ad      	lsls	r5, r5, #2
 8001f22:	fbb0 f5f5 	udiv	r5, r0, r5
 8001f26:	4f28      	ldr	r7, [pc, #160]	; (8001fc8 <UART_SetConfig+0x340>)
 8001f28:	fba7 3505 	umull	r3, r5, r7, r5
 8001f2c:	096d      	lsrs	r5, r5, #5
 8001f2e:	012e      	lsls	r6, r5, #4
 8001f30:	f7ff f810 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 8001f34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f3c:	6865      	ldr	r5, [r4, #4]
 8001f3e:	00ad      	lsls	r5, r5, #2
 8001f40:	fbb0 faf5 	udiv	sl, r0, r5
 8001f44:	f7ff f806 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 8001f48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f50:	6865      	ldr	r5, [r4, #4]
 8001f52:	00ad      	lsls	r5, r5, #2
 8001f54:	fbb0 f5f5 	udiv	r5, r0, r5
 8001f58:	fba7 3505 	umull	r3, r5, r7, r5
 8001f5c:	096d      	lsrs	r5, r5, #5
 8001f5e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f62:	fb09 a515 	mls	r5, r9, r5, sl
 8001f66:	012d      	lsls	r5, r5, #4
 8001f68:	3532      	adds	r5, #50	; 0x32
 8001f6a:	fba7 3505 	umull	r3, r5, r7, r5
 8001f6e:	096d      	lsrs	r5, r5, #5
 8001f70:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001f74:	4435      	add	r5, r6
 8001f76:	f7fe ffed 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 8001f7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f82:	6866      	ldr	r6, [r4, #4]
 8001f84:	00b6      	lsls	r6, r6, #2
 8001f86:	fbb0 f6f6 	udiv	r6, r0, r6
 8001f8a:	f7fe ffe3 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 8001f8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f96:	6863      	ldr	r3, [r4, #4]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9e:	fba7 2303 	umull	r2, r3, r7, r3
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	fb09 6913 	mls	r9, r9, r3, r6
 8001fa8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001fac:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001fb0:	fba7 3709 	umull	r3, r7, r7, r9
 8001fb4:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001fb8:	442f      	add	r7, r5
 8001fba:	f8c8 7008 	str.w	r7, [r8, #8]
 8001fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	51eb851f 	.word	0x51eb851f

08001fcc <UART_WaitOnFlagUntilTimeout>:
{
 8001fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd0:	4605      	mov	r5, r0
 8001fd2:	460f      	mov	r7, r1
 8001fd4:	4616      	mov	r6, r2
 8001fd6:	4698      	mov	r8, r3
 8001fd8:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001fda:	682b      	ldr	r3, [r5, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	ea37 0303 	bics.w	r3, r7, r3
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	42b3      	cmp	r3, r6
 8001fea:	d11e      	bne.n	800202a <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8001fec:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001ff0:	d0f3      	beq.n	8001fda <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ff2:	b12c      	cbz	r4, 8002000 <UART_WaitOnFlagUntilTimeout+0x34>
 8001ff4:	f7fe fb38 	bl	8000668 <HAL_GetTick>
 8001ff8:	eba0 0008 	sub.w	r0, r0, r8
 8001ffc:	4284      	cmp	r4, r0
 8001ffe:	d2ec      	bcs.n	8001fda <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002000:	682a      	ldr	r2, [r5, #0]
 8002002:	68d3      	ldr	r3, [r2, #12]
 8002004:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002008:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200a:	682a      	ldr	r2, [r5, #0]
 800200c:	6953      	ldr	r3, [r2, #20]
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002014:	2320      	movs	r3, #32
 8002016:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800201a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800201e:	2300      	movs	r3, #0
 8002020:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8002024:	2003      	movs	r0, #3
 8002026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 800202a:	2000      	movs	r0, #0
}
 800202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002030 <HAL_UART_Init>:
  if(huart == NULL)
 8002030:	b358      	cbz	r0, 800208a <HAL_UART_Init+0x5a>
{
 8002032:	b510      	push	{r4, lr}
 8002034:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8002036:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800203a:	b30b      	cbz	r3, 8002080 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800203c:	2324      	movs	r3, #36	; 0x24
 800203e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002042:	6822      	ldr	r2, [r4, #0]
 8002044:	68d3      	ldr	r3, [r2, #12]
 8002046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800204a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800204c:	4620      	mov	r0, r4
 800204e:	f7ff fe1b 	bl	8001c88 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002052:	6822      	ldr	r2, [r4, #0]
 8002054:	6913      	ldr	r3, [r2, #16]
 8002056:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800205a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800205c:	6822      	ldr	r2, [r4, #0]
 800205e:	6953      	ldr	r3, [r2, #20]
 8002060:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002064:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	68d3      	ldr	r3, [r2, #12]
 800206a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800206e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002070:	2000      	movs	r0, #0
 8002072:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002074:	2320      	movs	r3, #32
 8002076:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800207a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800207e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002080:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002084:	f000 fd74 	bl	8002b70 <HAL_UART_MspInit>
 8002088:	e7d8      	b.n	800203c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800208a:	2001      	movs	r0, #1
 800208c:	4770      	bx	lr

0800208e <HAL_UART_Transmit>:
{
 800208e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002096:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b20      	cmp	r3, #32
 800209e:	d004      	beq.n	80020aa <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 80020a0:	2302      	movs	r3, #2
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	b002      	add	sp, #8
 80020a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020aa:	4604      	mov	r4, r0
 80020ac:	460d      	mov	r5, r1
 80020ae:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 80020b0:	2900      	cmp	r1, #0
 80020b2:	d055      	beq.n	8002160 <HAL_UART_Transmit+0xd2>
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d055      	beq.n	8002164 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 80020b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_UART_Transmit+0x36>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e7ee      	b.n	80020a2 <HAL_UART_Transmit+0x14>
 80020c4:	2301      	movs	r3, #1
 80020c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ce:	2321      	movs	r3, #33	; 0x21
 80020d0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80020d4:	f7fe fac8 	bl	8000668 <HAL_GetTick>
 80020d8:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80020da:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80020de:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80020e2:	e010      	b.n	8002106 <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020e4:	9600      	str	r6, [sp, #0]
 80020e6:	463b      	mov	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	4620      	mov	r0, r4
 80020ee:	f7ff ff6d 	bl	8001fcc <UART_WaitOnFlagUntilTimeout>
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d138      	bne.n	8002168 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	882b      	ldrh	r3, [r5, #0]
 80020fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fe:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002100:	6923      	ldr	r3, [r4, #16]
 8002102:	b9cb      	cbnz	r3, 8002138 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002104:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8002106:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002108:	b29b      	uxth	r3, r3
 800210a:	b1bb      	cbz	r3, 800213c <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 800210c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29b      	uxth	r3, r3
 8002114:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002116:	68a3      	ldr	r3, [r4, #8]
 8002118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800211c:	d0e2      	beq.n	80020e4 <HAL_UART_Transmit+0x56>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800211e:	9600      	str	r6, [sp, #0]
 8002120:	463b      	mov	r3, r7
 8002122:	2200      	movs	r2, #0
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	4620      	mov	r0, r4
 8002128:	f7ff ff50 	bl	8001fcc <UART_WaitOnFlagUntilTimeout>
 800212c:	b9f0      	cbnz	r0, 800216c <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	782a      	ldrb	r2, [r5, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	3501      	adds	r5, #1
 8002136:	e7e6      	b.n	8002106 <HAL_UART_Transmit+0x78>
          pData +=1U;
 8002138:	3501      	adds	r5, #1
 800213a:	e7e4      	b.n	8002106 <HAL_UART_Transmit+0x78>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800213c:	9600      	str	r6, [sp, #0]
 800213e:	463b      	mov	r3, r7
 8002140:	2200      	movs	r2, #0
 8002142:	2140      	movs	r1, #64	; 0x40
 8002144:	4620      	mov	r0, r4
 8002146:	f7ff ff41 	bl	8001fcc <UART_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	b108      	cbz	r0, 8002152 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e7a7      	b.n	80020a2 <HAL_UART_Transmit+0x14>
      huart->gState = HAL_UART_STATE_READY;
 8002152:	2220      	movs	r2, #32
 8002154:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002158:	2200      	movs	r2, #0
 800215a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 800215e:	e7a0      	b.n	80020a2 <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e79e      	b.n	80020a2 <HAL_UART_Transmit+0x14>
 8002164:	2301      	movs	r3, #1
 8002166:	e79c      	b.n	80020a2 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e79a      	b.n	80020a2 <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e798      	b.n	80020a2 <HAL_UART_Transmit+0x14>

08002170 <HAL_UART_Receive>:
{ 
 8002170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY) 
 8002178:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b20      	cmp	r3, #32
 8002180:	d003      	beq.n	800218a <HAL_UART_Receive+0x1a>
    return HAL_BUSY;   
 8002182:	2002      	movs	r0, #2
}
 8002184:	b002      	add	sp, #8
 8002186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800218a:	4604      	mov	r4, r0
 800218c:	460d      	mov	r5, r1
 800218e:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8002190:	2900      	cmp	r1, #0
 8002192:	d058      	beq.n	8002246 <HAL_UART_Receive+0xd6>
 8002194:	2a00      	cmp	r2, #0
 8002196:	d058      	beq.n	800224a <HAL_UART_Receive+0xda>
    __HAL_LOCK(huart);
 8002198:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_UART_Receive+0x34>
 80021a0:	2002      	movs	r0, #2
 80021a2:	e7ef      	b.n	8002184 <HAL_UART_Receive+0x14>
 80021a4:	2301      	movs	r3, #1
 80021a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021ae:	2322      	movs	r3, #34	; 0x22
 80021b0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80021b4:	f7fe fa58 	bl	8000668 <HAL_GetTick>
 80021b8:	4607      	mov	r7, r0
    huart->RxXferSize = Size; 
 80021ba:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021be:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 80021c2:	e01d      	b.n	8002200 <HAL_UART_Receive+0x90>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021c4:	9600      	str	r6, [sp, #0]
 80021c6:	463b      	mov	r3, r7
 80021c8:	2200      	movs	r2, #0
 80021ca:	2120      	movs	r1, #32
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff fefd 	bl	8001fcc <UART_WaitOnFlagUntilTimeout>
 80021d2:	2800      	cmp	r0, #0
 80021d4:	d13b      	bne.n	800224e <HAL_UART_Receive+0xde>
        if(huart->Init.Parity == UART_PARITY_NONE)
 80021d6:	6923      	ldr	r3, [r4, #16]
 80021d8:	b933      	cbnz	r3, 80021e8 <HAL_UART_Receive+0x78>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e2:	f825 3b02 	strh.w	r3, [r5], #2
 80021e6:	e00b      	b.n	8002200 <HAL_UART_Receive+0x90>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80021e8:	6823      	ldr	r3, [r4, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f825 3b01 	strh.w	r3, [r5], #1
 80021f2:	e005      	b.n	8002200 <HAL_UART_Receive+0x90>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021fc:	702b      	strb	r3, [r5, #0]
 80021fe:	3501      	adds	r5, #1
    while(huart->RxXferCount > 0U)
 8002200:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002202:	b29b      	uxth	r3, r3
 8002204:	b1c3      	cbz	r3, 8002238 <HAL_UART_Receive+0xc8>
      huart->RxXferCount--;
 8002206:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29b      	uxth	r3, r3
 800220e:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002210:	68a3      	ldr	r3, [r4, #8]
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002216:	d0d5      	beq.n	80021c4 <HAL_UART_Receive+0x54>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002218:	9600      	str	r6, [sp, #0]
 800221a:	463b      	mov	r3, r7
 800221c:	2200      	movs	r2, #0
 800221e:	2120      	movs	r1, #32
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff fed3 	bl	8001fcc <UART_WaitOnFlagUntilTimeout>
 8002226:	b9a0      	cbnz	r0, 8002252 <HAL_UART_Receive+0xe2>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002228:	6923      	ldr	r3, [r4, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e2      	bne.n	80021f4 <HAL_UART_Receive+0x84>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	702b      	strb	r3, [r5, #0]
 8002234:	3501      	adds	r5, #1
 8002236:	e7e3      	b.n	8002200 <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 8002238:	2320      	movs	r3, #32
 800223a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800223e:	2000      	movs	r0, #0
 8002240:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002244:	e79e      	b.n	8002184 <HAL_UART_Receive+0x14>
      return  HAL_ERROR;
 8002246:	2001      	movs	r0, #1
 8002248:	e79c      	b.n	8002184 <HAL_UART_Receive+0x14>
 800224a:	2001      	movs	r0, #1
 800224c:	e79a      	b.n	8002184 <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 800224e:	2003      	movs	r0, #3
 8002250:	e798      	b.n	8002184 <HAL_UART_Receive+0x14>
          return HAL_TIMEOUT;
 8002252:	2003      	movs	r0, #3
 8002254:	e796      	b.n	8002184 <HAL_UART_Receive+0x14>
	...

08002258 <HAL_UART_Transmit_DMA>:
{
 8002258:	b538      	push	{r3, r4, r5, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800225a:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 800225e:	b2e4      	uxtb	r4, r4
 8002260:	2c20      	cmp	r4, #32
 8002262:	d001      	beq.n	8002268 <HAL_UART_Transmit_DMA+0x10>
    return HAL_BUSY;
 8002264:	2002      	movs	r0, #2
 8002266:	bd38      	pop	{r3, r4, r5, pc}
    if((pData == NULL ) || (Size == 0))
 8002268:	2900      	cmp	r1, #0
 800226a:	d031      	beq.n	80022d0 <HAL_UART_Transmit_DMA+0x78>
 800226c:	2a00      	cmp	r2, #0
 800226e:	d031      	beq.n	80022d4 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8002270:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_UART_Transmit_DMA+0x24>
 8002278:	2002      	movs	r0, #2
}
 800227a:	bd38      	pop	{r3, r4, r5, pc}
 800227c:	4613      	mov	r3, r2
 800227e:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8002280:	2201      	movs	r2, #1
 8002282:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 8002286:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8002288:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800228a:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228c:	2500      	movs	r5, #0
 800228e:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002290:	2221      	movs	r2, #33	; 0x21
 8002292:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002296:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002298:	480f      	ldr	r0, [pc, #60]	; (80022d8 <HAL_UART_Transmit_DMA+0x80>)
 800229a:	63d0      	str	r0, [r2, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800229c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800229e:	480f      	ldr	r0, [pc, #60]	; (80022dc <HAL_UART_Transmit_DMA+0x84>)
 80022a0:	6410      	str	r0, [r2, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80022a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022a4:	480e      	ldr	r0, [pc, #56]	; (80022e0 <HAL_UART_Transmit_DMA+0x88>)
 80022a6:	64d0      	str	r0, [r2, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 80022a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022aa:	6515      	str	r5, [r2, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80022ac:	6822      	ldr	r2, [r4, #0]
 80022ae:	3204      	adds	r2, #4
 80022b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80022b2:	f7fe fb29 	bl	8000908 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022bc:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 80022be:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80022c2:	6822      	ldr	r2, [r4, #0]
 80022c4:	6953      	ldr	r3, [r2, #20]
 80022c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ca:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80022cc:	4628      	mov	r0, r5
 80022ce:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80022d0:	2001      	movs	r0, #1
 80022d2:	bd38      	pop	{r3, r4, r5, pc}
 80022d4:	2001      	movs	r0, #1
 80022d6:	bd38      	pop	{r3, r4, r5, pc}
 80022d8:	0800238d 	.word	0x0800238d
 80022dc:	080023d9 	.word	0x080023d9
 80022e0:	080024c1 	.word	0x080024c1

080022e4 <HAL_UART_Receive_DMA>:
{  
 80022e4:	b530      	push	{r4, r5, lr}
 80022e6:	b083      	sub	sp, #12
  if(huart->RxState == HAL_UART_STATE_READY) 
 80022e8:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80022ec:	b2e4      	uxtb	r4, r4
 80022ee:	2c20      	cmp	r4, #32
 80022f0:	d002      	beq.n	80022f8 <HAL_UART_Receive_DMA+0x14>
    return HAL_BUSY; 
 80022f2:	2002      	movs	r0, #2
}
 80022f4:	b003      	add	sp, #12
 80022f6:	bd30      	pop	{r4, r5, pc}
    if((pData == NULL ) || (Size == 0)) 
 80022f8:	2900      	cmp	r1, #0
 80022fa:	d03d      	beq.n	8002378 <HAL_UART_Receive_DMA+0x94>
 80022fc:	2a00      	cmp	r2, #0
 80022fe:	d03d      	beq.n	800237c <HAL_UART_Receive_DMA+0x98>
    __HAL_LOCK(huart);
 8002300:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_UART_Receive_DMA+0x28>
 8002308:	2002      	movs	r0, #2
 800230a:	e7f3      	b.n	80022f4 <HAL_UART_Receive_DMA+0x10>
 800230c:	4613      	mov	r3, r2
 800230e:	460a      	mov	r2, r1
 8002310:	4604      	mov	r4, r0
 8002312:	2101      	movs	r1, #1
 8002314:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8002318:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800231a:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231c:	2500      	movs	r5, #0
 800231e:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002320:	2122      	movs	r1, #34	; 0x22
 8002322:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002326:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002328:	4815      	ldr	r0, [pc, #84]	; (8002380 <HAL_UART_Receive_DMA+0x9c>)
 800232a:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800232c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800232e:	4815      	ldr	r0, [pc, #84]	; (8002384 <HAL_UART_Receive_DMA+0xa0>)
 8002330:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002334:	4814      	ldr	r0, [pc, #80]	; (8002388 <HAL_UART_Receive_DMA+0xa4>)
 8002336:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8002338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800233a:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800233c:	6821      	ldr	r1, [r4, #0]
 800233e:	3104      	adds	r1, #4
 8002340:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002342:	f7fe fae1 	bl	8000908 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002346:	9501      	str	r5, [sp, #4]
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	9201      	str	r2, [sp, #4]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	9201      	str	r2, [sp, #4]
 8002352:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8002354:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235e:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002360:	6822      	ldr	r2, [r4, #0]
 8002362:	6953      	ldr	r3, [r2, #20]
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	6953      	ldr	r3, [r2, #20]
 800236e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002372:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8002374:	4628      	mov	r0, r5
 8002376:	e7bd      	b.n	80022f4 <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 8002378:	2001      	movs	r0, #1
 800237a:	e7bb      	b.n	80022f4 <HAL_UART_Receive_DMA+0x10>
 800237c:	2001      	movs	r0, #1
 800237e:	e7b9      	b.n	80022f4 <HAL_UART_Receive_DMA+0x10>
 8002380:	080023e3 	.word	0x080023e3
 8002384:	080024b7 	.word	0x080024b7
 8002388:	080024c1 	.word	0x080024c1

0800238c <UART_DMATransmitCplt>:
{
 800238c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800238e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002398:	d10c      	bne.n	80023b4 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0U;
 800239a:	2200      	movs	r2, #0
 800239c:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	694a      	ldr	r2, [r1, #20]
 80023a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a6:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68d3      	ldr	r3, [r2, #12]
 80023ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023b0:	60d3      	str	r3, [r2, #12]
 80023b2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80023b4:	4618      	mov	r0, r3
 80023b6:	f001 f887 	bl	80034c8 <HAL_UART_TxCpltCallback>
 80023ba:	bd08      	pop	{r3, pc}

080023bc <UART_EndTransmit_IT>:
{
 80023bc:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023be:	6801      	ldr	r1, [r0, #0]
 80023c0:	68cb      	ldr	r3, [r1, #12]
 80023c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023c6:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80023c8:	2320      	movs	r3, #32
 80023ca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80023ce:	f001 f87b 	bl	80034c8 <HAL_UART_TxCpltCallback>
}
 80023d2:	2000      	movs	r0, #0
 80023d4:	bd08      	pop	{r3, pc}

080023d6 <HAL_UART_TxHalfCpltCallback>:
{
 80023d6:	4770      	bx	lr

080023d8 <UART_DMATxHalfCplt>:
{
 80023d8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80023da:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80023dc:	f7ff fffb 	bl	80023d6 <HAL_UART_TxHalfCpltCallback>
 80023e0:	bd08      	pop	{r3, pc}

080023e2 <UART_DMAReceiveCplt>:
{
 80023e2:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80023e6:	6802      	ldr	r2, [r0, #0]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80023ee:	d113      	bne.n	8002418 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 80023f0:	2200      	movs	r2, #0
 80023f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023f4:	6819      	ldr	r1, [r3, #0]
 80023f6:	68ca      	ldr	r2, [r1, #12]
 80023f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023fc:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fe:	6819      	ldr	r1, [r3, #0]
 8002400:	694a      	ldr	r2, [r1, #20]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	694a      	ldr	r2, [r1, #20]
 800240c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002410:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002418:	4618      	mov	r0, r3
 800241a:	f001 f971 	bl	8003700 <HAL_UART_RxCpltCallback>
 800241e:	bd08      	pop	{r3, pc}

08002420 <UART_Receive_IT>:
{
 8002420:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002422:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b22      	cmp	r3, #34	; 0x22
 800242a:	d001      	beq.n	8002430 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 800242c:	2002      	movs	r0, #2
 800242e:	bd08      	pop	{r3, pc}
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002430:	6883      	ldr	r3, [r0, #8]
 8002432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002436:	d00f      	beq.n	8002458 <UART_Receive_IT+0x38>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002438:	6903      	ldr	r3, [r0, #16]
 800243a:	bb0b      	cbnz	r3, 8002480 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800243c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	6282      	str	r2, [r0, #40]	; 0x28
 8002442:	6802      	ldr	r2, [r0, #0]
 8002444:	6852      	ldr	r2, [r2, #4]
 8002446:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8002448:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29b      	uxth	r3, r3
 8002450:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002452:	b1f3      	cbz	r3, 8002492 <UART_Receive_IT+0x72>
    return HAL_OK;
 8002454:	2000      	movs	r0, #0
}
 8002456:	bd08      	pop	{r3, pc}
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002458:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 800245a:	6903      	ldr	r3, [r0, #16]
 800245c:	b943      	cbnz	r3, 8002470 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800245e:	6803      	ldr	r3, [r0, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002466:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002468:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800246a:	3302      	adds	r3, #2
 800246c:	6283      	str	r3, [r0, #40]	; 0x28
 800246e:	e7eb      	b.n	8002448 <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002470:	6803      	ldr	r3, [r0, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002478:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800247a:	3301      	adds	r3, #1
 800247c:	6283      	str	r3, [r0, #40]	; 0x28
 800247e:	e7e3      	b.n	8002448 <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002480:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002482:	1c53      	adds	r3, r2, #1
 8002484:	6283      	str	r3, [r0, #40]	; 0x28
 8002486:	6803      	ldr	r3, [r0, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800248e:	7013      	strb	r3, [r2, #0]
 8002490:	e7da      	b.n	8002448 <UART_Receive_IT+0x28>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002492:	6802      	ldr	r2, [r0, #0]
 8002494:	68d3      	ldr	r3, [r2, #12]
 8002496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800249a:	60d3      	str	r3, [r2, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249c:	6802      	ldr	r2, [r0, #0]
 800249e:	6953      	ldr	r3, [r2, #20]
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80024a6:	2320      	movs	r3, #32
 80024a8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80024ac:	f001 f928 	bl	8003700 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80024b0:	2000      	movs	r0, #0
 80024b2:	bd08      	pop	{r3, pc}

080024b4 <HAL_UART_RxHalfCpltCallback>:
{
 80024b4:	4770      	bx	lr

080024b6 <UART_DMARxHalfCplt>:
{
 80024b6:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 80024b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80024ba:	f7ff fffb 	bl	80024b4 <HAL_UART_RxHalfCpltCallback>
 80024be:	bd08      	pop	{r3, pc}

080024c0 <UART_DMAError>:
{
 80024c0:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024c2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80024c8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b21      	cmp	r3, #33	; 0x21
 80024d0:	d010      	beq.n	80024f4 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80024da:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b22      	cmp	r3, #34	; 0x22
 80024e2:	d011      	beq.n	8002508 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80024e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024e6:	f043 0310 	orr.w	r3, r3, #16
 80024ea:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80024ec:	4620      	mov	r0, r4
 80024ee:	f001 f9c1 	bl	8003874 <HAL_UART_ErrorCallback>
 80024f2:	bd10      	pop	{r4, pc}
 80024f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d0ea      	beq.n	80024d2 <UART_DMAError+0x12>
    huart->TxXferCount = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff fb74 	bl	8001bee <UART_EndTxTransfer>
 8002506:	e7e4      	b.n	80024d2 <UART_DMAError+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002508:	2a00      	cmp	r2, #0
 800250a:	d0eb      	beq.n	80024e4 <UART_DMAError+0x24>
    huart->RxXferCount = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002510:	4620      	mov	r0, r4
 8002512:	f7ff fb75 	bl	8001c00 <UART_EndRxTransfer>
 8002516:	e7e5      	b.n	80024e4 <UART_DMAError+0x24>

08002518 <HAL_UART_IRQHandler>:
{
 8002518:	b510      	push	{r4, lr}
 800251a:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800251c:	6802      	ldr	r2, [r0, #0]
 800251e:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002520:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002522:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8002524:	f013 000f 	ands.w	r0, r3, #15
 8002528:	d105      	bne.n	8002536 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800252a:	f013 0f20 	tst.w	r3, #32
 800252e:	d002      	beq.n	8002536 <HAL_UART_IRQHandler+0x1e>
 8002530:	f011 0f20 	tst.w	r1, #32
 8002534:	d153      	bne.n	80025de <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002536:	2800      	cmp	r0, #0
 8002538:	d067      	beq.n	800260a <HAL_UART_IRQHandler+0xf2>
 800253a:	f012 0201 	ands.w	r2, r2, #1
 800253e:	d102      	bne.n	8002546 <HAL_UART_IRQHandler+0x2e>
 8002540:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002544:	d061      	beq.n	800260a <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002546:	f013 0f01 	tst.w	r3, #1
 800254a:	d006      	beq.n	800255a <HAL_UART_IRQHandler+0x42>
 800254c:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002550:	d003      	beq.n	800255a <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002552:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002554:	f040 0001 	orr.w	r0, r0, #1
 8002558:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800255a:	f013 0f04 	tst.w	r3, #4
 800255e:	d004      	beq.n	800256a <HAL_UART_IRQHandler+0x52>
 8002560:	b11a      	cbz	r2, 800256a <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002562:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002564:	f040 0002 	orr.w	r0, r0, #2
 8002568:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800256a:	f013 0f02 	tst.w	r3, #2
 800256e:	d004      	beq.n	800257a <HAL_UART_IRQHandler+0x62>
 8002570:	b11a      	cbz	r2, 800257a <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002572:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002574:	f040 0004 	orr.w	r0, r0, #4
 8002578:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800257a:	f013 0f08 	tst.w	r3, #8
 800257e:	d004      	beq.n	800258a <HAL_UART_IRQHandler+0x72>
 8002580:	b11a      	cbz	r2, 800258a <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002582:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002584:	f042 0208 	orr.w	r2, r2, #8
 8002588:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800258a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800258c:	2a00      	cmp	r2, #0
 800258e:	d048      	beq.n	8002622 <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002590:	f013 0f20 	tst.w	r3, #32
 8002594:	d002      	beq.n	800259c <HAL_UART_IRQHandler+0x84>
 8002596:	f011 0f20 	tst.w	r1, #32
 800259a:	d124      	bne.n	80025e6 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80025a6:	f012 0f08 	tst.w	r2, #8
 80025aa:	d100      	bne.n	80025ae <HAL_UART_IRQHandler+0x96>
 80025ac:	b33b      	cbz	r3, 80025fe <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 80025ae:	4620      	mov	r0, r4
 80025b0:	f7ff fb26 	bl	8001c00 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80025bc:	d01b      	beq.n	80025f6 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c4:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80025c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025c8:	b18b      	cbz	r3, 80025ee <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025ca:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <HAL_UART_IRQHandler+0x11c>)
 80025cc:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80025d0:	f7fe f9d4 	bl	800097c <HAL_DMA_Abort_IT>
 80025d4:	b328      	cbz	r0, 8002622 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80025d8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80025da:	4798      	blx	r3
 80025dc:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 80025de:	4620      	mov	r0, r4
 80025e0:	f7ff ff1e 	bl	8002420 <UART_Receive_IT>
      return;
 80025e4:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7ff ff1a 	bl	8002420 <UART_Receive_IT>
 80025ec:	e7d6      	b.n	800259c <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 80025ee:	4620      	mov	r0, r4
 80025f0:	f001 f940 	bl	8003874 <HAL_UART_ErrorCallback>
 80025f4:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 80025f6:	4620      	mov	r0, r4
 80025f8:	f001 f93c 	bl	8003874 <HAL_UART_ErrorCallback>
 80025fc:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 80025fe:	4620      	mov	r0, r4
 8002600:	f001 f938 	bl	8003874 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002604:	2300      	movs	r3, #0
 8002606:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002608:	bd10      	pop	{r4, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800260a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800260e:	d002      	beq.n	8002616 <HAL_UART_IRQHandler+0xfe>
 8002610:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002614:	d106      	bne.n	8002624 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002616:	f013 0f40 	tst.w	r3, #64	; 0x40
 800261a:	d002      	beq.n	8002622 <HAL_UART_IRQHandler+0x10a>
 800261c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002620:	d104      	bne.n	800262c <HAL_UART_IRQHandler+0x114>
 8002622:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff faf9 	bl	8001c1c <UART_Transmit_IT>
    return;
 800262a:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 800262c:	4620      	mov	r0, r4
 800262e:	f7ff fec5 	bl	80023bc <UART_EndTransmit_IT>
    return;
 8002632:	e7f6      	b.n	8002622 <HAL_UART_IRQHandler+0x10a>
 8002634:	08002639 	.word	0x08002639

08002638 <UART_DMAAbortOnError>:
{
 8002638:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800263a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002640:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002642:	f001 f917 	bl	8003874 <HAL_UART_ErrorCallback>
 8002646:	bd08      	pop	{r3, pc}

08002648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002648:	b530      	push	{r4, r5, lr}
 800264a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	2400      	movs	r4, #0
 800264e:	9405      	str	r4, [sp, #20]
 8002650:	9406      	str	r4, [sp, #24]
 8002652:	9407      	str	r4, [sp, #28]
 8002654:	9408      	str	r4, [sp, #32]
 8002656:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002658:	9401      	str	r4, [sp, #4]
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <MX_GPIO_Init+0x9c>)
 800265c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800265e:	f042 0204 	orr.w	r2, r2, #4
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
 8002664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002666:	f002 0204 	and.w	r2, r2, #4
 800266a:	9201      	str	r2, [sp, #4]
 800266c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800266e:	9402      	str	r4, [sp, #8]
 8002670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002672:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
 8002678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800267e:	9202      	str	r2, [sp, #8]
 8002680:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	9403      	str	r4, [sp, #12]
 8002684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
 800268c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268e:	f002 0201 	and.w	r2, r2, #1
 8002692:	9203      	str	r2, [sp, #12]
 8002694:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002696:	9404      	str	r4, [sp, #16]
 8002698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800269a:	f042 0202 	orr.w	r2, r2, #2
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	9304      	str	r3, [sp, #16]
 80026a8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026aa:	4d0f      	ldr	r5, [pc, #60]	; (80026e8 <MX_GPIO_Init+0xa0>)
 80026ac:	4622      	mov	r2, r4
 80026ae:	2120      	movs	r1, #32
 80026b0:	4628      	mov	r0, r5
 80026b2:	f7fe fb47 	bl	8000d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ba:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <MX_GPIO_Init+0xa4>)
 80026be:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026c2:	a905      	add	r1, sp, #20
 80026c4:	480a      	ldr	r0, [pc, #40]	; (80026f0 <MX_GPIO_Init+0xa8>)
 80026c6:	f7fe fa5b 	bl	8000b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80026ca:	2320      	movs	r3, #32
 80026cc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ce:	2301      	movs	r3, #1
 80026d0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026d6:	a905      	add	r1, sp, #20
 80026d8:	4628      	mov	r0, r5
 80026da:	f7fe fa51 	bl	8000b80 <HAL_GPIO_Init>

}
 80026de:	b00b      	add	sp, #44	; 0x2c
 80026e0:	bd30      	pop	{r4, r5, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	10210000 	.word	0x10210000
 80026f0:	40020800 	.word	0x40020800

080026f4 <MX_DMA_Init>:
{
 80026f4:	b510      	push	{r4, lr}
 80026f6:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026f8:	2400      	movs	r4, #0
 80026fa:	9401      	str	r4, [sp, #4]
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <MX_DMA_Init+0x40>)
 80026fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002700:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002710:	4622      	mov	r2, r4
 8002712:	4621      	mov	r1, r4
 8002714:	2010      	movs	r0, #16
 8002716:	f7fd ffbf 	bl	8000698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800271a:	2010      	movs	r0, #16
 800271c:	f7fd ffee 	bl	80006fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002720:	4622      	mov	r2, r4
 8002722:	4621      	mov	r1, r4
 8002724:	2011      	movs	r0, #17
 8002726:	f7fd ffb7 	bl	8000698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800272a:	2011      	movs	r0, #17
 800272c:	f7fd ffe6 	bl	80006fc <HAL_NVIC_EnableIRQ>
}
 8002730:	b002      	add	sp, #8
 8002732:	bd10      	pop	{r4, pc}
 8002734:	40023800 	.word	0x40023800

08002738 <MX_USART2_UART_Init>:
{
 8002738:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800273a:	4808      	ldr	r0, [pc, #32]	; (800275c <MX_USART2_UART_Init+0x24>)
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <MX_USART2_UART_Init+0x28>)
 800273e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002740:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002744:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002746:	2300      	movs	r3, #0
 8002748:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800274a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800274c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800274e:	220c      	movs	r2, #12
 8002750:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002752:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002756:	f7ff fc6b 	bl	8002030 <HAL_UART_Init>
 800275a:	bd08      	pop	{r3, pc}
 800275c:	20000380 	.word	0x20000380
 8002760:	40004400 	.word	0x40004400

08002764 <MX_TIM1_Init>:
{
 8002764:	b530      	push	{r4, r5, lr}
 8002766:	b095      	sub	sp, #84	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002768:	2400      	movs	r4, #0
 800276a:	9412      	str	r4, [sp, #72]	; 0x48
 800276c:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800276e:	940b      	str	r4, [sp, #44]	; 0x2c
 8002770:	940c      	str	r4, [sp, #48]	; 0x30
 8002772:	940d      	str	r4, [sp, #52]	; 0x34
 8002774:	940e      	str	r4, [sp, #56]	; 0x38
 8002776:	940f      	str	r4, [sp, #60]	; 0x3c
 8002778:	9410      	str	r4, [sp, #64]	; 0x40
 800277a:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_IC_InitTypeDef sConfigIC = {0};
 800277c:	9407      	str	r4, [sp, #28]
 800277e:	9408      	str	r4, [sp, #32]
 8002780:	9409      	str	r4, [sp, #36]	; 0x24
 8002782:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002784:	9400      	str	r4, [sp, #0]
 8002786:	9401      	str	r4, [sp, #4]
 8002788:	9402      	str	r4, [sp, #8]
 800278a:	9403      	str	r4, [sp, #12]
 800278c:	9404      	str	r4, [sp, #16]
 800278e:	9405      	str	r4, [sp, #20]
 8002790:	9406      	str	r4, [sp, #24]
  htim1.Instance = TIM1;
 8002792:	4d23      	ldr	r5, [pc, #140]	; (8002820 <MX_TIM1_Init+0xbc>)
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <MX_TIM1_Init+0xc0>)
 8002796:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 8002798:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0;
 800279c:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279e:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80027a0:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027a2:	4628      	mov	r0, r5
 80027a4:	f7fe fffa 	bl	800179c <HAL_TIM_PWM_Init>
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80027a8:	4628      	mov	r0, r5
 80027aa:	f7ff f810 	bl	80017ce <HAL_TIM_IC_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ae:	9412      	str	r4, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b0:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027b2:	a912      	add	r1, sp, #72	; 0x48
 80027b4:	4628      	mov	r0, r5
 80027b6:	f7ff f9c5 	bl	8001b44 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ba:	2360      	movs	r3, #96	; 0x60
 80027bc:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80027be:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027c0:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027c2:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027c4:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027c6:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027c8:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027ca:	4622      	mov	r2, r4
 80027cc:	a90b      	add	r1, sp, #44	; 0x2c
 80027ce:	4628      	mov	r0, r5
 80027d0:	f7ff f94a 	bl	8001a68 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027d4:	2204      	movs	r2, #4
 80027d6:	a90b      	add	r1, sp, #44	; 0x2c
 80027d8:	4628      	mov	r0, r5
 80027da:	f7ff f945 	bl	8001a68 <HAL_TIM_PWM_ConfigChannel>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027de:	9407      	str	r4, [sp, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027e0:	2301      	movs	r3, #1
 80027e2:	9308      	str	r3, [sp, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027e4:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80027e6:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80027e8:	2208      	movs	r2, #8
 80027ea:	a907      	add	r1, sp, #28
 80027ec:	4628      	mov	r0, r5
 80027ee:	f7ff f8a3 	bl	8001938 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80027f2:	220c      	movs	r2, #12
 80027f4:	a907      	add	r1, sp, #28
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7ff f89e 	bl	8001938 <HAL_TIM_IC_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027fc:	9400      	str	r4, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027fe:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002800:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002802:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002804:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800280a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800280c:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800280e:	4669      	mov	r1, sp
 8002810:	4628      	mov	r0, r5
 8002812:	f7ff f9c0 	bl	8001b96 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8002816:	4628      	mov	r0, r5
 8002818:	f000 f97c 	bl	8002b14 <HAL_TIM_MspPostInit>
}
 800281c:	b015      	add	sp, #84	; 0x54
 800281e:	bd30      	pop	{r4, r5, pc}
 8002820:	20000308 	.word	0x20000308
 8002824:	40010000 	.word	0x40010000

08002828 <MX_TIM5_Init>:
{
 8002828:	b530      	push	{r4, r5, lr}
 800282a:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 800282c:	2224      	movs	r2, #36	; 0x24
 800282e:	2100      	movs	r1, #0
 8002830:	a803      	add	r0, sp, #12
 8002832:	f001 f879 	bl	8003928 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002836:	2400      	movs	r4, #0
 8002838:	9401      	str	r4, [sp, #4]
 800283a:	9402      	str	r4, [sp, #8]
  htim5.Instance = TIM5;
 800283c:	4d0b      	ldr	r5, [pc, #44]	; (800286c <MX_TIM5_Init+0x44>)
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <MX_TIM5_Init+0x48>)
 8002840:	602b      	str	r3, [r5, #0]
  htim5.Init.Prescaler = 0;
 8002842:	606c      	str	r4, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002844:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 0;
 8002846:	60ec      	str	r4, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002848:	612c      	str	r4, [r5, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800284a:	2301      	movs	r3, #1
 800284c:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800284e:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002850:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002852:	a903      	add	r1, sp, #12
 8002854:	4628      	mov	r0, r5
 8002856:	f7fe ffd3 	bl	8001800 <HAL_TIM_Encoder_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800285c:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800285e:	a901      	add	r1, sp, #4
 8002860:	4628      	mov	r0, r5
 8002862:	f7ff f96f 	bl	8001b44 <HAL_TIMEx_MasterConfigSynchronization>
}
 8002866:	b00d      	add	sp, #52	; 0x34
 8002868:	bd30      	pop	{r4, r5, pc}
 800286a:	bf00      	nop
 800286c:	2000026c 	.word	0x2000026c
 8002870:	40000c00 	.word	0x40000c00

08002874 <MX_TIM2_Init>:
{
 8002874:	b530      	push	{r4, r5, lr}
 8002876:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	2100      	movs	r1, #0
 800287c:	a803      	add	r0, sp, #12
 800287e:	f001 f853 	bl	8003928 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002882:	2400      	movs	r4, #0
 8002884:	9401      	str	r4, [sp, #4]
 8002886:	9402      	str	r4, [sp, #8]
  htim2.Instance = TIM2;
 8002888:	4d0b      	ldr	r5, [pc, #44]	; (80028b8 <MX_TIM2_Init+0x44>)
 800288a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800288e:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 0;
 8002890:	606c      	str	r4, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002892:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 8002894:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002896:	612c      	str	r4, [r5, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002898:	2301      	movs	r3, #1
 800289a:	9303      	str	r3, [sp, #12]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800289c:	9305      	str	r3, [sp, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800289e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80028a0:	a903      	add	r1, sp, #12
 80028a2:	4628      	mov	r0, r5
 80028a4:	f7fe ffac 	bl	8001800 <HAL_TIM_Encoder_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a8:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028aa:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028ac:	a901      	add	r1, sp, #4
 80028ae:	4628      	mov	r0, r5
 80028b0:	f7ff f948 	bl	8001b44 <HAL_TIMEx_MasterConfigSynchronization>
}
 80028b4:	b00d      	add	sp, #52	; 0x34
 80028b6:	bd30      	pop	{r4, r5, pc}
 80028b8:	20000344 	.word	0x20000344

080028bc <SystemClock_Config>:
{
 80028bc:	b530      	push	{r4, r5, lr}
 80028be:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028c0:	2234      	movs	r2, #52	; 0x34
 80028c2:	2100      	movs	r1, #0
 80028c4:	a807      	add	r0, sp, #28
 80028c6:	f001 f82f 	bl	8003928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ca:	2400      	movs	r4, #0
 80028cc:	9402      	str	r4, [sp, #8]
 80028ce:	9403      	str	r4, [sp, #12]
 80028d0:	9404      	str	r4, [sp, #16]
 80028d2:	9405      	str	r4, [sp, #20]
 80028d4:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	9400      	str	r4, [sp, #0]
 80028d8:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <SystemClock_Config+0x94>)
 80028da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028e0:	641a      	str	r2, [r3, #64]	; 0x40
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ec:	9401      	str	r4, [sp, #4]
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <SystemClock_Config+0x98>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002902:	2301      	movs	r3, #1
 8002904:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800290a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800290c:	2502      	movs	r5, #2
 800290e:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002910:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002914:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002916:	2304      	movs	r3, #4
 8002918:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800291a:	23b4      	movs	r3, #180	; 0xb4
 800291c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800291e:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002920:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002922:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002924:	a807      	add	r0, sp, #28
 8002926:	f7fe fbe5 	bl	80010f4 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800292a:	f7fe fa11 	bl	8000d50 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800292e:	230f      	movs	r3, #15
 8002930:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002932:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002934:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002936:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800293a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800293c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002940:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002942:	2105      	movs	r1, #5
 8002944:	a802      	add	r0, sp, #8
 8002946:	f7fe fa43 	bl	8000dd0 <HAL_RCC_ClockConfig>
}
 800294a:	b015      	add	sp, #84	; 0x54
 800294c:	bd30      	pop	{r4, r5, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40007000 	.word	0x40007000

08002958 <main>:
{
 8002958:	b508      	push	{r3, lr}
  HAL_Init();
 800295a:	f7fd fe5f 	bl	800061c <HAL_Init>
  SystemClock_Config();
 800295e:	f7ff ffad 	bl	80028bc <SystemClock_Config>
  MX_GPIO_Init();
 8002962:	f7ff fe71 	bl	8002648 <MX_GPIO_Init>
  MX_DMA_Init();
 8002966:	f7ff fec5 	bl	80026f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800296a:	f7ff fee5 	bl	8002738 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800296e:	f7ff fef9 	bl	8002764 <MX_TIM1_Init>
  MX_TIM5_Init();
 8002972:	f7ff ff59 	bl	8002828 <MX_TIM5_Init>
  MX_TIM2_Init();
 8002976:	f7ff ff7d 	bl	8002874 <MX_TIM2_Init>
  THL_main();
 800297a:	f000 fced 	bl	8003358 <THL_main>
 800297e:	e7fe      	b.n	800297e <main+0x26>

08002980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002980:	4770      	bx	lr
	...

08002984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002984:	b500      	push	{lr}
 8002986:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002988:	2100      	movs	r1, #0
 800298a:	9100      	str	r1, [sp, #0]
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_MspInit+0x3c>)
 800298e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
 8002996:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002998:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800299c:	9200      	str	r2, [sp, #0]
 800299e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	9101      	str	r1, [sp, #4]
 80029a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029b4:	2007      	movs	r0, #7
 80029b6:	f7fd fe5d 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ba:	b003      	add	sp, #12
 80029bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029c4:	b500      	push	{lr}
 80029c6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	2300      	movs	r3, #0
 80029ca:	9303      	str	r3, [sp, #12]
 80029cc:	9304      	str	r3, [sp, #16]
 80029ce:	9305      	str	r3, [sp, #20]
 80029d0:	9306      	str	r3, [sp, #24]
 80029d2:	9307      	str	r3, [sp, #28]
  if(htim_pwm->Instance==TIM1)
 80029d4:	6802      	ldr	r2, [r0, #0]
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_TIM_PWM_MspInit+0x64>)
 80029d8:	429a      	cmp	r2, r3
 80029da:	d002      	beq.n	80029e2 <HAL_TIM_PWM_MspInit+0x1e>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029dc:	b009      	add	sp, #36	; 0x24
 80029de:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029e2:	2100      	movs	r1, #0
 80029e4:	9101      	str	r1, [sp, #4]
 80029e6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80029ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
 80029f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029f4:	f002 0201 	and.w	r2, r2, #1
 80029f8:	9201      	str	r2, [sp, #4]
 80029fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fc:	9102      	str	r1, [sp, #8]
 80029fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	9302      	str	r3, [sp, #8]
 8002a0e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1e:	a903      	add	r1, sp, #12
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <HAL_TIM_PWM_MspInit+0x68>)
 8002a22:	f7fe f8ad 	bl	8000b80 <HAL_GPIO_Init>
}
 8002a26:	e7d9      	b.n	80029dc <HAL_TIM_PWM_MspInit+0x18>
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40020000 	.word	0x40020000

08002a30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	2300      	movs	r3, #0
 8002a36:	9305      	str	r3, [sp, #20]
 8002a38:	9306      	str	r3, [sp, #24]
 8002a3a:	9307      	str	r3, [sp, #28]
 8002a3c:	9308      	str	r3, [sp, #32]
 8002a3e:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_encoder->Instance==TIM2)
 8002a40:	6803      	ldr	r3, [r0, #0]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a46:	d004      	beq.n	8002a52 <HAL_TIM_Encoder_MspInit+0x22>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM5)
 8002a48:	4a2e      	ldr	r2, [pc, #184]	; (8002b04 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d039      	beq.n	8002ac2 <HAL_TIM_Encoder_MspInit+0x92>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002a4e:	b00a      	add	sp, #40	; 0x28
 8002a50:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a52:	2400      	movs	r4, #0
 8002a54:	9400      	str	r4, [sp, #0]
 8002a56:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
 8002a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a64:	f002 0201 	and.w	r2, r2, #1
 8002a68:	9200      	str	r2, [sp, #0]
 8002a6a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6c:	9401      	str	r4, [sp, #4]
 8002a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
 8002a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a78:	f002 0201 	and.w	r2, r2, #1
 8002a7c:	9201      	str	r2, [sp, #4]
 8002a7e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a80:	9402      	str	r4, [sp, #8]
 8002a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a84:	f042 0202 	orr.w	r2, r2, #2
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	9302      	str	r3, [sp, #8]
 8002a92:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a98:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	2602      	movs	r6, #2
 8002a9c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a9e:	2501      	movs	r5, #1
 8002aa0:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	a905      	add	r1, sp, #20
 8002aa4:	4818      	ldr	r0, [pc, #96]	; (8002b08 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002aa6:	f7fe f86b 	bl	8000b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002aaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ab6:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab8:	a905      	add	r1, sp, #20
 8002aba:	4814      	ldr	r0, [pc, #80]	; (8002b0c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002abc:	f7fe f860 	bl	8000b80 <HAL_GPIO_Init>
 8002ac0:	e7c5      	b.n	8002a4e <HAL_TIM_Encoder_MspInit+0x1e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	9103      	str	r1, [sp, #12]
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aca:	f042 0208 	orr.w	r2, r2, #8
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
 8002ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad2:	f002 0208 	and.w	r2, r2, #8
 8002ad6:	9203      	str	r2, [sp, #12]
 8002ad8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	9104      	str	r1, [sp, #16]
 8002adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	9304      	str	r3, [sp, #16]
 8002aec:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aee:	2303      	movs	r3, #3
 8002af0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002af6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af8:	a905      	add	r1, sp, #20
 8002afa:	4803      	ldr	r0, [pc, #12]	; (8002b08 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002afc:	f7fe f840 	bl	8000b80 <HAL_GPIO_Init>
}
 8002b00:	e7a5      	b.n	8002a4e <HAL_TIM_Encoder_MspInit+0x1e>
 8002b02:	bf00      	nop
 8002b04:	40000c00 	.word	0x40000c00
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	40023800 	.word	0x40023800

08002b14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b14:	b500      	push	{lr}
 8002b16:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	9302      	str	r3, [sp, #8]
 8002b1e:	9303      	str	r3, [sp, #12]
 8002b20:	9304      	str	r3, [sp, #16]
 8002b22:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8002b24:	6802      	ldr	r2, [r0, #0]
 8002b26:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_TIM_MspPostInit+0x50>)
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d002      	beq.n	8002b32 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b2c:	b007      	add	sp, #28
 8002b2e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_TIM_MspPostInit+0x54>)
 8002b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b4e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b54:	2301      	movs	r3, #1
 8002b56:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	a901      	add	r1, sp, #4
 8002b5a:	4804      	ldr	r0, [pc, #16]	; (8002b6c <HAL_TIM_MspPostInit+0x58>)
 8002b5c:	f7fe f810 	bl	8000b80 <HAL_GPIO_Init>
}
 8002b60:	e7e4      	b.n	8002b2c <HAL_TIM_MspPostInit+0x18>
 8002b62:	bf00      	nop
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020000 	.word	0x40020000

08002b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b70:	b530      	push	{r4, r5, lr}
 8002b72:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	2300      	movs	r3, #0
 8002b76:	9303      	str	r3, [sp, #12]
 8002b78:	9304      	str	r3, [sp, #16]
 8002b7a:	9305      	str	r3, [sp, #20]
 8002b7c:	9306      	str	r3, [sp, #24]
 8002b7e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8002b80:	6802      	ldr	r2, [r0, #0]
 8002b82:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <HAL_UART_MspInit+0xe4>)
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b88:	b009      	add	sp, #36	; 0x24
 8002b8a:	bd30      	pop	{r4, r5, pc}
 8002b8c:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b8e:	2500      	movs	r5, #0
 8002b90:	9501      	str	r5, [sp, #4]
 8002b92:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b98:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002ba4:	9201      	str	r2, [sp, #4]
 8002ba6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba8:	9502      	str	r5, [sp, #8]
 8002baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	9302      	str	r3, [sp, #8]
 8002bba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bcc:	2307      	movs	r3, #7
 8002bce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	a903      	add	r1, sp, #12
 8002bd2:	4821      	ldr	r0, [pc, #132]	; (8002c58 <HAL_UART_MspInit+0xe8>)
 8002bd4:	f7fd ffd4 	bl	8000b80 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002bd8:	4820      	ldr	r0, [pc, #128]	; (8002c5c <HAL_UART_MspInit+0xec>)
 8002bda:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_UART_MspInit+0xf0>)
 8002bdc:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002bde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002be2:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002be4:	2340      	movs	r3, #64	; 0x40
 8002be6:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be8:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bee:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf0:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf2:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002bf4:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bf6:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bf8:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002bfa:	f7fd fe1d 	bl	8000838 <HAL_DMA_Init>
 8002bfe:	bb10      	cbnz	r0, 8002c46 <HAL_UART_MspInit+0xd6>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_UART_MspInit+0xec>)
 8002c02:	6323      	str	r3, [r4, #48]	; 0x30
 8002c04:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002c06:	4817      	ldr	r0, [pc, #92]	; (8002c64 <HAL_UART_MspInit+0xf4>)
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_UART_MspInit+0xf8>)
 8002c0a:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002c0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c10:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c12:	2300      	movs	r3, #0
 8002c14:	6083      	str	r3, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c16:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c1c:	6102      	str	r2, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c1e:	6143      	str	r3, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c20:	6183      	str	r3, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002c22:	61c3      	str	r3, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c24:	6203      	str	r3, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c26:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c28:	f7fd fe06 	bl	8000838 <HAL_DMA_Init>
 8002c2c:	b970      	cbnz	r0, 8002c4c <HAL_UART_MspInit+0xdc>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_UART_MspInit+0xf4>)
 8002c30:	6363      	str	r3, [r4, #52]	; 0x34
 8002c32:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	4611      	mov	r1, r2
 8002c38:	2026      	movs	r0, #38	; 0x26
 8002c3a:	f7fd fd2d 	bl	8000698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c3e:	2026      	movs	r0, #38	; 0x26
 8002c40:	f7fd fd5c 	bl	80006fc <HAL_NVIC_EnableIRQ>
}
 8002c44:	e7a0      	b.n	8002b88 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8002c46:	f7ff fe9b 	bl	8002980 <Error_Handler>
 8002c4a:	e7d9      	b.n	8002c00 <HAL_UART_MspInit+0x90>
      Error_Handler();
 8002c4c:	f7ff fe98 	bl	8002980 <Error_Handler>
 8002c50:	e7ed      	b.n	8002c2e <HAL_UART_MspInit+0xbe>
 8002c52:	bf00      	nop
 8002c54:	40004400 	.word	0x40004400
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	200002a8 	.word	0x200002a8
 8002c60:	400260a0 	.word	0x400260a0
 8002c64:	2000020c 	.word	0x2000020c
 8002c68:	40026088 	.word	0x40026088

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	4770      	bx	lr

08002c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6e:	e7fe      	b.n	8002c6e <HardFault_Handler>

08002c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c70:	e7fe      	b.n	8002c70 <MemManage_Handler>

08002c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c72:	e7fe      	b.n	8002c72 <BusFault_Handler>

08002c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c74:	e7fe      	b.n	8002c74 <UsageFault_Handler>

08002c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c76:	4770      	bx	lr

08002c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c78:	4770      	bx	lr

08002c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c7a:	4770      	bx	lr

08002c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c7e:	f7fd fce7 	bl	8000650 <HAL_IncTick>
 8002c82:	bd08      	pop	{r3, pc}

08002c84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c86:	4802      	ldr	r0, [pc, #8]	; (8002c90 <DMA1_Stream5_IRQHandler+0xc>)
 8002c88:	f7fd fe8c 	bl	80009a4 <HAL_DMA_IRQHandler>
 8002c8c:	bd08      	pop	{r3, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000020c 	.word	0x2000020c

08002c94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002c94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c96:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <DMA1_Stream6_IRQHandler+0xc>)
 8002c98:	f7fd fe84 	bl	80009a4 <HAL_DMA_IRQHandler>
 8002c9c:	bd08      	pop	{r3, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200002a8 	.word	0x200002a8

08002ca4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ca4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ca6:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <USART2_IRQHandler+0xc>)
 8002ca8:	f7ff fc36 	bl	8002518 <HAL_UART_IRQHandler>
 8002cac:	bd08      	pop	{r3, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000380 	.word	0x20000380

08002cb4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb4:	490f      	ldr	r1, [pc, #60]	; (8002cf4 <SystemInit+0x40>)
 8002cb6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002cba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <SystemInit+0x44>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ccc:	2000      	movs	r0, #0
 8002cce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002cd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cda:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002cdc:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <SystemInit+0x48>)
 8002cde:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ce8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cee:	608b      	str	r3, [r1, #8]
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000ed00 	.word	0xe000ed00
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	24003010 	.word	0x24003010

08002d00 <IT_CallBack_UsartTC>:
			  *It is tricky for allocating heap memory in an OS-free embedded system,
			  *therefore, we alloacte static memory instead, for it is not an 
			  *authentic oop environment.*/


void IT_CallBack_UsartTC(USART* Device) {
 8002d00:	b508      	push	{r3, lr}
	turnOn(Led);
 8002d02:	4b02      	ldr	r3, [pc, #8]	; (8002d0c <IT_CallBack_UsartTC+0xc>)
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	f000 fb32 	bl	800336e <turnOn>
 8002d0a:	bd08      	pop	{r3, pc}
 8002d0c:	200004a0 	.word	0x200004a0

08002d10 <testPrints>:
}

void testPrints(void) {
 8002d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d12:	b083      	sub	sp, #12
	//For example, on nuleo board F446, uart2 -> stlink-v2's stm32f103 -> usb -> COM on ur X86/X64 computer
	USART* Terminal = newUSART(&uart2, &huart2); 
 8002d14:	4966      	ldr	r1, [pc, #408]	; (8002eb0 <testPrints+0x1a0>)
 8002d16:	4867      	ldr	r0, [pc, #412]	; (8002eb4 <testPrints+0x1a4>)
 8002d18:	f000 fb46 	bl	80033a8 <newUSART>
 8002d1c:	4605      	mov	r5, r0
	print(Terminal,"\r**************************************************************\n\r");
 8002d1e:	4c66      	ldr	r4, [pc, #408]	; (8002eb8 <testPrints+0x1a8>)
 8002d20:	4621      	mov	r1, r4
 8002d22:	f000 fbef 	bl	8003504 <print>
	print(Terminal,"\r**************************************************************\n\r");
 8002d26:	4621      	mov	r1, r4
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f000 fbeb 	bl	8003504 <print>
	print(Terminal,"\r**************************************************************\n\r");
 8002d2e:	4621      	mov	r1, r4
 8002d30:	4628      	mov	r0, r5
 8002d32:	f000 fbe7 	bl	8003504 <print>
	print(Terminal,"\r[Atollic Truestudio - C/C++] \n\r");
 8002d36:	4961      	ldr	r1, [pc, #388]	; (8002ebc <testPrints+0x1ac>)
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f000 fbe3 	bl	8003504 <print>

	print(Terminal,"\n\r=============Begin:Test Basic Outputtings==================\r");
 8002d3e:	4960      	ldr	r1, [pc, #384]	; (8002ec0 <testPrints+0x1b0>)
 8002d40:	4628      	mov	r0, r5
 8002d42:	f000 fbdf 	bl	8003504 <print>
		//test usartSend() 
		strcpy(Terminal->TxBuffer, "\n\rTest[usartSend]\r\n\r[*****]usartSend: Hello World!\r\n");
 8002d46:	4f5f      	ldr	r7, [pc, #380]	; (8002ec4 <testPrints+0x1b4>)
 8002d48:	1d2c      	adds	r4, r5, #4
 8002d4a:	f107 0e30 	add.w	lr, r7, #48	; 0x30
 8002d4e:	463e      	mov	r6, r7
 8002d50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d52:	6020      	str	r0, [r4, #0]
 8002d54:	6061      	str	r1, [r4, #4]
 8002d56:	60a2      	str	r2, [r4, #8]
 8002d58:	60e3      	str	r3, [r4, #12]
 8002d5a:	4637      	mov	r7, r6
 8002d5c:	3410      	adds	r4, #16
 8002d5e:	4576      	cmp	r6, lr
 8002d60:	d1f5      	bne.n	8002d4e <testPrints+0x3e>
 8002d62:	6830      	ldr	r0, [r6, #0]
 8002d64:	6020      	str	r0, [r4, #0]
 8002d66:	7933      	ldrb	r3, [r6, #4]
 8002d68:	7123      	strb	r3, [r4, #4]
		usartSend(Terminal);
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	f000 fb52 	bl	8003414 <usartSend>

		//test print()
		print(Terminal, "\n\rTest[print]\r\n");
 8002d70:	4955      	ldr	r1, [pc, #340]	; (8002ec8 <testPrints+0x1b8>)
 8002d72:	4628      	mov	r0, r5
 8002d74:	f000 fbc6 	bl	8003504 <print>
		print(Terminal, "\r[*****]print: Hello World!\r\n");
 8002d78:	4954      	ldr	r1, [pc, #336]	; (8002ecc <testPrints+0x1bc>)
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f000 fbc2 	bl	8003504 <print>
		print(Terminal, "\r[*****]Test format string: %d + %d = %d\r\n",1,1,1+1);
 8002d80:	2302      	movs	r3, #2
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	2301      	movs	r3, #1
 8002d86:	461a      	mov	r2, r3
 8002d88:	4951      	ldr	r1, [pc, #324]	; (8002ed0 <testPrints+0x1c0>)
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	f000 fbba 	bl	8003504 <print>

		//test printf_u()
		USART* MainTerminal = newMainUSART(&huart2);  //[1]
 8002d90:	4c47      	ldr	r4, [pc, #284]	; (8002eb0 <testPrints+0x1a0>)
 8002d92:	4620      	mov	r0, r4
 8002d94:	f000 fb36 	bl	8003404 <newMainUSART>
 8002d98:	4605      	mov	r5, r0
		printf_u("\n\rTest[printf_u]\r\n");
 8002d9a:	484e      	ldr	r0, [pc, #312]	; (8002ed4 <testPrints+0x1c4>)
 8002d9c:	f000 fbc6 	bl	800352c <printf_u>
		printf_u("\r[*****]printf_u: Hello World!\r\n");
 8002da0:	484d      	ldr	r0, [pc, #308]	; (8002ed8 <testPrints+0x1c8>)
 8002da2:	f000 fbc3 	bl	800352c <printf_u>
	print(MainTerminal,  "\r======================End==========================\r\n");
 8002da6:	494d      	ldr	r1, [pc, #308]	; (8002edc <testPrints+0x1cc>)
 8002da8:	4628      	mov	r0, r5
 8002daa:	f000 fbab 	bl	8003504 <print>
 
	
	printf_u("\n\r===============Begin:Test Outputtings with DMA=================\r");
 8002dae:	484c      	ldr	r0, [pc, #304]	; (8002ee0 <testPrints+0x1d0>)
 8002db0:	f000 fbbc 	bl	800352c <printf_u>
		
		/*Terminal defined above is disabled when in [1] MainUSART access the same husart
		  Thus, redefine it again*/  //[2]
		Terminal = newUSART(&uart2, &huart2);
 8002db4:	4621      	mov	r1, r4
 8002db6:	483f      	ldr	r0, [pc, #252]	; (8002eb4 <testPrints+0x1a4>)
 8002db8:	f000 faf6 	bl	80033a8 <newUSART>
 8002dbc:	4604      	mov	r4, r0
		
		//test usartSend_DMA()
		strcpy(Terminal->TxBuffer, "\n\rTest[usartSend_DMA]\r\n\r[*****]usartSend_DMA: Hello World!\r\n");
 8002dbe:	4d49      	ldr	r5, [pc, #292]	; (8002ee4 <testPrints+0x1d4>)
 8002dc0:	1d06      	adds	r6, r0, #4
 8002dc2:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8002dc6:	462f      	mov	r7, r5
 8002dc8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002dca:	6030      	str	r0, [r6, #0]
 8002dcc:	6071      	str	r1, [r6, #4]
 8002dce:	60b2      	str	r2, [r6, #8]
 8002dd0:	60f3      	str	r3, [r6, #12]
 8002dd2:	463d      	mov	r5, r7
 8002dd4:	3610      	adds	r6, #16
 8002dd6:	4577      	cmp	r7, lr
 8002dd8:	d1f5      	bne.n	8002dc6 <testPrints+0xb6>
 8002dda:	cd07      	ldmia	r5!, {r0, r1, r2}
 8002ddc:	6030      	str	r0, [r6, #0]
 8002dde:	6071      	str	r1, [r6, #4]
 8002de0:	60b2      	str	r2, [r6, #8]
 8002de2:	782b      	ldrb	r3, [r5, #0]
 8002de4:	7333      	strb	r3, [r6, #12]
		usartSend_DMA(Terminal);
 8002de6:	4620      	mov	r0, r4
 8002de8:	f000 fb4c 	bl	8003484 <usartSend_DMA>
		while(Terminal->TxStatus != Completed);
 8002dec:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d1fa      	bne.n	8002dec <testPrints+0xdc>

		//test print_DMA()
		print_DMA(Terminal, "\n\rTest[print_DMA]\r\n");
 8002df6:	493c      	ldr	r1, [pc, #240]	; (8002ee8 <testPrints+0x1d8>)
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f000 fbad 	bl	8003558 <print_DMA>
		while(Terminal->TxStatus != Completed);
 8002dfe:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d1fa      	bne.n	8002dfe <testPrints+0xee>
		print_DMA(Terminal, "\r[*****]print_DMA: Hello World!\r\n");
 8002e08:	4938      	ldr	r1, [pc, #224]	; (8002eec <testPrints+0x1dc>)
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f000 fba4 	bl	8003558 <print_DMA>
		while(Terminal->TxStatus != Completed);
 8002e10:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d1fa      	bne.n	8002e10 <testPrints+0x100>
		
		//test printf_DMA()
		
		/*Same reason as [2]*/
		MainTerminal = newMainUSART(&huart2);
 8002e1a:	4825      	ldr	r0, [pc, #148]	; (8002eb0 <testPrints+0x1a0>)
 8002e1c:	f000 faf2 	bl	8003404 <newMainUSART>
 8002e20:	4604      	mov	r4, r0
		
		printf_DMA("\n\rTest[printf_DMA]\r\n");
 8002e22:	4833      	ldr	r0, [pc, #204]	; (8002ef0 <testPrints+0x1e0>)
 8002e24:	f000 fbb0 	bl	8003588 <printf_DMA>
		while(MainTerminal->TxStatus != Completed);
 8002e28:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d1fa      	bne.n	8002e28 <testPrints+0x118>
		printf_DMA("\r[*****]printf_DMA: Hello World!\r\n");
 8002e32:	4830      	ldr	r0, [pc, #192]	; (8002ef4 <testPrints+0x1e4>)
 8002e34:	f000 fba8 	bl	8003588 <printf_DMA>
		while(MainTerminal->TxStatus != Completed);
 8002e38:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d1fa      	bne.n	8002e38 <testPrints+0x128>
		
		//test if DMA printing(nonblocking mode) disables follow-up prints
		printf_DMA("\n\rThere should be one empty line below\r\n");
 8002e42:	482d      	ldr	r0, [pc, #180]	; (8002ef8 <testPrints+0x1e8>)
 8002e44:	f000 fba0 	bl	8003588 <printf_DMA>
		//delay(100);  
		/*if delayed, "Error" below will be printed because the 
		  printf_DMA above will definitely finish within 100 milliseconds*/
		printf_DMA("\rError!\r");
 8002e48:	482c      	ldr	r0, [pc, #176]	; (8002efc <testPrints+0x1ec>)
 8002e4a:	f000 fb9d 	bl	8003588 <printf_DMA>
		while(MainTerminal->TxStatus != Completed);
 8002e4e:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d1fa      	bne.n	8002e4e <testPrints+0x13e>
		printf_DMA("\r\n-------------------------\r\n");
 8002e58:	4829      	ldr	r0, [pc, #164]	; (8002f00 <testPrints+0x1f0>)
 8002e5a:	f000 fb95 	bl	8003588 <printf_DMA>
		while(MainTerminal->TxStatus != Completed);
 8002e5e:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d1fa      	bne.n	8002e5e <testPrints+0x14e>
		
		//test fastPrint & fastPrintf, they are simply print(f)_dma under blocking mode
		Terminal = newUSART(&uart2, &huart2); //same reason as [2]
 8002e68:	4c11      	ldr	r4, [pc, #68]	; (8002eb0 <testPrints+0x1a0>)
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	4811      	ldr	r0, [pc, #68]	; (8002eb4 <testPrints+0x1a4>)
 8002e6e:	f000 fa9b 	bl	80033a8 <newUSART>
 8002e72:	4605      	mov	r5, r0
		
		fastPrint(Terminal, "\n\rTest[fastPrint]\r\n");
 8002e74:	4923      	ldr	r1, [pc, #140]	; (8002f04 <testPrints+0x1f4>)
 8002e76:	f000 fba3 	bl	80035c0 <fastPrint>
		fastPrint(Terminal, "\r[*****]fastPrint: Hello World!\r\n");
 8002e7a:	4923      	ldr	r1, [pc, #140]	; (8002f08 <testPrints+0x1f8>)
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	f000 fb9f 	bl	80035c0 <fastPrint>

		MainTerminal = newMainUSART(&huart2); //same reason as [2]
 8002e82:	4620      	mov	r0, r4
 8002e84:	f000 fabe 	bl	8003404 <newMainUSART>
		fastPrintf("\n\rTest[fastPrintf]\r\n");
 8002e88:	4820      	ldr	r0, [pc, #128]	; (8002f0c <testPrints+0x1fc>)
 8002e8a:	f000 fbb3 	bl	80035f4 <fastPrintf>
		fastPrintf("\r[*****]fastPrintf: Hello World!\r\n");
 8002e8e:	4820      	ldr	r0, [pc, #128]	; (8002f10 <testPrints+0x200>)
 8002e90:	f000 fbb0 	bl	80035f4 <fastPrintf>
	printf_u("\r======================End==========================\r\n");
 8002e94:	4811      	ldr	r0, [pc, #68]	; (8002edc <testPrints+0x1cc>)
 8002e96:	f000 fb49 	bl	800352c <printf_u>
	
	delay(500);
 8002e9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e9e:	f000 fa78 	bl	8003392 <delay>
	turnOff(Led);
 8002ea2:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <testPrints+0x204>)
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	f000 fa69 	bl	800337c <turnOff>
}
 8002eaa:	b003      	add	sp, #12
 8002eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000380 	.word	0x20000380
 8002eb4:	200003c8 	.word	0x200003c8
 8002eb8:	08004bb4 	.word	0x08004bb4
 8002ebc:	08004bf8 	.word	0x08004bf8
 8002ec0:	08004c1c 	.word	0x08004c1c
 8002ec4:	08004c5c 	.word	0x08004c5c
 8002ec8:	08004c94 	.word	0x08004c94
 8002ecc:	08004ca4 	.word	0x08004ca4
 8002ed0:	08004cc4 	.word	0x08004cc4
 8002ed4:	08004cf0 	.word	0x08004cf0
 8002ed8:	08004d04 	.word	0x08004d04
 8002edc:	08004d28 	.word	0x08004d28
 8002ee0:	08004d60 	.word	0x08004d60
 8002ee4:	08004da4 	.word	0x08004da4
 8002ee8:	08004de4 	.word	0x08004de4
 8002eec:	08004df8 	.word	0x08004df8
 8002ef0:	08004e1c 	.word	0x08004e1c
 8002ef4:	08004e34 	.word	0x08004e34
 8002ef8:	08004e58 	.word	0x08004e58
 8002efc:	08004e84 	.word	0x08004e84
 8002f00:	08004e90 	.word	0x08004e90
 8002f04:	08004eb0 	.word	0x08004eb0
 8002f08:	08004ec4 	.word	0x08004ec4
 8002f0c:	08004ee8 	.word	0x08004ee8
 8002f10:	08004f00 	.word	0x08004f00
 8002f14:	200004a0 	.word	0x200004a0

08002f18 <testScans>:
void testScans(void) {
 8002f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1c:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	USART* Terminal = newUSART(&uart2, &huart2);
 8002f20:	49bd      	ldr	r1, [pc, #756]	; (8003218 <testScans+0x300>)
 8002f22:	48be      	ldr	r0, [pc, #760]	; (800321c <testScans+0x304>)
 8002f24:	f000 fa40 	bl	80033a8 <newUSART>
 8002f28:	4604      	mov	r4, r0
	char* str;
	print(Terminal,"\r++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\r");
 8002f2a:	4dbd      	ldr	r5, [pc, #756]	; (8003220 <testScans+0x308>)
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f000 fae9 	bl	8003504 <print>
	print(Terminal,"\r++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\r");
 8002f32:	4629      	mov	r1, r5
 8002f34:	4620      	mov	r0, r4
 8002f36:	f000 fae5 	bl	8003504 <print>
	print(Terminal,"\r++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\r");
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f000 fae1 	bl	8003504 <print>
	print(Terminal,"\n\r=============Begin:Test Basic Inputtings==================\r");
 8002f42:	49b8      	ldr	r1, [pc, #736]	; (8003224 <testScans+0x30c>)
 8002f44:	4620      	mov	r0, r4
 8002f46:	f000 fadd 	bl	8003504 <print>
		//test usartRead() 
		for(int i = 1; i <= 5; i+=4) {	
 8002f4a:	2501      	movs	r5, #1
 8002f4c:	e013      	b.n	8002f76 <testScans+0x5e>
			print(Terminal, "\n\rTest[usartRead]\r\n");
 8002f4e:	49b6      	ldr	r1, [pc, #728]	; (8003228 <testScans+0x310>)
 8002f50:	4620      	mov	r0, r4
 8002f52:	f000 fad7 	bl	8003504 <print>
			print(Terminal,"\r[*****]Please enter EXACTLY %d letters\r\n\r>>>>>>> ",i);
 8002f56:	462a      	mov	r2, r5
 8002f58:	49b4      	ldr	r1, [pc, #720]	; (800322c <testScans+0x314>)
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f000 fad2 	bl	8003504 <print>
			str = usartRead(Terminal, i+1); //+1 due to [Enter] key counting as one character at the end of stdin
 8002f60:	1c69      	adds	r1, r5, #1
 8002f62:	b289      	uxth	r1, r1
 8002f64:	4620      	mov	r0, r4
 8002f66:	f000 fb61 	bl	800362c <usartRead>
			print(Terminal,"\r[Echo]: %s\r\n",str);
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	49b0      	ldr	r1, [pc, #704]	; (8003230 <testScans+0x318>)
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f000 fac8 	bl	8003504 <print>
		for(int i = 1; i <= 5; i+=4) {	
 8002f74:	3504      	adds	r5, #4
 8002f76:	2d05      	cmp	r5, #5
 8002f78:	dde9      	ble.n	8002f4e <testScans+0x36>
 8002f7a:	2503      	movs	r5, #3
 8002f7c:	e013      	b.n	8002fa6 <testScans+0x8e>
		}
		for(int i = 3; i > 0; i-=2) {	
			print(Terminal, "\n\rTest[usartRead]\r\n");
 8002f7e:	49aa      	ldr	r1, [pc, #680]	; (8003228 <testScans+0x310>)
 8002f80:	4620      	mov	r0, r4
 8002f82:	f000 fabf 	bl	8003504 <print>
			print(Terminal,"\r[*****]Please enter EXACTLY %d letters\r\n\r>>>>>>> ",i);
 8002f86:	462a      	mov	r2, r5
 8002f88:	49a8      	ldr	r1, [pc, #672]	; (800322c <testScans+0x314>)
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f000 faba 	bl	8003504 <print>
			str = usartRead(Terminal, i+1); //+1 due to [Enter] key counting as one character at the end of stdin
 8002f90:	1c69      	adds	r1, r5, #1
 8002f92:	b289      	uxth	r1, r1
 8002f94:	4620      	mov	r0, r4
 8002f96:	f000 fb49 	bl	800362c <usartRead>
			print(Terminal,"\r[Echo]: %s\r\n",str);
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	49a4      	ldr	r1, [pc, #656]	; (8003230 <testScans+0x318>)
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f000 fab0 	bl	8003504 <print>
		for(int i = 3; i > 0; i-=2) {	
 8002fa4:	3d02      	subs	r5, #2
 8002fa6:	2d00      	cmp	r5, #0
 8002fa8:	dce9      	bgt.n	8002f7e <testScans+0x66>
		}
	
		//test readWord() & readLine()
		print(Terminal, "\n\rTest[readWord]\r\n");
 8002faa:	49a2      	ldr	r1, [pc, #648]	; (8003234 <testScans+0x31c>)
 8002fac:	4620      	mov	r0, r4
 8002fae:	f000 faa9 	bl	8003504 <print>
		print(Terminal,"\r[*****]Please enter two words (space-sperated) below\r\n");
 8002fb2:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 8003278 <testScans+0x360>
 8002fb6:	4659      	mov	r1, fp
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f000 faa3 	bl	8003504 <print>
		print(Terminal,"\r>>>>>>>>>>>>>>>>>>>\r\n");
 8002fbe:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 800327c <testScans+0x364>
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f000 fa9d 	bl	8003504 <print>
		char one_word[RxBuffer_Size];
		readWord(Terminal, one_word);
 8002fca:	a967      	add	r1, sp, #412	; 0x19c
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f000 fbb5 	bl	800373c <readWord>
		char another_word[RxBuffer_Size];
		readWord(Terminal, another_word);
 8002fd2:	a94e      	add	r1, sp, #312	; 0x138
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f000 fbb1 	bl	800373c <readWord>
		print(Terminal,"\r<<<<<<<<<<<<<<<<<<<\r\n");
 8002fda:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8003280 <testScans+0x368>
 8002fde:	4641      	mov	r1, r8
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f000 fa8f 	bl	8003504 <print>
		print(Terminal, "\r[Echo]:\r\n\r%s\r\n", one_word);
 8002fe6:	4f94      	ldr	r7, [pc, #592]	; (8003238 <testScans+0x320>)
 8002fe8:	aa67      	add	r2, sp, #412	; 0x19c
 8002fea:	4639      	mov	r1, r7
 8002fec:	4620      	mov	r0, r4
 8002fee:	f000 fa89 	bl	8003504 <print>
		print(Terminal, "\r%s\r\n", another_word);
 8002ff2:	4d92      	ldr	r5, [pc, #584]	; (800323c <testScans+0x324>)
 8002ff4:	aa4e      	add	r2, sp, #312	; 0x138
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f000 fa83 	bl	8003504 <print>

		print(Terminal, "\n\rTest[readLine]\r\n");
 8002ffe:	4990      	ldr	r1, [pc, #576]	; (8003240 <testScans+0x328>)
 8003000:	4620      	mov	r0, r4
 8003002:	f000 fa7f 	bl	8003504 <print>
		print(Terminal,"\r[*****]Please enter anything below (no more than [RxBuffer_Size] number of characters)\r\n");
 8003006:	f8df a27c 	ldr.w	sl, [pc, #636]	; 8003284 <testScans+0x36c>
 800300a:	4651      	mov	r1, sl
 800300c:	4620      	mov	r0, r4
 800300e:	f000 fa79 	bl	8003504 <print>
		print(Terminal,"\r>>>>>>>>>>>>>>>>>>>\r\n");
 8003012:	4649      	mov	r1, r9
 8003014:	4620      	mov	r0, r4
 8003016:	f000 fa75 	bl	8003504 <print>
		char one_line[RxBuffer_Size];
		readLine(Terminal, one_line);
 800301a:	a935      	add	r1, sp, #212	; 0xd4
 800301c:	4620      	mov	r0, r4
 800301e:	f000 fba9 	bl	8003774 <readLine>
		print(Terminal,"\r<<<<<<<<<<<<<<<<<<<\r\n");
 8003022:	4641      	mov	r1, r8
 8003024:	4620      	mov	r0, r4
 8003026:	f000 fa6d 	bl	8003504 <print>
		print(Terminal, "\r[Echo]:\r\n\r%s\r\n", one_line);
 800302a:	aa35      	add	r2, sp, #212	; 0xd4
 800302c:	4639      	mov	r1, r7
 800302e:	4620      	mov	r0, r4
 8003030:	f000 fa68 	bl	8003504 <print>
		
		//test readWordf & readLinef
		newMainUSART(&huart2);
 8003034:	4e78      	ldr	r6, [pc, #480]	; (8003218 <testScans+0x300>)
 8003036:	4630      	mov	r0, r6
 8003038:	f000 f9e4 	bl	8003404 <newMainUSART>
		printf_u("\n\rTest[readWordf]\r\n");
 800303c:	4881      	ldr	r0, [pc, #516]	; (8003244 <testScans+0x32c>)
 800303e:	f000 fa75 	bl	800352c <printf_u>
		printf_u("\r[*****]Please enter two words (space-sperated) below\r\n");
 8003042:	4658      	mov	r0, fp
 8003044:	f000 fa72 	bl	800352c <printf_u>
		printf_u("\r>>>>>>>>>>>>>>>>>>>\r\n");
 8003048:	4648      	mov	r0, r9
 800304a:	f000 fa6f 	bl	800352c <printf_u>
		readWordf(one_word);
 800304e:	a867      	add	r0, sp, #412	; 0x19c
 8003050:	f000 fbaa 	bl	80037a8 <readWordf>
		readWordf(another_word);
 8003054:	a84e      	add	r0, sp, #312	; 0x138
 8003056:	f000 fba7 	bl	80037a8 <readWordf>
		printf_u("\r<<<<<<<<<<<<<<<<<<<\r\n");
 800305a:	4640      	mov	r0, r8
 800305c:	f000 fa66 	bl	800352c <printf_u>
		printf_u("\r[Echo]:\r\n\r%s\r\n", one_word);
 8003060:	a967      	add	r1, sp, #412	; 0x19c
 8003062:	4638      	mov	r0, r7
 8003064:	f000 fa62 	bl	800352c <printf_u>
		printf_u("\r%s\r\n", another_word);
 8003068:	a94e      	add	r1, sp, #312	; 0x138
 800306a:	4628      	mov	r0, r5
 800306c:	f000 fa5e 	bl	800352c <printf_u>
		
		printf_u("\n\rTest[readLinef]\r\n");
 8003070:	4875      	ldr	r0, [pc, #468]	; (8003248 <testScans+0x330>)
 8003072:	f000 fa5b 	bl	800352c <printf_u>
		printf_u("\r[*****]Please enter anything below (no more than [RxBuffer_Size] number of characters)\r\n");
 8003076:	4650      	mov	r0, sl
 8003078:	f000 fa58 	bl	800352c <printf_u>
		printf_u("\r>>>>>>>>>>>>>>>>>>>\r\n");
 800307c:	4648      	mov	r0, r9
 800307e:	f000 fa55 	bl	800352c <printf_u>
		readLinef(one_line);
 8003082:	a835      	add	r0, sp, #212	; 0xd4
 8003084:	f000 fbae 	bl	80037e4 <readLinef>
		printf_u("\r<<<<<<<<<<<<<<<<<<<\r\n");
 8003088:	4640      	mov	r0, r8
 800308a:	f000 fa4f 	bl	800352c <printf_u>
		printf_u("\r[Echo]:\r\n\r%s\r\n", one_line);
 800308e:	a935      	add	r1, sp, #212	; 0xd4
 8003090:	4638      	mov	r0, r7
 8003092:	f000 fa4b 	bl	800352c <printf_u>
	
		//test scan
	
		Terminal = newUSART(&uart2, &huart2);
 8003096:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800321c <testScans+0x304>
 800309a:	4631      	mov	r1, r6
 800309c:	4640      	mov	r0, r8
 800309e:	f000 f983 	bl	80033a8 <newUSART>
 80030a2:	4604      	mov	r4, r0
	//while(1) { // uncomment it to do stress testing
		print(Terminal, "\n\rTest[scan]\r\n");
 80030a4:	4969      	ldr	r1, [pc, #420]	; (800324c <testScans+0x334>)
 80030a6:	f000 fa2d 	bl	8003504 <print>
		print(Terminal, "\r[*****]Please enter two integers (space-sperated) below\r\n");
 80030aa:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8003288 <testScans+0x370>
 80030ae:	4659      	mov	r1, fp
 80030b0:	4620      	mov	r0, r4
 80030b2:	f000 fa27 	bl	8003504 <print>
		uint32_t A, B;
		scan(Terminal, "%d %d", &A, &B);
 80030b6:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 800328c <testScans+0x374>
 80030ba:	ab33      	add	r3, sp, #204	; 0xcc
 80030bc:	aa34      	add	r2, sp, #208	; 0xd0
 80030be:	4651      	mov	r1, sl
 80030c0:	4620      	mov	r0, r4
 80030c2:	f000 fbab 	bl	800381c <scan>
		print(Terminal, "\r[Echo]:\r\n");
 80030c6:	4f62      	ldr	r7, [pc, #392]	; (8003250 <testScans+0x338>)
 80030c8:	4639      	mov	r1, r7
 80030ca:	4620      	mov	r0, r4
 80030cc:	f000 fa1a 	bl	8003504 <print>
		print(Terminal, "\r%d\r\n",A);
 80030d0:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8003290 <testScans+0x378>
 80030d4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80030d6:	4649      	mov	r1, r9
 80030d8:	4620      	mov	r0, r4
 80030da:	f000 fa13 	bl	8003504 <print>
		print(Terminal, "\r%d\r\n",B);
 80030de:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80030e0:	4649      	mov	r1, r9
 80030e2:	4620      	mov	r0, r4
 80030e4:	f000 fa0e 	bl	8003504 <print>
		print(Terminal, "\r[Sum]: %d\r\n", A+B);
 80030e8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80030ea:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80030ec:	441a      	add	r2, r3
 80030ee:	4959      	ldr	r1, [pc, #356]	; (8003254 <testScans+0x33c>)
 80030f0:	4620      	mov	r0, r4
 80030f2:	f000 fa07 	bl	8003504 <print>
		
		print(Terminal, "\r[*****]Please enter two strings (space-sperated) below\r\n");
 80030f6:	4958      	ldr	r1, [pc, #352]	; (8003258 <testScans+0x340>)
 80030f8:	4620      	mov	r0, r4
 80030fa:	f000 fa03 	bl	8003504 <print>
		char string1[RxBuffer_Size], string2[RxBuffer_Size];
		scan(Terminal, "%s %s", string1, string2);
 80030fe:	ab01      	add	r3, sp, #4
 8003100:	aa1a      	add	r2, sp, #104	; 0x68
 8003102:	4956      	ldr	r1, [pc, #344]	; (800325c <testScans+0x344>)
 8003104:	4620      	mov	r0, r4
 8003106:	f000 fb89 	bl	800381c <scan>
		print(Terminal, "\r[Echo]:\r\n");
 800310a:	4639      	mov	r1, r7
 800310c:	4620      	mov	r0, r4
 800310e:	f000 f9f9 	bl	8003504 <print>
		print(Terminal, "\r%s\r\n",string1);
 8003112:	aa1a      	add	r2, sp, #104	; 0x68
 8003114:	4629      	mov	r1, r5
 8003116:	4620      	mov	r0, r4
 8003118:	f000 f9f4 	bl	8003504 <print>
		print(Terminal, "\r%s\r\n",string2);
 800311c:	aa01      	add	r2, sp, #4
 800311e:	4629      	mov	r1, r5
 8003120:	4620      	mov	r0, r4
 8003122:	f000 f9ef 	bl	8003504 <print>
		print(Terminal, "\r[Concatenation]: %s%s\r\n", string1, string2);
 8003126:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8003294 <testScans+0x37c>
 800312a:	ab01      	add	r3, sp, #4
 800312c:	aa1a      	add	r2, sp, #104	; 0x68
 800312e:	4649      	mov	r1, r9
 8003130:	4620      	mov	r0, r4
 8003132:	f000 f9e7 	bl	8003504 <print>
	//}
	
		//test scanf_u
		newMainUSART(&huart2);
 8003136:	4630      	mov	r0, r6
 8003138:	f000 f964 	bl	8003404 <newMainUSART>
	//while(1) { // uncomment it to do stress testing
		printf_u("\n\rTest[scanf_u]\r\n");
 800313c:	4848      	ldr	r0, [pc, #288]	; (8003260 <testScans+0x348>)
 800313e:	f000 f9f5 	bl	800352c <printf_u>
		printf_u("\r[*****]Please enter two integers (space-sperated) below\r\n");
 8003142:	4658      	mov	r0, fp
 8003144:	f000 f9f2 	bl	800352c <printf_u>
		scanf_u("%d %d", &A, &B);
 8003148:	aa33      	add	r2, sp, #204	; 0xcc
 800314a:	a934      	add	r1, sp, #208	; 0xd0
 800314c:	4650      	mov	r0, sl
 800314e:	f000 fb79 	bl	8003844 <scanf_u>
		printf_u("\r[Echo]:\r\n");
 8003152:	4638      	mov	r0, r7
 8003154:	f000 f9ea 	bl	800352c <printf_u>
		printf_u("\r%lu\r\n",A);
 8003158:	4c42      	ldr	r4, [pc, #264]	; (8003264 <testScans+0x34c>)
 800315a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800315c:	4620      	mov	r0, r4
 800315e:	f000 f9e5 	bl	800352c <printf_u>
		printf_u("\r%lu\r\n",B);
 8003162:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8003164:	4620      	mov	r0, r4
 8003166:	f000 f9e1 	bl	800352c <printf_u>
		printf_u("\r[Sum]: %lu\r\n", A+B);
 800316a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800316c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800316e:	4419      	add	r1, r3
 8003170:	483d      	ldr	r0, [pc, #244]	; (8003268 <testScans+0x350>)
 8003172:	f000 f9db 	bl	800352c <printf_u>
		
		printf_u("\r[*****]Please enter two strings (space-sperated) below\r\n");
 8003176:	4838      	ldr	r0, [pc, #224]	; (8003258 <testScans+0x340>)
 8003178:	f000 f9d8 	bl	800352c <printf_u>
		scanf_u("%s %s", string1, string2);
 800317c:	aa01      	add	r2, sp, #4
 800317e:	a91a      	add	r1, sp, #104	; 0x68
 8003180:	4836      	ldr	r0, [pc, #216]	; (800325c <testScans+0x344>)
 8003182:	f000 fb5f 	bl	8003844 <scanf_u>
		printf_u("\r[Echo]:\r\n");
 8003186:	4638      	mov	r0, r7
 8003188:	f000 f9d0 	bl	800352c <printf_u>
		printf_u("\r%s\r\n",string1);
 800318c:	a91a      	add	r1, sp, #104	; 0x68
 800318e:	4628      	mov	r0, r5
 8003190:	f000 f9cc 	bl	800352c <printf_u>
		printf_u("\r%s\r\n",string2);
 8003194:	a901      	add	r1, sp, #4
 8003196:	4628      	mov	r0, r5
 8003198:	f000 f9c8 	bl	800352c <printf_u>
		printf_u("\r[Concatenation]: %s%s\r\n", string1, string2);
 800319c:	aa01      	add	r2, sp, #4
 800319e:	a91a      	add	r1, sp, #104	; 0x68
 80031a0:	4648      	mov	r0, r9
 80031a2:	f000 f9c3 	bl	800352c <printf_u>
	//}
	printf_u("\r======================End==========================\r\n");
 80031a6:	4831      	ldr	r0, [pc, #196]	; (800326c <testScans+0x354>)
 80031a8:	f000 f9c0 	bl	800352c <printf_u>
	
	printf_u("\n\r===============Begin:Test Inputtings with DMA=================\r");
 80031ac:	4830      	ldr	r0, [pc, #192]	; (8003270 <testScans+0x358>)
 80031ae:	f000 f9bd 	bl	800352c <printf_u>
		Terminal = newUSART(&uart2, &huart2);
 80031b2:	4631      	mov	r1, r6
 80031b4:	4640      	mov	r0, r8
 80031b6:	f000 f8f7 	bl	80033a8 <newUSART>
 80031ba:	4604      	mov	r4, r0
		//test usartRead_DMA()
		for(int i = 1; i <= 5; i+=4) {
 80031bc:	2501      	movs	r5, #1
 80031be:	e027      	b.n	8003210 <testScans+0x2f8>
			print_DMA(Terminal, "\n\rTest[usartRead_DMA]\r\n");
 80031c0:	492c      	ldr	r1, [pc, #176]	; (8003274 <testScans+0x35c>)
 80031c2:	4620      	mov	r0, r4
 80031c4:	f000 f9c8 	bl	8003558 <print_DMA>
			while(Terminal->TxStatus != Completed);
 80031c8:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d1fa      	bne.n	80031c8 <testScans+0x2b0>
			print_DMA(Terminal,"\r[*****]Please enter EXACTLY %d letters\r\n\r>>>>>>> ",i);
 80031d2:	462a      	mov	r2, r5
 80031d4:	4915      	ldr	r1, [pc, #84]	; (800322c <testScans+0x314>)
 80031d6:	4620      	mov	r0, r4
 80031d8:	f000 f9be 	bl	8003558 <print_DMA>
			while(Terminal->TxStatus != Completed);
 80031dc:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d1fa      	bne.n	80031dc <testScans+0x2c4>
			str = usartRead_DMA(Terminal, i+1);
 80031e6:	1c69      	adds	r1, r5, #1
 80031e8:	b289      	uxth	r1, r1
 80031ea:	4620      	mov	r0, r4
 80031ec:	f000 fa5c 	bl	80036a8 <usartRead_DMA>
 80031f0:	4602      	mov	r2, r0
			while(Terminal->RxStatus != Completed);
 80031f2:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d1fa      	bne.n	80031f2 <testScans+0x2da>
			print(Terminal,"\r[Echo]: %s\r\n",str);
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <testScans+0x318>)
 80031fe:	4620      	mov	r0, r4
 8003200:	f000 f980 	bl	8003504 <print>
			while(Terminal->TxStatus != Completed);
 8003204:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b03      	cmp	r3, #3
 800320c:	d1fa      	bne.n	8003204 <testScans+0x2ec>
		for(int i = 1; i <= 5; i+=4) {
 800320e:	3504      	adds	r5, #4
 8003210:	2d05      	cmp	r5, #5
 8003212:	ddd5      	ble.n	80031c0 <testScans+0x2a8>
 8003214:	2503      	movs	r5, #3
 8003216:	e067      	b.n	80032e8 <testScans+0x3d0>
 8003218:	20000380 	.word	0x20000380
 800321c:	200003c8 	.word	0x200003c8
 8003220:	08004f24 	.word	0x08004f24
 8003224:	08004f68 	.word	0x08004f68
 8003228:	08004fa8 	.word	0x08004fa8
 800322c:	08004fbc 	.word	0x08004fbc
 8003230:	08004ff0 	.word	0x08004ff0
 8003234:	08005000 	.word	0x08005000
 8003238:	0800507c 	.word	0x0800507c
 800323c:	0800508c 	.word	0x0800508c
 8003240:	08005094 	.word	0x08005094
 8003244:	08005104 	.word	0x08005104
 8003248:	08005118 	.word	0x08005118
 800324c:	0800512c 	.word	0x0800512c
 8003250:	08005180 	.word	0x08005180
 8003254:	08005194 	.word	0x08005194
 8003258:	080051a4 	.word	0x080051a4
 800325c:	080051e0 	.word	0x080051e0
 8003260:	08005204 	.word	0x08005204
 8003264:	08005218 	.word	0x08005218
 8003268:	08005220 	.word	0x08005220
 800326c:	08004d28 	.word	0x08004d28
 8003270:	08005230 	.word	0x08005230
 8003274:	08005274 	.word	0x08005274
 8003278:	08005014 	.word	0x08005014
 800327c:	0800504c 	.word	0x0800504c
 8003280:	08005064 	.word	0x08005064
 8003284:	080050a8 	.word	0x080050a8
 8003288:	0800513c 	.word	0x0800513c
 800328c:	08005178 	.word	0x08005178
 8003290:	0800518c 	.word	0x0800518c
 8003294:	080051e8 	.word	0x080051e8
		}
		for(int i = 3; i > 0; i-=2) {
			print_DMA(Terminal, "\n\rTest[usartRead_DMA]\r\n");
 8003298:	4918      	ldr	r1, [pc, #96]	; (80032fc <testScans+0x3e4>)
 800329a:	4620      	mov	r0, r4
 800329c:	f000 f95c 	bl	8003558 <print_DMA>
			while(Terminal->TxStatus != Completed);
 80032a0:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d1fa      	bne.n	80032a0 <testScans+0x388>
			print_DMA(Terminal,"\r[*****]Please enter EXACTLY %d letters\r\n\r>>>>>>> ",i);
 80032aa:	462a      	mov	r2, r5
 80032ac:	4914      	ldr	r1, [pc, #80]	; (8003300 <testScans+0x3e8>)
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 f952 	bl	8003558 <print_DMA>
			while(Terminal->TxStatus != Completed);
 80032b4:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d1fa      	bne.n	80032b4 <testScans+0x39c>
			str = usartRead_DMA(Terminal, i+1);
 80032be:	1c69      	adds	r1, r5, #1
 80032c0:	b289      	uxth	r1, r1
 80032c2:	4620      	mov	r0, r4
 80032c4:	f000 f9f0 	bl	80036a8 <usartRead_DMA>
 80032c8:	4602      	mov	r2, r0
			while(Terminal->RxStatus != Completed);
 80032ca:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d1fa      	bne.n	80032ca <testScans+0x3b2>
			print(Terminal,"\r[Echo]: %s\r\n",str);
 80032d4:	490b      	ldr	r1, [pc, #44]	; (8003304 <testScans+0x3ec>)
 80032d6:	4620      	mov	r0, r4
 80032d8:	f000 f914 	bl	8003504 <print>
			while(Terminal->TxStatus != Completed);
 80032dc:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d1fa      	bne.n	80032dc <testScans+0x3c4>
		for(int i = 3; i > 0; i-=2) {
 80032e6:	3d02      	subs	r5, #2
 80032e8:	2d00      	cmp	r5, #0
 80032ea:	dcd5      	bgt.n	8003298 <testScans+0x380>
		}
	printf_u("\r======================End==========================\r\n");
 80032ec:	4806      	ldr	r0, [pc, #24]	; (8003308 <testScans+0x3f0>)
 80032ee:	f000 f91d 	bl	800352c <printf_u>
}
 80032f2:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 80032f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	08005274 	.word	0x08005274
 8003300:	08004fbc 	.word	0x08004fbc
 8003304:	08004ff0 	.word	0x08004ff0
 8003308:	08004d28 	.word	0x08004d28

0800330c <testUsart>:
//Treat it as the main() of this tester file 
void testUsart(void) {
 800330c:	b508      	push	{r3, lr}
	 *#undef RxBuffer_Size
	 *#define TxBuffer_Size ???
     *#define RxBuffer_Size ???
	 *
	 *Replace ??? with the number of desire buffer sizes*/
	Led = newGPIO(&led_pin, LD2_GPIO_Port, LD2_Pin);
 800330e:	2220      	movs	r2, #32
 8003310:	4905      	ldr	r1, [pc, #20]	; (8003328 <testUsart+0x1c>)
 8003312:	4806      	ldr	r0, [pc, #24]	; (800332c <testUsart+0x20>)
 8003314:	f000 f828 	bl	8003368 <newGPIO>
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <testUsart+0x24>)
 800331a:	6018      	str	r0, [r3, #0]
	testPrints();
 800331c:	f7ff fcf8 	bl	8002d10 <testPrints>
	testScans();
 8003320:	f7ff fdfa 	bl	8002f18 <testScans>
 8003324:	bd08      	pop	{r3, pc}
 8003326:	bf00      	nop
 8003328:	40020000 	.word	0x40020000
 800332c:	200003c0 	.word	0x200003c0
 8003330:	200004a0 	.word	0x200004a0

08003334 <Exception_Handler>:
}
void Exception_Handler(const char* str) {
 8003334:	b510      	push	{r4, lr}
 8003336:	4604      	mov	r4, r0
	USART* Terminal = newUSART(&uart2, &huart2);
 8003338:	4904      	ldr	r1, [pc, #16]	; (800334c <Exception_Handler+0x18>)
 800333a:	4805      	ldr	r0, [pc, #20]	; (8003350 <Exception_Handler+0x1c>)
 800333c:	f000 f834 	bl	80033a8 <newUSART>
	print(Terminal, "\r%s\r\n",str);
 8003340:	4622      	mov	r2, r4
 8003342:	4904      	ldr	r1, [pc, #16]	; (8003354 <Exception_Handler+0x20>)
 8003344:	f000 f8de 	bl	8003504 <print>
 8003348:	bd10      	pop	{r4, pc}
 800334a:	bf00      	nop
 800334c:	20000380 	.word	0x20000380
 8003350:	200003c8 	.word	0x200003c8
 8003354:	0800508c 	.word	0x0800508c

08003358 <THL_main>:
#include "THL_main.h"
#include "THL_UsartTesters.h"
void THL_main(void) {
 8003358:	b508      	push	{r3, lr}
	testUsart();
 800335a:	f7ff ffd7 	bl	800330c <testUsart>
	delay(1000);
 800335e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003362:	f000 f816 	bl	8003392 <delay>
 8003366:	bd08      	pop	{r3, pc}

08003368 <newGPIO>:



/*========================SETUP AND DATA STRUCTURE========================*/
GPIO *newGPIO(GPIO* obj, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	obj->GPIO_Pin = GPIO_Pin;
 8003368:	8082      	strh	r2, [r0, #4]
	obj->GPIOx = GPIOx;
 800336a:	6001      	str	r1, [r0, #0]
	return obj;
}
 800336c:	4770      	bx	lr

0800336e <turnOn>:
}
/*=============================================================================*/


/*========================Convenience Purposed Methods========================*/
void turnOn(GPIO* obj) {
 800336e:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(obj->GPIOx, obj->GPIO_Pin, GPIO_PIN_SET);
 8003370:	2201      	movs	r2, #1
 8003372:	8881      	ldrh	r1, [r0, #4]
 8003374:	6800      	ldr	r0, [r0, #0]
 8003376:	f7fd fce5 	bl	8000d44 <HAL_GPIO_WritePin>
 800337a:	bd08      	pop	{r3, pc}

0800337c <turnOff>:
}

void turnOff(GPIO* obj) {
 800337c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(obj->GPIOx, obj->GPIO_Pin, GPIO_PIN_RESET);
 800337e:	2200      	movs	r2, #0
 8003380:	8881      	ldrh	r1, [r0, #4]
 8003382:	6800      	ldr	r0, [r0, #0]
 8003384:	f7fd fcde 	bl	8000d44 <HAL_GPIO_WritePin>
 8003388:	bd08      	pop	{r3, pc}

0800338a <millis>:
void delay(uint32_t Time) {
		uint32_t T_init = millis();
		while(millis() - T_init < Time);
}*/
#else
__weak uint32_t millis(void) {
 800338a:	b508      	push	{r3, lr}
		return HAL_GetTick();
 800338c:	f7fd f96c 	bl	8000668 <HAL_GetTick>
}
 8003390:	bd08      	pop	{r3, pc}

08003392 <delay>:
}
void delay_us(uint32_t Time) {
		uint32_t T_init = micros(); 
		while(micros() - T_init < Time); 
}
void delay(uint32_t Time) {
 8003392:	b538      	push	{r3, r4, r5, lr}
 8003394:	4605      	mov	r5, r0
		uint32_t T_init = millis(); 
 8003396:	f7ff fff8 	bl	800338a <millis>
 800339a:	4604      	mov	r4, r0
		while(millis() - T_init < Time); 
 800339c:	f7ff fff5 	bl	800338a <millis>
 80033a0:	1b00      	subs	r0, r0, r4
 80033a2:	42a8      	cmp	r0, r5
 80033a4:	d3fa      	bcc.n	800339c <delay+0xa>
}
 80033a6:	bd38      	pop	{r3, r4, r5, pc}

080033a8 <newUSART>:
  *The actual initiation of the usart circuit takes place by HAL 
  *before THL_Main.c gets called by main.c
  *Treated it as Pseudo-Constructor
  *Note: no memory allocation occurs
  */
USART *newUSART(USART* obj, UART_HandleTypeDef *huart) {
 80033a8:	b410      	push	{r4}
	obj->huart = huart;
 80033aa:	6001      	str	r1, [r0, #0]
	obj->TxTimeOut = Default_TxTimeOut;
 80033ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033b0:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	obj->RxTimeOut = Default_RxTimeOut;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
 80033b8:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
	obj->TxStatus = Ready;
 80033bc:	2301      	movs	r3, #1
 80033be:	f880 30d4 	strb.w	r3, [r0, #212]	; 0xd4
	obj->RxStatus = Ready;
 80033c2:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	for(int i = 0; i < numActiveUSARTs; i++) 
 80033c6:	2300      	movs	r3, #0
 80033c8:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <newUSART+0x54>)
 80033ca:	8812      	ldrh	r2, [r2, #0]
 80033cc:	4614      	mov	r4, r2
 80033ce:	4293      	cmp	r3, r2
 80033d0:	da0b      	bge.n	80033ea <newUSART+0x42>
		if(ActiveUSARTs[i]->huart == huart) {
 80033d2:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <newUSART+0x58>)
 80033d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	4291      	cmp	r1, r2
 80033dc:	d001      	beq.n	80033e2 <newUSART+0x3a>
	for(int i = 0; i < numActiveUSARTs; i++) 
 80033de:	3301      	adds	r3, #1
 80033e0:	e7f2      	b.n	80033c8 <newUSART+0x20>
			ActiveUSARTs[i] = obj;
 80033e2:	4a07      	ldr	r2, [pc, #28]	; (8003400 <newUSART+0x58>)
 80033e4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			return obj;
 80033e8:	e005      	b.n	80033f6 <newUSART+0x4e>
		}
	ActiveUSARTs[numActiveUSARTs++] = obj;
 80033ea:	3201      	adds	r2, #1
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <newUSART+0x54>)
 80033ee:	801a      	strh	r2, [r3, #0]
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <newUSART+0x58>)
 80033f2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	return obj;
}
 80033f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	200001f8 	.word	0x200001f8
 8003400:	2000057c 	.word	0x2000057c

08003404 <newMainUSART>:

/**Pseudo-Constructor for Default/Main USART
  *It sets the usart
  */
USART *newMainUSART(UART_HandleTypeDef *huart) { 
 8003404:	b508      	push	{r3, lr}
	return newUSART(&DefaultUSART, huart);
 8003406:	4601      	mov	r1, r0
 8003408:	4801      	ldr	r0, [pc, #4]	; (8003410 <newMainUSART+0xc>)
 800340a:	f7ff ffcd 	bl	80033a8 <newUSART>
}
 800340e:	bd08      	pop	{r3, pc}
 8003410:	200004a4 	.word	0x200004a4

08003414 <usartSend>:
/*=========================================================================*/



/*==============================Transmission===============================*/
void usartSend(USART* obj) {
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	4605      	mov	r5, r0
	HAL_StatusTypeDef Status;
	Status = HAL_UART_Transmit(obj->huart, (uint8_t*)obj->TxBuffer, strlen(obj->TxBuffer), obj->TxTimeOut);
 8003418:	4604      	mov	r4, r0
 800341a:	f854 6b04 	ldr.w	r6, [r4], #4
 800341e:	4620      	mov	r0, r4
 8003420:	f7fc fef6 	bl	8000210 <strlen>
 8003424:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
 8003428:	b282      	uxth	r2, r0
 800342a:	4621      	mov	r1, r4
 800342c:	4630      	mov	r0, r6
 800342e:	f7fe fe2e 	bl	800208e <HAL_UART_Transmit>
	if(Status == HAL_BUSY) obj->TxStatus = InProcess;
 8003432:	2802      	cmp	r0, #2
 8003434:	d008      	beq.n	8003448 <usartSend+0x34>
	else if(Status == HAL_TIMEOUT) {
 8003436:	2803      	cmp	r0, #3
 8003438:	d00a      	beq.n	8003450 <usartSend+0x3c>
		__HAL_UNLOCK(obj->huart);
		obj->huart->gState = HAL_UART_STATE_READY; 	
		
		throwException("THL_Usart.c: usartSend() | TimeOut");
	}
	else if(Status == HAL_ERROR) {
 800343a:	2801      	cmp	r0, #1
 800343c:	d017      	beq.n	800346e <usartSend+0x5a>
		obj->TxStatus = Error;
		throwException("THL_Usart.c: usartSend() | Error");
	}
	else if(Status == HAL_OK) obj->TxStatus = Completed;
 800343e:	b910      	cbnz	r0, 8003446 <usartSend+0x32>
 8003440:	2303      	movs	r3, #3
 8003442:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
 8003446:	bd70      	pop	{r4, r5, r6, pc}
	if(Status == HAL_BUSY) obj->TxStatus = InProcess;
 8003448:	2302      	movs	r3, #2
 800344a:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
 800344e:	bd70      	pop	{r4, r5, r6, pc}
		obj->TxStatus = TimeOut;
 8003450:	2304      	movs	r3, #4
 8003452:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
		__HAL_UNLOCK(obj->huart);
 8003456:	682b      	ldr	r3, [r5, #0]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		obj->huart->gState = HAL_UART_STATE_READY; 	
 800345e:	682b      	ldr	r3, [r5, #0]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		throwException("THL_Usart.c: usartSend() | TimeOut");
 8003466:	4805      	ldr	r0, [pc, #20]	; (800347c <usartSend+0x68>)
 8003468:	f000 fa0c 	bl	8003884 <throwException>
 800346c:	bd70      	pop	{r4, r5, r6, pc}
		obj->TxStatus = Error;
 800346e:	2305      	movs	r3, #5
 8003470:	f885 30d4 	strb.w	r3, [r5, #212]	; 0xd4
		throwException("THL_Usart.c: usartSend() | Error");
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <usartSend+0x6c>)
 8003476:	f000 fa05 	bl	8003884 <throwException>
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	08005324 	.word	0x08005324
 8003480:	08005348 	.word	0x08005348

08003484 <usartSend_DMA>:
}
void usartSend_DMA(USART* obj) {
	//check if the previous transmission is completed
	if(obj->TxStatus == InProcess) return;
 8003484:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d019      	beq.n	80034c2 <usartSend_DMA+0x3e>
void usartSend_DMA(USART* obj) {
 800348e:	b570      	push	{r4, r5, r6, lr}
 8003490:	4604      	mov	r4, r0
	HAL_StatusTypeDef Status;
	Status = HAL_UART_Transmit_DMA(obj->huart, (uint8_t*)obj->TxBuffer, strlen(obj->TxBuffer));
 8003492:	4605      	mov	r5, r0
 8003494:	f855 6b04 	ldr.w	r6, [r5], #4
 8003498:	4628      	mov	r0, r5
 800349a:	f7fc feb9 	bl	8000210 <strlen>
 800349e:	b282      	uxth	r2, r0
 80034a0:	4629      	mov	r1, r5
 80034a2:	4630      	mov	r0, r6
 80034a4:	f7fe fed8 	bl	8002258 <HAL_UART_Transmit_DMA>
	if(Status == HAL_ERROR) {
 80034a8:	2801      	cmp	r0, #1
 80034aa:	d003      	beq.n	80034b4 <usartSend_DMA+0x30>
		obj->TxStatus = Error;
		throwException("THL_Usart.c: usartSend_DMA() | Error");
		return;
	}
	obj->TxStatus = InProcess;
 80034ac:	2302      	movs	r3, #2
 80034ae:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
		obj->TxStatus = Error;
 80034b4:	2305      	movs	r3, #5
 80034b6:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
		throwException("THL_Usart.c: usartSend_DMA() | Error");
 80034ba:	4802      	ldr	r0, [pc, #8]	; (80034c4 <usartSend_DMA+0x40>)
 80034bc:	f000 f9e2 	bl	8003884 <throwException>
		return;
 80034c0:	bd70      	pop	{r4, r5, r6, pc}
 80034c2:	4770      	bx	lr
 80034c4:	0800536c 	.word	0x0800536c

080034c8 <HAL_UART_TxCpltCallback>:
} 
/** Interrupt handler call back function
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80034c8:	b538      	push	{r3, r4, r5, lr}
 80034ca:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveUSARTs; i++) {
 80034cc:	2400      	movs	r4, #0
 80034ce:	e000      	b.n	80034d2 <HAL_UART_TxCpltCallback+0xa>
 80034d0:	3401      	adds	r4, #1
 80034d2:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <HAL_UART_TxCpltCallback+0x34>)
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	429c      	cmp	r4, r3
 80034d8:	da0e      	bge.n	80034f8 <HAL_UART_TxCpltCallback+0x30>
		if(ActiveUSARTs[i]->huart == huart) {
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_UART_TxCpltCallback+0x38>)
 80034dc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80034e0:	6803      	ldr	r3, [r0, #0]
 80034e2:	42ab      	cmp	r3, r5
 80034e4:	d1f4      	bne.n	80034d0 <HAL_UART_TxCpltCallback+0x8>
			IT_CallBack_UsartTC(ActiveUSARTs[i]);
 80034e6:	f7ff fc0b 	bl	8002d00 <IT_CallBack_UsartTC>
			ActiveUSARTs[i]->TxStatus = Completed;
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_UART_TxCpltCallback+0x38>)
 80034ec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80034f0:	2203      	movs	r2, #3
 80034f2:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 80034f6:	e7eb      	b.n	80034d0 <HAL_UART_TxCpltCallback+0x8>
		}
	}
}
 80034f8:	bd38      	pop	{r3, r4, r5, pc}
 80034fa:	bf00      	nop
 80034fc:	200001f8 	.word	0x200001f8
 8003500:	2000057c 	.word	0x2000057c

08003504 <print>:
  */
__weak void IT_CallBack_UsartTC(USART* obj){
	 UNUSED(obj);
}

void print(USART* obj, Format_Param) {
 8003504:	b40e      	push	{r1, r2, r3}
 8003506:	b510      	push	{r4, lr}
 8003508:	b083      	sub	sp, #12
 800350a:	4604      	mov	r4, r0
 800350c:	aa05      	add	r2, sp, #20
 800350e:	f852 1b04 	ldr.w	r1, [r2], #4
	formatStrings(obj->TxBuffer);
 8003512:	9201      	str	r2, [sp, #4]
 8003514:	3004      	adds	r0, #4
 8003516:	f000 fa27 	bl	8003968 <vsiprintf>
	usartSend(obj);
 800351a:	4620      	mov	r0, r4
 800351c:	f7ff ff7a 	bl	8003414 <usartSend>
}
 8003520:	b003      	add	sp, #12
 8003522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003526:	b003      	add	sp, #12
 8003528:	4770      	bx	lr
	...

0800352c <printf_u>:
void printf_u(Format_Param) {
 800352c:	b40f      	push	{r0, r1, r2, r3}
 800352e:	b510      	push	{r4, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	aa04      	add	r2, sp, #16
 8003534:	f852 1b04 	ldr.w	r1, [r2], #4
	formatStrings(DefaultUSART.TxBuffer);
 8003538:	9201      	str	r2, [sp, #4]
 800353a:	4c06      	ldr	r4, [pc, #24]	; (8003554 <printf_u+0x28>)
 800353c:	4620      	mov	r0, r4
 800353e:	f000 fa13 	bl	8003968 <vsiprintf>
	usartSend(&DefaultUSART);
 8003542:	1f20      	subs	r0, r4, #4
 8003544:	f7ff ff66 	bl	8003414 <usartSend>
}
 8003548:	b002      	add	sp, #8
 800354a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800354e:	b004      	add	sp, #16
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	200004a8 	.word	0x200004a8

08003558 <print_DMA>:
/** Non-Blocking mode print with dma
  */
void print_DMA(USART* obj, Format_Param) {
 8003558:	b40e      	push	{r1, r2, r3}
 800355a:	b510      	push	{r4, lr}
 800355c:	b083      	sub	sp, #12
	//check if the previous transmission is completed
	if(obj->TxStatus == InProcess) return;
 800355e:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d009      	beq.n	800357c <print_DMA+0x24>
 8003568:	4604      	mov	r4, r0
	formatStrings(obj->TxBuffer);
 800356a:	aa06      	add	r2, sp, #24
 800356c:	9201      	str	r2, [sp, #4]
 800356e:	9905      	ldr	r1, [sp, #20]
 8003570:	3004      	adds	r0, #4
 8003572:	f000 f9f9 	bl	8003968 <vsiprintf>
	usartSend_DMA(obj);
 8003576:	4620      	mov	r0, r4
 8003578:	f7ff ff84 	bl	8003484 <usartSend_DMA>
}
 800357c:	b003      	add	sp, #12
 800357e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003582:	b003      	add	sp, #12
 8003584:	4770      	bx	lr
	...

08003588 <printf_DMA>:
void printf_DMA(Format_Param) {
 8003588:	b40f      	push	{r0, r1, r2, r3}
 800358a:	b510      	push	{r4, lr}
 800358c:	b082      	sub	sp, #8
	//check if the previous transmission is completed
	if(DefaultUSART.TxStatus == InProcess) return;
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <printf_DMA+0x30>)
 8003590:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d009      	beq.n	80035ae <printf_DMA+0x26>
	formatStrings(DefaultUSART.TxBuffer);
 800359a:	aa05      	add	r2, sp, #20
 800359c:	9201      	str	r2, [sp, #4]
 800359e:	4c07      	ldr	r4, [pc, #28]	; (80035bc <printf_DMA+0x34>)
 80035a0:	9904      	ldr	r1, [sp, #16]
 80035a2:	4620      	mov	r0, r4
 80035a4:	f000 f9e0 	bl	8003968 <vsiprintf>
	usartSend_DMA(&DefaultUSART);
 80035a8:	1f20      	subs	r0, r4, #4
 80035aa:	f7ff ff6b 	bl	8003484 <usartSend_DMA>
}
 80035ae:	b002      	add	sp, #8
 80035b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035b4:	b004      	add	sp, #16
 80035b6:	4770      	bx	lr
 80035b8:	200004a4 	.word	0x200004a4
 80035bc:	200004a8 	.word	0x200004a8

080035c0 <fastPrint>:
/** Blocking Mode print_dma 
  * printing with dma is 
  * generally faster than with CPU
  */
void fastPrint(USART* obj, const char*format, ...) {
 80035c0:	b40e      	push	{r1, r2, r3}
 80035c2:	b530      	push	{r4, r5, lr}
 80035c4:	4604      	mov	r4, r0
	print_DMA(obj, format);
 80035c6:	9903      	ldr	r1, [sp, #12]
 80035c8:	f7ff ffc6 	bl	8003558 <print_DMA>
	uint32_t fP_t0 = millis();
 80035cc:	f7ff fedd 	bl	800338a <millis>
 80035d0:	4605      	mov	r5, r0
	while(obj->TxStatus != Completed)
 80035d2:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d006      	beq.n	80035ea <fastPrint+0x2a>
		if(millis() - fP_t0 > obj->TxTimeOut) break;
 80035dc:	f7ff fed5 	bl	800338a <millis>
 80035e0:	1b40      	subs	r0, r0, r5
 80035e2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80035e6:	4298      	cmp	r0, r3
 80035e8:	d9f3      	bls.n	80035d2 <fastPrint+0x12>
}
 80035ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035ee:	b003      	add	sp, #12
 80035f0:	4770      	bx	lr
	...

080035f4 <fastPrintf>:
void fastPrintf(Format_Param) {
 80035f4:	b40f      	push	{r0, r1, r2, r3}
 80035f6:	b510      	push	{r4, lr}
	printf_DMA(format);
 80035f8:	9802      	ldr	r0, [sp, #8]
 80035fa:	f7ff ffc5 	bl	8003588 <printf_DMA>
	uint32_t fP_t0 = millis();
 80035fe:	f7ff fec4 	bl	800338a <millis>
 8003602:	4604      	mov	r4, r0
	while(DefaultUSART.TxStatus != Completed)
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <fastPrintf+0x34>)
 8003606:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b03      	cmp	r3, #3
 800360e:	d007      	beq.n	8003620 <fastPrintf+0x2c>
		if(millis() - fP_t0 > DefaultUSART.TxTimeOut) break;
 8003610:	f7ff febb 	bl	800338a <millis>
 8003614:	1b00      	subs	r0, r0, r4
 8003616:	4b04      	ldr	r3, [pc, #16]	; (8003628 <fastPrintf+0x34>)
 8003618:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800361c:	4298      	cmp	r0, r3
 800361e:	d9f1      	bls.n	8003604 <fastPrintf+0x10>
}
 8003620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003624:	b004      	add	sp, #16
 8003626:	4770      	bx	lr
 8003628:	200004a4 	.word	0x200004a4

0800362c <usartRead>:

/*=========================================================================*/


/*================================Reception================================*/
char* usartRead(USART* obj, uint16_t size) {
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	4605      	mov	r5, r0
 8003630:	460e      	mov	r6, r1
	HAL_StatusTypeDef Status;
	memset(obj->RxBuffer, 0, strlen(obj->RxBuffer));
 8003632:	f100 0468 	add.w	r4, r0, #104	; 0x68
 8003636:	4620      	mov	r0, r4
 8003638:	f7fc fdea 	bl	8000210 <strlen>
 800363c:	4602      	mov	r2, r0
 800363e:	2100      	movs	r1, #0
 8003640:	4620      	mov	r0, r4
 8003642:	f000 f971 	bl	8003928 <memset>
	Status = HAL_UART_Receive(obj->huart, (uint8_t*)obj->RxBuffer, size, obj->RxTimeOut);
 8003646:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 800364a:	4632      	mov	r2, r6
 800364c:	4621      	mov	r1, r4
 800364e:	6828      	ldr	r0, [r5, #0]
 8003650:	f7fe fd8e 	bl	8002170 <HAL_UART_Receive>
	if(Status == HAL_BUSY) obj->RxStatus = InProcess;
 8003654:	2802      	cmp	r0, #2
 8003656:	d009      	beq.n	800366c <usartRead+0x40>
	else if(Status == HAL_TIMEOUT) {
 8003658:	2803      	cmp	r0, #3
 800365a:	d00b      	beq.n	8003674 <usartRead+0x48>
		__HAL_UNLOCK(obj->huart);
		obj->huart->gState = HAL_UART_STATE_READY; 	
		
		throwException("THL_Usart.c: usartRead() | TimeOut");
	}
	else if(Status == HAL_ERROR) {
 800365c:	2801      	cmp	r0, #1
 800365e:	d018      	beq.n	8003692 <usartRead+0x66>
		obj->RxStatus = Error;
		throwException("THL_Usart.c: usartRead() | Error");
	}
	else if(Status == HAL_OK) obj->RxStatus = Completed;
 8003660:	b910      	cbnz	r0, 8003668 <usartRead+0x3c>
 8003662:	2303      	movs	r3, #3
 8003664:	f885 30d5 	strb.w	r3, [r5, #213]	; 0xd5
	return obj->RxBuffer;
}
 8003668:	4620      	mov	r0, r4
 800366a:	bd70      	pop	{r4, r5, r6, pc}
	if(Status == HAL_BUSY) obj->RxStatus = InProcess;
 800366c:	2302      	movs	r3, #2
 800366e:	f885 30d5 	strb.w	r3, [r5, #213]	; 0xd5
 8003672:	e7f9      	b.n	8003668 <usartRead+0x3c>
		obj->RxStatus = TimeOut;
 8003674:	2304      	movs	r3, #4
 8003676:	f885 30d5 	strb.w	r3, [r5, #213]	; 0xd5
		__HAL_UNLOCK(obj->huart);
 800367a:	682b      	ldr	r3, [r5, #0]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		obj->huart->gState = HAL_UART_STATE_READY; 	
 8003682:	682b      	ldr	r3, [r5, #0]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		throwException("THL_Usart.c: usartRead() | TimeOut");
 800368a:	4805      	ldr	r0, [pc, #20]	; (80036a0 <usartRead+0x74>)
 800368c:	f000 f8fa 	bl	8003884 <throwException>
 8003690:	e7ea      	b.n	8003668 <usartRead+0x3c>
		obj->RxStatus = Error;
 8003692:	2305      	movs	r3, #5
 8003694:	f885 30d5 	strb.w	r3, [r5, #213]	; 0xd5
		throwException("THL_Usart.c: usartRead() | Error");
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <usartRead+0x78>)
 800369a:	f000 f8f3 	bl	8003884 <throwException>
 800369e:	e7e3      	b.n	8003668 <usartRead+0x3c>
 80036a0:	080052b4 	.word	0x080052b4
 80036a4:	080052d8 	.word	0x080052d8

080036a8 <usartRead_DMA>:
char* usartRead_DMA(USART* obj, uint16_t size) {
	//check if the previous reception is completed
	if(obj->RxStatus == InProcess) return obj->RxBuffer;
 80036a8:	f890 30d5 	ldrb.w	r3, [r0, #213]	; 0xd5
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d018      	beq.n	80036e4 <usartRead_DMA+0x3c>
char* usartRead_DMA(USART* obj, uint16_t size) {
 80036b2:	b570      	push	{r4, r5, r6, lr}
 80036b4:	460e      	mov	r6, r1
 80036b6:	4604      	mov	r4, r0
	HAL_StatusTypeDef Status;
	memset(obj->RxBuffer, 0, strlen(obj->RxBuffer));
 80036b8:	f100 0568 	add.w	r5, r0, #104	; 0x68
 80036bc:	4628      	mov	r0, r5
 80036be:	f7fc fda7 	bl	8000210 <strlen>
 80036c2:	4602      	mov	r2, r0
 80036c4:	2100      	movs	r1, #0
 80036c6:	4628      	mov	r0, r5
 80036c8:	f000 f92e 	bl	8003928 <memset>
	Status = HAL_UART_Receive_DMA(obj->huart, (uint8_t*)obj->RxBuffer, size);
 80036cc:	4632      	mov	r2, r6
 80036ce:	4629      	mov	r1, r5
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	f7fe fe07 	bl	80022e4 <HAL_UART_Receive_DMA>
	if(Status == HAL_ERROR) {
 80036d6:	2801      	cmp	r0, #1
 80036d8:	d006      	beq.n	80036e8 <usartRead_DMA+0x40>
		obj->RxStatus = Error;
		throwException("THL_Usart.c: usartRead_DMA() | Error");
		return obj->RxBuffer;
	}
	obj->RxStatus = InProcess;
 80036da:	2302      	movs	r3, #2
 80036dc:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
	return obj->RxBuffer;
 80036e0:	4628      	mov	r0, r5
} 
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
	if(obj->RxStatus == InProcess) return obj->RxBuffer;
 80036e4:	3068      	adds	r0, #104	; 0x68
 80036e6:	4770      	bx	lr
		obj->RxStatus = Error;
 80036e8:	2305      	movs	r3, #5
 80036ea:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
		throwException("THL_Usart.c: usartRead_DMA() | Error");
 80036ee:	4802      	ldr	r0, [pc, #8]	; (80036f8 <usartRead_DMA+0x50>)
 80036f0:	f000 f8c8 	bl	8003884 <throwException>
		return obj->RxBuffer;
 80036f4:	4628      	mov	r0, r5
 80036f6:	bd70      	pop	{r4, r5, r6, pc}
 80036f8:	080052fc 	.word	0x080052fc

080036fc <IT_CallBack_UsartRC>:
			ActiveUSARTs[i]->RxStatus = Completed;
		}
	}
}

__weak void IT_CallBack_UsartRC(USART* obj){
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	4605      	mov	r5, r0
	for(int i = 0; i < numActiveUSARTs; i++) {
 8003704:	2400      	movs	r4, #0
 8003706:	e000      	b.n	800370a <HAL_UART_RxCpltCallback+0xa>
 8003708:	3401      	adds	r4, #1
 800370a:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <HAL_UART_RxCpltCallback+0x34>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	429c      	cmp	r4, r3
 8003710:	da0e      	bge.n	8003730 <HAL_UART_RxCpltCallback+0x30>
		if(ActiveUSARTs[i]->huart == huart) {
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_UART_RxCpltCallback+0x38>)
 8003714:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003718:	6803      	ldr	r3, [r0, #0]
 800371a:	42ab      	cmp	r3, r5
 800371c:	d1f4      	bne.n	8003708 <HAL_UART_RxCpltCallback+0x8>
			IT_CallBack_UsartRC(ActiveUSARTs[i]);
 800371e:	f7ff ffed 	bl	80036fc <IT_CallBack_UsartRC>
			ActiveUSARTs[i]->RxStatus = Completed;
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_UART_RxCpltCallback+0x38>)
 8003724:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003728:	2203      	movs	r2, #3
 800372a:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 800372e:	e7eb      	b.n	8003708 <HAL_UART_RxCpltCallback+0x8>
}
 8003730:	bd38      	pop	{r3, r4, r5, pc}
 8003732:	bf00      	nop
 8003734:	200001f8 	.word	0x200001f8
 8003738:	2000057c 	.word	0x2000057c

0800373c <readWord>:
	 UNUSED(obj);
}


void readWord(USART* obj, char* str) {
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	4606      	mov	r6, r0
 8003740:	460d      	mov	r5, r1
	int i = 0;
	str[i] = usartRead(obj, 1)[0];
 8003742:	2101      	movs	r1, #1
 8003744:	f7ff ff72 	bl	800362c <usartRead>
 8003748:	7803      	ldrb	r3, [r0, #0]
 800374a:	702b      	strb	r3, [r5, #0]
	int i = 0;
 800374c:	2400      	movs	r4, #0
	while(str[i] != ' ' && str[i] != '\r' && str[i] != '\n') 
 800374e:	e006      	b.n	800375e <readWord+0x22>
		str[++i] = usartRead(obj, 1)[0];
 8003750:	3401      	adds	r4, #1
 8003752:	2101      	movs	r1, #1
 8003754:	4630      	mov	r0, r6
 8003756:	f7ff ff69 	bl	800362c <usartRead>
 800375a:	7803      	ldrb	r3, [r0, #0]
 800375c:	552b      	strb	r3, [r5, r4]
	while(str[i] != ' ' && str[i] != '\r' && str[i] != '\n') 
 800375e:	192a      	adds	r2, r5, r4
 8003760:	5d2b      	ldrb	r3, [r5, r4]
 8003762:	2b20      	cmp	r3, #32
 8003764:	d003      	beq.n	800376e <readWord+0x32>
 8003766:	2b0d      	cmp	r3, #13
 8003768:	d001      	beq.n	800376e <readWord+0x32>
 800376a:	2b0a      	cmp	r3, #10
 800376c:	d1f0      	bne.n	8003750 <readWord+0x14>
	str[i] = '\0';
 800376e:	2300      	movs	r3, #0
 8003770:	7013      	strb	r3, [r2, #0]
 8003772:	bd70      	pop	{r4, r5, r6, pc}

08003774 <readLine>:
}
void readLine(USART* obj, char* str) {
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	4606      	mov	r6, r0
 8003778:	460d      	mov	r5, r1
	int i = 0;
	str[i] = usartRead(obj, 1)[0];
 800377a:	2101      	movs	r1, #1
 800377c:	f7ff ff56 	bl	800362c <usartRead>
 8003780:	7803      	ldrb	r3, [r0, #0]
 8003782:	702b      	strb	r3, [r5, #0]
	int i = 0;
 8003784:	2400      	movs	r4, #0
	while(str[i] != '\r' && str[i] != '\n') 
 8003786:	e006      	b.n	8003796 <readLine+0x22>
		str[++i] = usartRead(obj, 1)[0];
 8003788:	3401      	adds	r4, #1
 800378a:	2101      	movs	r1, #1
 800378c:	4630      	mov	r0, r6
 800378e:	f7ff ff4d 	bl	800362c <usartRead>
 8003792:	7803      	ldrb	r3, [r0, #0]
 8003794:	552b      	strb	r3, [r5, r4]
	while(str[i] != '\r' && str[i] != '\n') 
 8003796:	192a      	adds	r2, r5, r4
 8003798:	5d2b      	ldrb	r3, [r5, r4]
 800379a:	2b0d      	cmp	r3, #13
 800379c:	d001      	beq.n	80037a2 <readLine+0x2e>
 800379e:	2b0a      	cmp	r3, #10
 80037a0:	d1f2      	bne.n	8003788 <readLine+0x14>
	str[i] = '\0';
 80037a2:	2300      	movs	r3, #0
 80037a4:	7013      	strb	r3, [r2, #0]
 80037a6:	bd70      	pop	{r4, r5, r6, pc}

080037a8 <readWordf>:
}

void readWordf(char* str) {
 80037a8:	b538      	push	{r3, r4, r5, lr}
 80037aa:	4605      	mov	r5, r0
	int i = 0;
	str[i] = usartRead(&DefaultUSART, 1)[0];
 80037ac:	2101      	movs	r1, #1
 80037ae:	480c      	ldr	r0, [pc, #48]	; (80037e0 <readWordf+0x38>)
 80037b0:	f7ff ff3c 	bl	800362c <usartRead>
 80037b4:	7803      	ldrb	r3, [r0, #0]
 80037b6:	702b      	strb	r3, [r5, #0]
	int i = 0;
 80037b8:	2400      	movs	r4, #0
	while(str[i] != ' ' && str[i] != '\r' && str[i] != '\n') 
 80037ba:	e006      	b.n	80037ca <readWordf+0x22>
		str[++i] = usartRead(&DefaultUSART, 1)[0];
 80037bc:	3401      	adds	r4, #1
 80037be:	2101      	movs	r1, #1
 80037c0:	4807      	ldr	r0, [pc, #28]	; (80037e0 <readWordf+0x38>)
 80037c2:	f7ff ff33 	bl	800362c <usartRead>
 80037c6:	7803      	ldrb	r3, [r0, #0]
 80037c8:	552b      	strb	r3, [r5, r4]
	while(str[i] != ' ' && str[i] != '\r' && str[i] != '\n') 
 80037ca:	192a      	adds	r2, r5, r4
 80037cc:	5d2b      	ldrb	r3, [r5, r4]
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d003      	beq.n	80037da <readWordf+0x32>
 80037d2:	2b0d      	cmp	r3, #13
 80037d4:	d001      	beq.n	80037da <readWordf+0x32>
 80037d6:	2b0a      	cmp	r3, #10
 80037d8:	d1f0      	bne.n	80037bc <readWordf+0x14>
	str[i] = '\0';
 80037da:	2300      	movs	r3, #0
 80037dc:	7013      	strb	r3, [r2, #0]
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	200004a4 	.word	0x200004a4

080037e4 <readLinef>:
}
void readLinef(char* str) {
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	4605      	mov	r5, r0
	int i = 0;
	str[i] = usartRead(&DefaultUSART, 1)[0];
 80037e8:	2101      	movs	r1, #1
 80037ea:	480b      	ldr	r0, [pc, #44]	; (8003818 <readLinef+0x34>)
 80037ec:	f7ff ff1e 	bl	800362c <usartRead>
 80037f0:	7803      	ldrb	r3, [r0, #0]
 80037f2:	702b      	strb	r3, [r5, #0]
	int i = 0;
 80037f4:	2400      	movs	r4, #0
	while(str[i] != '\r' && str[i] != '\n') 
 80037f6:	e006      	b.n	8003806 <readLinef+0x22>
		str[++i] = usartRead(&DefaultUSART, 1)[0];
 80037f8:	3401      	adds	r4, #1
 80037fa:	2101      	movs	r1, #1
 80037fc:	4806      	ldr	r0, [pc, #24]	; (8003818 <readLinef+0x34>)
 80037fe:	f7ff ff15 	bl	800362c <usartRead>
 8003802:	7803      	ldrb	r3, [r0, #0]
 8003804:	552b      	strb	r3, [r5, r4]
	while(str[i] != '\r' && str[i] != '\n') 
 8003806:	192a      	adds	r2, r5, r4
 8003808:	5d2b      	ldrb	r3, [r5, r4]
 800380a:	2b0d      	cmp	r3, #13
 800380c:	d001      	beq.n	8003812 <readLinef+0x2e>
 800380e:	2b0a      	cmp	r3, #10
 8003810:	d1f2      	bne.n	80037f8 <readLinef+0x14>
	str[i] = '\0';
 8003812:	2300      	movs	r3, #0
 8003814:	7013      	strb	r3, [r2, #0]
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	200004a4 	.word	0x200004a4

0800381c <scan>:
}
int scan(USART* obj, Format_Param) {
 800381c:	b40e      	push	{r1, r2, r3}
 800381e:	b530      	push	{r4, r5, lr}
 8003820:	b09a      	sub	sp, #104	; 0x68
 8003822:	ac1d      	add	r4, sp, #116	; 0x74
 8003824:	f854 5b04 	ldr.w	r5, [r4], #4
	char scan_str[RxBuffer_Size];
	readLine(obj, scan_str);
 8003828:	a901      	add	r1, sp, #4
 800382a:	f7ff ffa3 	bl	8003774 <readLine>
	va_list args; 
    va_start(args, format); 
 800382e:	9400      	str	r4, [sp, #0]
	int rtn = vsscanf(scan_str, format, args);
 8003830:	4622      	mov	r2, r4
 8003832:	4629      	mov	r1, r5
 8003834:	a801      	add	r0, sp, #4
 8003836:	f000 f8c5 	bl	80039c4 <vsiscanf>
	va_end(args); 
	return rtn;
}
 800383a:	b01a      	add	sp, #104	; 0x68
 800383c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003840:	b003      	add	sp, #12
 8003842:	4770      	bx	lr

08003844 <scanf_u>:
/*Implement usart-scanf by overloading fgetc is quite troublesome,
 *while C is not oop and scanf() is not overwrite/overload-able, 
 *thus we provide scanf_u instead, use it as if you are using scanf.
 *Here, 'u' in scanf_u stands for usart.	
 */
int scanf_u(Format_Param) {
 8003844:	b40f      	push	{r0, r1, r2, r3}
 8003846:	b530      	push	{r4, r5, lr}
 8003848:	b09b      	sub	sp, #108	; 0x6c
 800384a:	ac1e      	add	r4, sp, #120	; 0x78
 800384c:	f854 5b04 	ldr.w	r5, [r4], #4
	char scanf_str[RxBuffer_Size];
	readLine(&DefaultUSART, scanf_str);
 8003850:	a901      	add	r1, sp, #4
 8003852:	4807      	ldr	r0, [pc, #28]	; (8003870 <scanf_u+0x2c>)
 8003854:	f7ff ff8e 	bl	8003774 <readLine>
	va_list args; 
    va_start(args, format); 
 8003858:	9400      	str	r4, [sp, #0]
	int rtn = vsscanf(scanf_str, format, args);
 800385a:	4622      	mov	r2, r4
 800385c:	4629      	mov	r1, r5
 800385e:	a801      	add	r0, sp, #4
 8003860:	f000 f8b0 	bl	80039c4 <vsiscanf>
	va_end(args); 
	return rtn;
}
 8003864:	b01b      	add	sp, #108	; 0x6c
 8003866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800386a:	b004      	add	sp, #16
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	200004a4 	.word	0x200004a4

08003874 <HAL_UART_ErrorCallback>:

/*=========================================================================*/



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003874:	b508      	push	{r3, lr}
	throwException("THL_Usart.c: HAL_UART_ErrorCallback()");
 8003876:	4802      	ldr	r0, [pc, #8]	; (8003880 <HAL_UART_ErrorCallback+0xc>)
 8003878:	f000 f804 	bl	8003884 <throwException>
 800387c:	bd08      	pop	{r3, pc}
 800387e:	bf00      	nop
 8003880:	0800528c 	.word	0x0800528c

08003884 <throwException>:

/*==========================Exception Handling==============================*/
__weak void Exception_Handler(const char* str) {
	UNUSED(str);
}
void throwException(const char* str) {
 8003884:	b508      	push	{r3, lr}
	Exception_Handler(str);
 8003886:	f7ff fd55 	bl	8003334 <Exception_Handler>
 800388a:	bd08      	pop	{r3, pc}

0800388c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800388c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003890:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003892:	e003      	b.n	800389c <LoopCopyDataInit>

08003894 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003896:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003898:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800389a:	3104      	adds	r1, #4

0800389c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800389c:	480b      	ldr	r0, [pc, #44]	; (80038cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038a4:	d3f6      	bcc.n	8003894 <CopyDataInit>
  ldr  r2, =_sbss
 80038a6:	4a0b      	ldr	r2, [pc, #44]	; (80038d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038a8:	e002      	b.n	80038b0 <LoopFillZerobss>

080038aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038ac:	f842 3b04 	str.w	r3, [r2], #4

080038b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038b4:	d3f9      	bcc.n	80038aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038b6:	f7ff f9fd 	bl	8002cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038ba:	f000 f811 	bl	80038e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038be:	f7ff f84b 	bl	8002958 <main>
  bx  lr    
 80038c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80038c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80038c8:	08005560 	.word	0x08005560
  ldr  r0, =_sdata
 80038cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038d0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80038d4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80038d8:	200005d0 	.word	0x200005d0

080038dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038dc:	e7fe      	b.n	80038dc <ADC_IRQHandler>
	...

080038e0 <__libc_init_array>:
 80038e0:	b570      	push	{r4, r5, r6, lr}
 80038e2:	4e0d      	ldr	r6, [pc, #52]	; (8003918 <__libc_init_array+0x38>)
 80038e4:	4c0d      	ldr	r4, [pc, #52]	; (800391c <__libc_init_array+0x3c>)
 80038e6:	1ba4      	subs	r4, r4, r6
 80038e8:	10a4      	asrs	r4, r4, #2
 80038ea:	2500      	movs	r5, #0
 80038ec:	42a5      	cmp	r5, r4
 80038ee:	d109      	bne.n	8003904 <__libc_init_array+0x24>
 80038f0:	4e0b      	ldr	r6, [pc, #44]	; (8003920 <__libc_init_array+0x40>)
 80038f2:	4c0c      	ldr	r4, [pc, #48]	; (8003924 <__libc_init_array+0x44>)
 80038f4:	f001 f93c 	bl	8004b70 <_init>
 80038f8:	1ba4      	subs	r4, r4, r6
 80038fa:	10a4      	asrs	r4, r4, #2
 80038fc:	2500      	movs	r5, #0
 80038fe:	42a5      	cmp	r5, r4
 8003900:	d105      	bne.n	800390e <__libc_init_array+0x2e>
 8003902:	bd70      	pop	{r4, r5, r6, pc}
 8003904:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003908:	4798      	blx	r3
 800390a:	3501      	adds	r5, #1
 800390c:	e7ee      	b.n	80038ec <__libc_init_array+0xc>
 800390e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003912:	4798      	blx	r3
 8003914:	3501      	adds	r5, #1
 8003916:	e7f2      	b.n	80038fe <__libc_init_array+0x1e>
 8003918:	08005558 	.word	0x08005558
 800391c:	08005558 	.word	0x08005558
 8003920:	08005558 	.word	0x08005558
 8003924:	0800555c 	.word	0x0800555c

08003928 <memset>:
 8003928:	4402      	add	r2, r0
 800392a:	4603      	mov	r3, r0
 800392c:	4293      	cmp	r3, r2
 800392e:	d100      	bne.n	8003932 <memset+0xa>
 8003930:	4770      	bx	lr
 8003932:	f803 1b01 	strb.w	r1, [r3], #1
 8003936:	e7f9      	b.n	800392c <memset+0x4>

08003938 <_vsiprintf_r>:
 8003938:	b510      	push	{r4, lr}
 800393a:	b09a      	sub	sp, #104	; 0x68
 800393c:	f44f 7402 	mov.w	r4, #520	; 0x208
 8003940:	9100      	str	r1, [sp, #0]
 8003942:	9104      	str	r1, [sp, #16]
 8003944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003948:	9102      	str	r1, [sp, #8]
 800394a:	9105      	str	r1, [sp, #20]
 800394c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003950:	f8ad 100e 	strh.w	r1, [sp, #14]
 8003954:	4669      	mov	r1, sp
 8003956:	f8ad 400c 	strh.w	r4, [sp, #12]
 800395a:	f000 f899 	bl	8003a90 <_svfiprintf_r>
 800395e:	9b00      	ldr	r3, [sp, #0]
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	b01a      	add	sp, #104	; 0x68
 8003966:	bd10      	pop	{r4, pc}

08003968 <vsiprintf>:
 8003968:	4613      	mov	r3, r2
 800396a:	460a      	mov	r2, r1
 800396c:	4601      	mov	r1, r0
 800396e:	4802      	ldr	r0, [pc, #8]	; (8003978 <vsiprintf+0x10>)
 8003970:	6800      	ldr	r0, [r0, #0]
 8003972:	f7ff bfe1 	b.w	8003938 <_vsiprintf_r>
 8003976:	bf00      	nop
 8003978:	2000000c 	.word	0x2000000c

0800397c <_vsiscanf_r>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	b09a      	sub	sp, #104	; 0x68
 8003980:	4604      	mov	r4, r0
 8003982:	461e      	mov	r6, r3
 8003984:	4608      	mov	r0, r1
 8003986:	f44f 7301 	mov.w	r3, #516	; 0x204
 800398a:	4615      	mov	r5, r2
 800398c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003990:	9100      	str	r1, [sp, #0]
 8003992:	9104      	str	r1, [sp, #16]
 8003994:	f7fc fc3c 	bl	8000210 <strlen>
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <_vsiscanf_r+0x44>)
 800399a:	9309      	str	r3, [sp, #36]	; 0x24
 800399c:	2100      	movs	r1, #0
 800399e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a2:	9001      	str	r0, [sp, #4]
 80039a4:	9005      	str	r0, [sp, #20]
 80039a6:	910d      	str	r1, [sp, #52]	; 0x34
 80039a8:	9112      	str	r1, [sp, #72]	; 0x48
 80039aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80039ae:	462a      	mov	r2, r5
 80039b0:	4633      	mov	r3, r6
 80039b2:	4669      	mov	r1, sp
 80039b4:	4620      	mov	r0, r4
 80039b6:	f000 f9b9 	bl	8003d2c <__ssvfiscanf_r>
 80039ba:	b01a      	add	sp, #104	; 0x68
 80039bc:	bd70      	pop	{r4, r5, r6, pc}
 80039be:	bf00      	nop
 80039c0:	08004611 	.word	0x08004611

080039c4 <vsiscanf>:
 80039c4:	4613      	mov	r3, r2
 80039c6:	460a      	mov	r2, r1
 80039c8:	4601      	mov	r1, r0
 80039ca:	4802      	ldr	r0, [pc, #8]	; (80039d4 <vsiscanf+0x10>)
 80039cc:	6800      	ldr	r0, [r0, #0]
 80039ce:	f7ff bfd5 	b.w	800397c <_vsiscanf_r>
 80039d2:	bf00      	nop
 80039d4:	2000000c 	.word	0x2000000c

080039d8 <__ssputs_r>:
 80039d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039dc:	688e      	ldr	r6, [r1, #8]
 80039de:	429e      	cmp	r6, r3
 80039e0:	4682      	mov	sl, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	4691      	mov	r9, r2
 80039e6:	4698      	mov	r8, r3
 80039e8:	d835      	bhi.n	8003a56 <__ssputs_r+0x7e>
 80039ea:	898a      	ldrh	r2, [r1, #12]
 80039ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039f0:	d031      	beq.n	8003a56 <__ssputs_r+0x7e>
 80039f2:	6825      	ldr	r5, [r4, #0]
 80039f4:	6909      	ldr	r1, [r1, #16]
 80039f6:	1a6f      	subs	r7, r5, r1
 80039f8:	6965      	ldr	r5, [r4, #20]
 80039fa:	2302      	movs	r3, #2
 80039fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a00:	fb95 f5f3 	sdiv	r5, r5, r3
 8003a04:	f108 0301 	add.w	r3, r8, #1
 8003a08:	443b      	add	r3, r7
 8003a0a:	429d      	cmp	r5, r3
 8003a0c:	bf38      	it	cc
 8003a0e:	461d      	movcc	r5, r3
 8003a10:	0553      	lsls	r3, r2, #21
 8003a12:	d531      	bpl.n	8003a78 <__ssputs_r+0xa0>
 8003a14:	4629      	mov	r1, r5
 8003a16:	f000 fff1 	bl	80049fc <_malloc_r>
 8003a1a:	4606      	mov	r6, r0
 8003a1c:	b950      	cbnz	r0, 8003a34 <__ssputs_r+0x5c>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	f8ca 3000 	str.w	r3, [sl]
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a2a:	81a3      	strh	r3, [r4, #12]
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a34:	463a      	mov	r2, r7
 8003a36:	6921      	ldr	r1, [r4, #16]
 8003a38:	f000 ff6c 	bl	8004914 <memcpy>
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a46:	81a3      	strh	r3, [r4, #12]
 8003a48:	6126      	str	r6, [r4, #16]
 8003a4a:	6165      	str	r5, [r4, #20]
 8003a4c:	443e      	add	r6, r7
 8003a4e:	1bed      	subs	r5, r5, r7
 8003a50:	6026      	str	r6, [r4, #0]
 8003a52:	60a5      	str	r5, [r4, #8]
 8003a54:	4646      	mov	r6, r8
 8003a56:	4546      	cmp	r6, r8
 8003a58:	bf28      	it	cs
 8003a5a:	4646      	movcs	r6, r8
 8003a5c:	4632      	mov	r2, r6
 8003a5e:	4649      	mov	r1, r9
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	f000 ff62 	bl	800492a <memmove>
 8003a66:	68a3      	ldr	r3, [r4, #8]
 8003a68:	1b9b      	subs	r3, r3, r6
 8003a6a:	60a3      	str	r3, [r4, #8]
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	441e      	add	r6, r3
 8003a70:	6026      	str	r6, [r4, #0]
 8003a72:	2000      	movs	r0, #0
 8003a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a78:	462a      	mov	r2, r5
 8003a7a:	f001 f81d 	bl	8004ab8 <_realloc_r>
 8003a7e:	4606      	mov	r6, r0
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d1e1      	bne.n	8003a48 <__ssputs_r+0x70>
 8003a84:	6921      	ldr	r1, [r4, #16]
 8003a86:	4650      	mov	r0, sl
 8003a88:	f000 ff6a 	bl	8004960 <_free_r>
 8003a8c:	e7c7      	b.n	8003a1e <__ssputs_r+0x46>
	...

08003a90 <_svfiprintf_r>:
 8003a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a94:	b09d      	sub	sp, #116	; 0x74
 8003a96:	4680      	mov	r8, r0
 8003a98:	9303      	str	r3, [sp, #12]
 8003a9a:	898b      	ldrh	r3, [r1, #12]
 8003a9c:	061c      	lsls	r4, r3, #24
 8003a9e:	460d      	mov	r5, r1
 8003aa0:	4616      	mov	r6, r2
 8003aa2:	d50f      	bpl.n	8003ac4 <_svfiprintf_r+0x34>
 8003aa4:	690b      	ldr	r3, [r1, #16]
 8003aa6:	b96b      	cbnz	r3, 8003ac4 <_svfiprintf_r+0x34>
 8003aa8:	2140      	movs	r1, #64	; 0x40
 8003aaa:	f000 ffa7 	bl	80049fc <_malloc_r>
 8003aae:	6028      	str	r0, [r5, #0]
 8003ab0:	6128      	str	r0, [r5, #16]
 8003ab2:	b928      	cbnz	r0, 8003ac0 <_svfiprintf_r+0x30>
 8003ab4:	230c      	movs	r3, #12
 8003ab6:	f8c8 3000 	str.w	r3, [r8]
 8003aba:	f04f 30ff 	mov.w	r0, #4294967295
 8003abe:	e0c5      	b.n	8003c4c <_svfiprintf_r+0x1bc>
 8003ac0:	2340      	movs	r3, #64	; 0x40
 8003ac2:	616b      	str	r3, [r5, #20]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac8:	2320      	movs	r3, #32
 8003aca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ace:	2330      	movs	r3, #48	; 0x30
 8003ad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ad4:	f04f 0b01 	mov.w	fp, #1
 8003ad8:	4637      	mov	r7, r6
 8003ada:	463c      	mov	r4, r7
 8003adc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d13c      	bne.n	8003b5e <_svfiprintf_r+0xce>
 8003ae4:	ebb7 0a06 	subs.w	sl, r7, r6
 8003ae8:	d00b      	beq.n	8003b02 <_svfiprintf_r+0x72>
 8003aea:	4653      	mov	r3, sl
 8003aec:	4632      	mov	r2, r6
 8003aee:	4629      	mov	r1, r5
 8003af0:	4640      	mov	r0, r8
 8003af2:	f7ff ff71 	bl	80039d8 <__ssputs_r>
 8003af6:	3001      	adds	r0, #1
 8003af8:	f000 80a3 	beq.w	8003c42 <_svfiprintf_r+0x1b2>
 8003afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003afe:	4453      	add	r3, sl
 8003b00:	9309      	str	r3, [sp, #36]	; 0x24
 8003b02:	783b      	ldrb	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 809c 	beq.w	8003c42 <_svfiprintf_r+0x1b2>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b10:	9304      	str	r3, [sp, #16]
 8003b12:	9307      	str	r3, [sp, #28]
 8003b14:	9205      	str	r2, [sp, #20]
 8003b16:	9306      	str	r3, [sp, #24]
 8003b18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8003b1e:	2205      	movs	r2, #5
 8003b20:	7821      	ldrb	r1, [r4, #0]
 8003b22:	4850      	ldr	r0, [pc, #320]	; (8003c64 <_svfiprintf_r+0x1d4>)
 8003b24:	f7fc fb7c 	bl	8000220 <memchr>
 8003b28:	1c67      	adds	r7, r4, #1
 8003b2a:	9b04      	ldr	r3, [sp, #16]
 8003b2c:	b9d8      	cbnz	r0, 8003b66 <_svfiprintf_r+0xd6>
 8003b2e:	06d9      	lsls	r1, r3, #27
 8003b30:	bf44      	itt	mi
 8003b32:	2220      	movmi	r2, #32
 8003b34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b38:	071a      	lsls	r2, r3, #28
 8003b3a:	bf44      	itt	mi
 8003b3c:	222b      	movmi	r2, #43	; 0x2b
 8003b3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b42:	7822      	ldrb	r2, [r4, #0]
 8003b44:	2a2a      	cmp	r2, #42	; 0x2a
 8003b46:	d016      	beq.n	8003b76 <_svfiprintf_r+0xe6>
 8003b48:	9a07      	ldr	r2, [sp, #28]
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	200a      	movs	r0, #10
 8003b4e:	4627      	mov	r7, r4
 8003b50:	3401      	adds	r4, #1
 8003b52:	783b      	ldrb	r3, [r7, #0]
 8003b54:	3b30      	subs	r3, #48	; 0x30
 8003b56:	2b09      	cmp	r3, #9
 8003b58:	d951      	bls.n	8003bfe <_svfiprintf_r+0x16e>
 8003b5a:	b1c9      	cbz	r1, 8003b90 <_svfiprintf_r+0x100>
 8003b5c:	e011      	b.n	8003b82 <_svfiprintf_r+0xf2>
 8003b5e:	2b25      	cmp	r3, #37	; 0x25
 8003b60:	d0c0      	beq.n	8003ae4 <_svfiprintf_r+0x54>
 8003b62:	4627      	mov	r7, r4
 8003b64:	e7b9      	b.n	8003ada <_svfiprintf_r+0x4a>
 8003b66:	4a3f      	ldr	r2, [pc, #252]	; (8003c64 <_svfiprintf_r+0x1d4>)
 8003b68:	1a80      	subs	r0, r0, r2
 8003b6a:	fa0b f000 	lsl.w	r0, fp, r0
 8003b6e:	4318      	orrs	r0, r3
 8003b70:	9004      	str	r0, [sp, #16]
 8003b72:	463c      	mov	r4, r7
 8003b74:	e7d3      	b.n	8003b1e <_svfiprintf_r+0x8e>
 8003b76:	9a03      	ldr	r2, [sp, #12]
 8003b78:	1d11      	adds	r1, r2, #4
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	9103      	str	r1, [sp, #12]
 8003b7e:	2a00      	cmp	r2, #0
 8003b80:	db01      	blt.n	8003b86 <_svfiprintf_r+0xf6>
 8003b82:	9207      	str	r2, [sp, #28]
 8003b84:	e004      	b.n	8003b90 <_svfiprintf_r+0x100>
 8003b86:	4252      	negs	r2, r2
 8003b88:	f043 0302 	orr.w	r3, r3, #2
 8003b8c:	9207      	str	r2, [sp, #28]
 8003b8e:	9304      	str	r3, [sp, #16]
 8003b90:	783b      	ldrb	r3, [r7, #0]
 8003b92:	2b2e      	cmp	r3, #46	; 0x2e
 8003b94:	d10e      	bne.n	8003bb4 <_svfiprintf_r+0x124>
 8003b96:	787b      	ldrb	r3, [r7, #1]
 8003b98:	2b2a      	cmp	r3, #42	; 0x2a
 8003b9a:	f107 0101 	add.w	r1, r7, #1
 8003b9e:	d132      	bne.n	8003c06 <_svfiprintf_r+0x176>
 8003ba0:	9b03      	ldr	r3, [sp, #12]
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	9203      	str	r2, [sp, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bfb8      	it	lt
 8003bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bb0:	3702      	adds	r7, #2
 8003bb2:	9305      	str	r3, [sp, #20]
 8003bb4:	4c2c      	ldr	r4, [pc, #176]	; (8003c68 <_svfiprintf_r+0x1d8>)
 8003bb6:	7839      	ldrb	r1, [r7, #0]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f7fc fb30 	bl	8000220 <memchr>
 8003bc0:	b138      	cbz	r0, 8003bd2 <_svfiprintf_r+0x142>
 8003bc2:	2340      	movs	r3, #64	; 0x40
 8003bc4:	1b00      	subs	r0, r0, r4
 8003bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8003bca:	9b04      	ldr	r3, [sp, #16]
 8003bcc:	4303      	orrs	r3, r0
 8003bce:	9304      	str	r3, [sp, #16]
 8003bd0:	3701      	adds	r7, #1
 8003bd2:	7839      	ldrb	r1, [r7, #0]
 8003bd4:	4825      	ldr	r0, [pc, #148]	; (8003c6c <_svfiprintf_r+0x1dc>)
 8003bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bda:	2206      	movs	r2, #6
 8003bdc:	1c7e      	adds	r6, r7, #1
 8003bde:	f7fc fb1f 	bl	8000220 <memchr>
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d035      	beq.n	8003c52 <_svfiprintf_r+0x1c2>
 8003be6:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <_svfiprintf_r+0x1e0>)
 8003be8:	b9fb      	cbnz	r3, 8003c2a <_svfiprintf_r+0x19a>
 8003bea:	9b03      	ldr	r3, [sp, #12]
 8003bec:	3307      	adds	r3, #7
 8003bee:	f023 0307 	bic.w	r3, r3, #7
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	9303      	str	r3, [sp, #12]
 8003bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bf8:	444b      	add	r3, r9
 8003bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8003bfc:	e76c      	b.n	8003ad8 <_svfiprintf_r+0x48>
 8003bfe:	fb00 3202 	mla	r2, r0, r2, r3
 8003c02:	2101      	movs	r1, #1
 8003c04:	e7a3      	b.n	8003b4e <_svfiprintf_r+0xbe>
 8003c06:	2300      	movs	r3, #0
 8003c08:	9305      	str	r3, [sp, #20]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	240a      	movs	r4, #10
 8003c0e:	460f      	mov	r7, r1
 8003c10:	3101      	adds	r1, #1
 8003c12:	783a      	ldrb	r2, [r7, #0]
 8003c14:	3a30      	subs	r2, #48	; 0x30
 8003c16:	2a09      	cmp	r2, #9
 8003c18:	d903      	bls.n	8003c22 <_svfiprintf_r+0x192>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ca      	beq.n	8003bb4 <_svfiprintf_r+0x124>
 8003c1e:	9005      	str	r0, [sp, #20]
 8003c20:	e7c8      	b.n	8003bb4 <_svfiprintf_r+0x124>
 8003c22:	fb04 2000 	mla	r0, r4, r0, r2
 8003c26:	2301      	movs	r3, #1
 8003c28:	e7f1      	b.n	8003c0e <_svfiprintf_r+0x17e>
 8003c2a:	ab03      	add	r3, sp, #12
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	462a      	mov	r2, r5
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <_svfiprintf_r+0x1e4>)
 8003c32:	a904      	add	r1, sp, #16
 8003c34:	4640      	mov	r0, r8
 8003c36:	f3af 8000 	nop.w
 8003c3a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c3e:	4681      	mov	r9, r0
 8003c40:	d1d9      	bne.n	8003bf6 <_svfiprintf_r+0x166>
 8003c42:	89ab      	ldrh	r3, [r5, #12]
 8003c44:	065b      	lsls	r3, r3, #25
 8003c46:	f53f af38 	bmi.w	8003aba <_svfiprintf_r+0x2a>
 8003c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c4c:	b01d      	add	sp, #116	; 0x74
 8003c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c52:	ab03      	add	r3, sp, #12
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	462a      	mov	r2, r5
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <_svfiprintf_r+0x1e4>)
 8003c5a:	a904      	add	r1, sp, #16
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	f000 fa2f 	bl	80040c0 <_printf_i>
 8003c62:	e7ea      	b.n	8003c3a <_svfiprintf_r+0x1aa>
 8003c64:	08005394 	.word	0x08005394
 8003c68:	0800539a 	.word	0x0800539a
 8003c6c:	0800539e 	.word	0x0800539e
 8003c70:	00000000 	.word	0x00000000
 8003c74:	080039d9 	.word	0x080039d9

08003c78 <_sungetc_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	1c4b      	adds	r3, r1, #1
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	d103      	bne.n	8003c88 <_sungetc_r+0x10>
 8003c80:	f04f 35ff 	mov.w	r5, #4294967295
 8003c84:	4628      	mov	r0, r5
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
 8003c88:	8993      	ldrh	r3, [r2, #12]
 8003c8a:	f023 0320 	bic.w	r3, r3, #32
 8003c8e:	8193      	strh	r3, [r2, #12]
 8003c90:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003c92:	6852      	ldr	r2, [r2, #4]
 8003c94:	b2cd      	uxtb	r5, r1
 8003c96:	b18b      	cbz	r3, 8003cbc <_sungetc_r+0x44>
 8003c98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	da08      	bge.n	8003cb0 <_sungetc_r+0x38>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	1e5a      	subs	r2, r3, #1
 8003ca2:	6022      	str	r2, [r4, #0]
 8003ca4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	3301      	adds	r3, #1
 8003cac:	6063      	str	r3, [r4, #4]
 8003cae:	e7e9      	b.n	8003c84 <_sungetc_r+0xc>
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	f000 fdd1 	bl	8004858 <__submore>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d0f1      	beq.n	8003c9e <_sungetc_r+0x26>
 8003cba:	e7e1      	b.n	8003c80 <_sungetc_r+0x8>
 8003cbc:	6921      	ldr	r1, [r4, #16]
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	b151      	cbz	r1, 8003cd8 <_sungetc_r+0x60>
 8003cc2:	4299      	cmp	r1, r3
 8003cc4:	d208      	bcs.n	8003cd8 <_sungetc_r+0x60>
 8003cc6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003cca:	428d      	cmp	r5, r1
 8003ccc:	d104      	bne.n	8003cd8 <_sungetc_r+0x60>
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	3201      	adds	r2, #1
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	6062      	str	r2, [r4, #4]
 8003cd6:	e7d5      	b.n	8003c84 <_sungetc_r+0xc>
 8003cd8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003cda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cde:	6363      	str	r3, [r4, #52]	; 0x34
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	63a3      	str	r3, [r4, #56]	; 0x38
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	6422      	str	r2, [r4, #64]	; 0x40
 8003ce8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e7dc      	b.n	8003cac <_sungetc_r+0x34>

08003cf2 <__ssrefill_r>:
 8003cf2:	b510      	push	{r4, lr}
 8003cf4:	460c      	mov	r4, r1
 8003cf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003cf8:	b169      	cbz	r1, 8003d16 <__ssrefill_r+0x24>
 8003cfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	d001      	beq.n	8003d06 <__ssrefill_r+0x14>
 8003d02:	f000 fe2d 	bl	8004960 <_free_r>
 8003d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d08:	6063      	str	r3, [r4, #4]
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8003d0e:	b113      	cbz	r3, 8003d16 <__ssrefill_r+0x24>
 8003d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d12:	6023      	str	r3, [r4, #0]
 8003d14:	bd10      	pop	{r4, pc}
 8003d16:	6923      	ldr	r3, [r4, #16]
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	6063      	str	r3, [r4, #4]
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	f043 0320 	orr.w	r3, r3, #32
 8003d24:	81a3      	strh	r3, [r4, #12]
 8003d26:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2a:	bd10      	pop	{r4, pc}

08003d2c <__ssvfiscanf_r>:
 8003d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d30:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8003d34:	f10d 080c 	add.w	r8, sp, #12
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9346      	str	r3, [sp, #280]	; 0x118
 8003d3e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003d40:	4ba0      	ldr	r3, [pc, #640]	; (8003fc4 <__ssvfiscanf_r+0x298>)
 8003d42:	93a2      	str	r3, [sp, #648]	; 0x288
 8003d44:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8003fcc <__ssvfiscanf_r+0x2a0>
 8003d48:	4b9f      	ldr	r3, [pc, #636]	; (8003fc8 <__ssvfiscanf_r+0x29c>)
 8003d4a:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8003d4e:	4606      	mov	r6, r0
 8003d50:	460c      	mov	r4, r1
 8003d52:	93a3      	str	r3, [sp, #652]	; 0x28c
 8003d54:	4692      	mov	sl, r2
 8003d56:	270a      	movs	r7, #10
 8003d58:	f89a 3000 	ldrb.w	r3, [sl]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 812f 	beq.w	8003fc0 <__ssvfiscanf_r+0x294>
 8003d62:	f000 fdb7 	bl	80048d4 <__locale_ctype_ptr>
 8003d66:	f89a b000 	ldrb.w	fp, [sl]
 8003d6a:	4458      	add	r0, fp
 8003d6c:	7843      	ldrb	r3, [r0, #1]
 8003d6e:	f013 0308 	ands.w	r3, r3, #8
 8003d72:	d143      	bne.n	8003dfc <__ssvfiscanf_r+0xd0>
 8003d74:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8003d78:	f10a 0501 	add.w	r5, sl, #1
 8003d7c:	f040 8099 	bne.w	8003eb2 <__ssvfiscanf_r+0x186>
 8003d80:	9345      	str	r3, [sp, #276]	; 0x114
 8003d82:	9343      	str	r3, [sp, #268]	; 0x10c
 8003d84:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003d88:	2b2a      	cmp	r3, #42	; 0x2a
 8003d8a:	d103      	bne.n	8003d94 <__ssvfiscanf_r+0x68>
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	9343      	str	r3, [sp, #268]	; 0x10c
 8003d90:	f10a 0502 	add.w	r5, sl, #2
 8003d94:	7829      	ldrb	r1, [r5, #0]
 8003d96:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003d9a:	2a09      	cmp	r2, #9
 8003d9c:	46aa      	mov	sl, r5
 8003d9e:	f105 0501 	add.w	r5, r5, #1
 8003da2:	d941      	bls.n	8003e28 <__ssvfiscanf_r+0xfc>
 8003da4:	2203      	movs	r2, #3
 8003da6:	4889      	ldr	r0, [pc, #548]	; (8003fcc <__ssvfiscanf_r+0x2a0>)
 8003da8:	f7fc fa3a 	bl	8000220 <memchr>
 8003dac:	b138      	cbz	r0, 8003dbe <__ssvfiscanf_r+0x92>
 8003dae:	eba0 0309 	sub.w	r3, r0, r9
 8003db2:	2001      	movs	r0, #1
 8003db4:	4098      	lsls	r0, r3
 8003db6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003db8:	4318      	orrs	r0, r3
 8003dba:	9043      	str	r0, [sp, #268]	; 0x10c
 8003dbc:	46aa      	mov	sl, r5
 8003dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8003dc2:	2b67      	cmp	r3, #103	; 0x67
 8003dc4:	f10a 0501 	add.w	r5, sl, #1
 8003dc8:	d84a      	bhi.n	8003e60 <__ssvfiscanf_r+0x134>
 8003dca:	2b65      	cmp	r3, #101	; 0x65
 8003dcc:	f080 80b7 	bcs.w	8003f3e <__ssvfiscanf_r+0x212>
 8003dd0:	2b47      	cmp	r3, #71	; 0x47
 8003dd2:	d82f      	bhi.n	8003e34 <__ssvfiscanf_r+0x108>
 8003dd4:	2b45      	cmp	r3, #69	; 0x45
 8003dd6:	f080 80b2 	bcs.w	8003f3e <__ssvfiscanf_r+0x212>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8082 	beq.w	8003ee4 <__ssvfiscanf_r+0x1b8>
 8003de0:	2b25      	cmp	r3, #37	; 0x25
 8003de2:	d066      	beq.n	8003eb2 <__ssvfiscanf_r+0x186>
 8003de4:	2303      	movs	r3, #3
 8003de6:	9349      	str	r3, [sp, #292]	; 0x124
 8003de8:	9744      	str	r7, [sp, #272]	; 0x110
 8003dea:	e045      	b.n	8003e78 <__ssvfiscanf_r+0x14c>
 8003dec:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8003dee:	3101      	adds	r1, #1
 8003df0:	9147      	str	r1, [sp, #284]	; 0x11c
 8003df2:	6861      	ldr	r1, [r4, #4]
 8003df4:	3301      	adds	r3, #1
 8003df6:	3901      	subs	r1, #1
 8003df8:	6061      	str	r1, [r4, #4]
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	6863      	ldr	r3, [r4, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	dd0b      	ble.n	8003e1a <__ssvfiscanf_r+0xee>
 8003e02:	f000 fd67 	bl	80048d4 <__locale_ctype_ptr>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	7819      	ldrb	r1, [r3, #0]
 8003e0a:	4408      	add	r0, r1
 8003e0c:	7841      	ldrb	r1, [r0, #1]
 8003e0e:	070d      	lsls	r5, r1, #28
 8003e10:	d4ec      	bmi.n	8003dec <__ssvfiscanf_r+0xc0>
 8003e12:	f10a 0501 	add.w	r5, sl, #1
 8003e16:	46aa      	mov	sl, r5
 8003e18:	e79e      	b.n	8003d58 <__ssvfiscanf_r+0x2c>
 8003e1a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4630      	mov	r0, r6
 8003e20:	4798      	blx	r3
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d0ed      	beq.n	8003e02 <__ssvfiscanf_r+0xd6>
 8003e26:	e7f4      	b.n	8003e12 <__ssvfiscanf_r+0xe6>
 8003e28:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003e2a:	fb07 1303 	mla	r3, r7, r3, r1
 8003e2e:	3b30      	subs	r3, #48	; 0x30
 8003e30:	9345      	str	r3, [sp, #276]	; 0x114
 8003e32:	e7af      	b.n	8003d94 <__ssvfiscanf_r+0x68>
 8003e34:	2b5b      	cmp	r3, #91	; 0x5b
 8003e36:	d061      	beq.n	8003efc <__ssvfiscanf_r+0x1d0>
 8003e38:	d80c      	bhi.n	8003e54 <__ssvfiscanf_r+0x128>
 8003e3a:	2b58      	cmp	r3, #88	; 0x58
 8003e3c:	d1d2      	bne.n	8003de4 <__ssvfiscanf_r+0xb8>
 8003e3e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e44:	9243      	str	r2, [sp, #268]	; 0x10c
 8003e46:	2210      	movs	r2, #16
 8003e48:	9244      	str	r2, [sp, #272]	; 0x110
 8003e4a:	2b6f      	cmp	r3, #111	; 0x6f
 8003e4c:	bfb4      	ite	lt
 8003e4e:	2303      	movlt	r3, #3
 8003e50:	2304      	movge	r3, #4
 8003e52:	e010      	b.n	8003e76 <__ssvfiscanf_r+0x14a>
 8003e54:	2b63      	cmp	r3, #99	; 0x63
 8003e56:	d05c      	beq.n	8003f12 <__ssvfiscanf_r+0x1e6>
 8003e58:	2b64      	cmp	r3, #100	; 0x64
 8003e5a:	d1c3      	bne.n	8003de4 <__ssvfiscanf_r+0xb8>
 8003e5c:	9744      	str	r7, [sp, #272]	; 0x110
 8003e5e:	e7f4      	b.n	8003e4a <__ssvfiscanf_r+0x11e>
 8003e60:	2b70      	cmp	r3, #112	; 0x70
 8003e62:	d042      	beq.n	8003eea <__ssvfiscanf_r+0x1be>
 8003e64:	d81d      	bhi.n	8003ea2 <__ssvfiscanf_r+0x176>
 8003e66:	2b6e      	cmp	r3, #110	; 0x6e
 8003e68:	d059      	beq.n	8003f1e <__ssvfiscanf_r+0x1f2>
 8003e6a:	d843      	bhi.n	8003ef4 <__ssvfiscanf_r+0x1c8>
 8003e6c:	2b69      	cmp	r3, #105	; 0x69
 8003e6e:	d1b9      	bne.n	8003de4 <__ssvfiscanf_r+0xb8>
 8003e70:	2300      	movs	r3, #0
 8003e72:	9344      	str	r3, [sp, #272]	; 0x110
 8003e74:	2303      	movs	r3, #3
 8003e76:	9349      	str	r3, [sp, #292]	; 0x124
 8003e78:	6863      	ldr	r3, [r4, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	dd61      	ble.n	8003f42 <__ssvfiscanf_r+0x216>
 8003e7e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003e80:	0659      	lsls	r1, r3, #25
 8003e82:	d56f      	bpl.n	8003f64 <__ssvfiscanf_r+0x238>
 8003e84:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	dc7c      	bgt.n	8003f84 <__ssvfiscanf_r+0x258>
 8003e8a:	ab01      	add	r3, sp, #4
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	a943      	add	r1, sp, #268	; 0x10c
 8003e90:	4630      	mov	r0, r6
 8003e92:	f000 fa35 	bl	8004300 <_scanf_chars>
 8003e96:	2801      	cmp	r0, #1
 8003e98:	f000 8092 	beq.w	8003fc0 <__ssvfiscanf_r+0x294>
 8003e9c:	2802      	cmp	r0, #2
 8003e9e:	d1ba      	bne.n	8003e16 <__ssvfiscanf_r+0xea>
 8003ea0:	e01d      	b.n	8003ede <__ssvfiscanf_r+0x1b2>
 8003ea2:	2b75      	cmp	r3, #117	; 0x75
 8003ea4:	d0da      	beq.n	8003e5c <__ssvfiscanf_r+0x130>
 8003ea6:	2b78      	cmp	r3, #120	; 0x78
 8003ea8:	d0c9      	beq.n	8003e3e <__ssvfiscanf_r+0x112>
 8003eaa:	2b73      	cmp	r3, #115	; 0x73
 8003eac:	d19a      	bne.n	8003de4 <__ssvfiscanf_r+0xb8>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e7e1      	b.n	8003e76 <__ssvfiscanf_r+0x14a>
 8003eb2:	6863      	ldr	r3, [r4, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	dd0c      	ble.n	8003ed2 <__ssvfiscanf_r+0x1a6>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	781a      	ldrb	r2, [r3, #0]
 8003ebc:	4593      	cmp	fp, r2
 8003ebe:	d17f      	bne.n	8003fc0 <__ssvfiscanf_r+0x294>
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	6862      	ldr	r2, [r4, #4]
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	3301      	adds	r3, #1
 8003ecc:	6062      	str	r2, [r4, #4]
 8003ece:	9347      	str	r3, [sp, #284]	; 0x11c
 8003ed0:	e7a1      	b.n	8003e16 <__ssvfiscanf_r+0xea>
 8003ed2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	4798      	blx	r3
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d0ec      	beq.n	8003eb8 <__ssvfiscanf_r+0x18c>
 8003ede:	9846      	ldr	r0, [sp, #280]	; 0x118
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d163      	bne.n	8003fac <__ssvfiscanf_r+0x280>
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	e066      	b.n	8003fb8 <__ssvfiscanf_r+0x28c>
 8003eea:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003eec:	f042 0220 	orr.w	r2, r2, #32
 8003ef0:	9243      	str	r2, [sp, #268]	; 0x10c
 8003ef2:	e7a4      	b.n	8003e3e <__ssvfiscanf_r+0x112>
 8003ef4:	2308      	movs	r3, #8
 8003ef6:	9344      	str	r3, [sp, #272]	; 0x110
 8003ef8:	2304      	movs	r3, #4
 8003efa:	e7bc      	b.n	8003e76 <__ssvfiscanf_r+0x14a>
 8003efc:	4629      	mov	r1, r5
 8003efe:	4640      	mov	r0, r8
 8003f00:	f000 fb56 	bl	80045b0 <__sccl>
 8003f04:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f0a:	9343      	str	r3, [sp, #268]	; 0x10c
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e7b1      	b.n	8003e76 <__ssvfiscanf_r+0x14a>
 8003f12:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f18:	9343      	str	r3, [sp, #268]	; 0x10c
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e7ab      	b.n	8003e76 <__ssvfiscanf_r+0x14a>
 8003f1e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003f20:	06d0      	lsls	r0, r2, #27
 8003f22:	f53f af78 	bmi.w	8003e16 <__ssvfiscanf_r+0xea>
 8003f26:	f012 0f01 	tst.w	r2, #1
 8003f2a:	9a01      	ldr	r2, [sp, #4]
 8003f2c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003f2e:	f102 0104 	add.w	r1, r2, #4
 8003f32:	9101      	str	r1, [sp, #4]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	bf14      	ite	ne
 8003f38:	8013      	strhne	r3, [r2, #0]
 8003f3a:	6013      	streq	r3, [r2, #0]
 8003f3c:	e76b      	b.n	8003e16 <__ssvfiscanf_r+0xea>
 8003f3e:	2305      	movs	r3, #5
 8003f40:	e799      	b.n	8003e76 <__ssvfiscanf_r+0x14a>
 8003f42:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003f44:	4621      	mov	r1, r4
 8003f46:	4630      	mov	r0, r6
 8003f48:	4798      	blx	r3
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d097      	beq.n	8003e7e <__ssvfiscanf_r+0x152>
 8003f4e:	e7c6      	b.n	8003ede <__ssvfiscanf_r+0x1b2>
 8003f50:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8003f52:	3201      	adds	r2, #1
 8003f54:	9247      	str	r2, [sp, #284]	; 0x11c
 8003f56:	6862      	ldr	r2, [r4, #4]
 8003f58:	3a01      	subs	r2, #1
 8003f5a:	2a00      	cmp	r2, #0
 8003f5c:	6062      	str	r2, [r4, #4]
 8003f5e:	dd0a      	ble.n	8003f76 <__ssvfiscanf_r+0x24a>
 8003f60:	3301      	adds	r3, #1
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	f000 fcb6 	bl	80048d4 <__locale_ctype_ptr>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	781a      	ldrb	r2, [r3, #0]
 8003f6c:	4410      	add	r0, r2
 8003f6e:	7842      	ldrb	r2, [r0, #1]
 8003f70:	0712      	lsls	r2, r2, #28
 8003f72:	d4ed      	bmi.n	8003f50 <__ssvfiscanf_r+0x224>
 8003f74:	e786      	b.n	8003e84 <__ssvfiscanf_r+0x158>
 8003f76:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003f78:	4621      	mov	r1, r4
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	4798      	blx	r3
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d0f0      	beq.n	8003f64 <__ssvfiscanf_r+0x238>
 8003f82:	e7ac      	b.n	8003ede <__ssvfiscanf_r+0x1b2>
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	dc06      	bgt.n	8003f96 <__ssvfiscanf_r+0x26a>
 8003f88:	ab01      	add	r3, sp, #4
 8003f8a:	4622      	mov	r2, r4
 8003f8c:	a943      	add	r1, sp, #268	; 0x10c
 8003f8e:	4630      	mov	r0, r6
 8003f90:	f000 fa1a 	bl	80043c8 <_scanf_i>
 8003f94:	e77f      	b.n	8003e96 <__ssvfiscanf_r+0x16a>
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <__ssvfiscanf_r+0x2a4>)
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f43f af3c 	beq.w	8003e16 <__ssvfiscanf_r+0xea>
 8003f9e:	ab01      	add	r3, sp, #4
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	a943      	add	r1, sp, #268	; 0x10c
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	f3af 8000 	nop.w
 8003faa:	e774      	b.n	8003e96 <__ssvfiscanf_r+0x16a>
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003fb2:	bf18      	it	ne
 8003fb4:	f04f 30ff 	movne.w	r0, #4294967295
 8003fb8:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8003fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc0:	9846      	ldr	r0, [sp, #280]	; 0x118
 8003fc2:	e7f9      	b.n	8003fb8 <__ssvfiscanf_r+0x28c>
 8003fc4:	08003c79 	.word	0x08003c79
 8003fc8:	08003cf3 	.word	0x08003cf3
 8003fcc:	0800539a 	.word	0x0800539a
 8003fd0:	00000000 	.word	0x00000000

08003fd4 <_printf_common>:
 8003fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd8:	4691      	mov	r9, r2
 8003fda:	461f      	mov	r7, r3
 8003fdc:	688a      	ldr	r2, [r1, #8]
 8003fde:	690b      	ldr	r3, [r1, #16]
 8003fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	bfb8      	it	lt
 8003fe8:	4613      	movlt	r3, r2
 8003fea:	f8c9 3000 	str.w	r3, [r9]
 8003fee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	b112      	cbz	r2, 8003ffe <_printf_common+0x2a>
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f8c9 3000 	str.w	r3, [r9]
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	0699      	lsls	r1, r3, #26
 8004002:	bf42      	ittt	mi
 8004004:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004008:	3302      	addmi	r3, #2
 800400a:	f8c9 3000 	strmi.w	r3, [r9]
 800400e:	6825      	ldr	r5, [r4, #0]
 8004010:	f015 0506 	ands.w	r5, r5, #6
 8004014:	d107      	bne.n	8004026 <_printf_common+0x52>
 8004016:	f104 0a19 	add.w	sl, r4, #25
 800401a:	68e3      	ldr	r3, [r4, #12]
 800401c:	f8d9 2000 	ldr.w	r2, [r9]
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	429d      	cmp	r5, r3
 8004024:	db29      	blt.n	800407a <_printf_common+0xa6>
 8004026:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800402a:	6822      	ldr	r2, [r4, #0]
 800402c:	3300      	adds	r3, #0
 800402e:	bf18      	it	ne
 8004030:	2301      	movne	r3, #1
 8004032:	0692      	lsls	r2, r2, #26
 8004034:	d42e      	bmi.n	8004094 <_printf_common+0xc0>
 8004036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800403a:	4639      	mov	r1, r7
 800403c:	4630      	mov	r0, r6
 800403e:	47c0      	blx	r8
 8004040:	3001      	adds	r0, #1
 8004042:	d021      	beq.n	8004088 <_printf_common+0xb4>
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	68e5      	ldr	r5, [r4, #12]
 8004048:	f8d9 2000 	ldr.w	r2, [r9]
 800404c:	f003 0306 	and.w	r3, r3, #6
 8004050:	2b04      	cmp	r3, #4
 8004052:	bf08      	it	eq
 8004054:	1aad      	subeq	r5, r5, r2
 8004056:	68a3      	ldr	r3, [r4, #8]
 8004058:	6922      	ldr	r2, [r4, #16]
 800405a:	bf0c      	ite	eq
 800405c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004060:	2500      	movne	r5, #0
 8004062:	4293      	cmp	r3, r2
 8004064:	bfc4      	itt	gt
 8004066:	1a9b      	subgt	r3, r3, r2
 8004068:	18ed      	addgt	r5, r5, r3
 800406a:	f04f 0900 	mov.w	r9, #0
 800406e:	341a      	adds	r4, #26
 8004070:	454d      	cmp	r5, r9
 8004072:	d11b      	bne.n	80040ac <_printf_common+0xd8>
 8004074:	2000      	movs	r0, #0
 8004076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800407a:	2301      	movs	r3, #1
 800407c:	4652      	mov	r2, sl
 800407e:	4639      	mov	r1, r7
 8004080:	4630      	mov	r0, r6
 8004082:	47c0      	blx	r8
 8004084:	3001      	adds	r0, #1
 8004086:	d103      	bne.n	8004090 <_printf_common+0xbc>
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004090:	3501      	adds	r5, #1
 8004092:	e7c2      	b.n	800401a <_printf_common+0x46>
 8004094:	18e1      	adds	r1, r4, r3
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	2030      	movs	r0, #48	; 0x30
 800409a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800409e:	4422      	add	r2, r4
 80040a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040a8:	3302      	adds	r3, #2
 80040aa:	e7c4      	b.n	8004036 <_printf_common+0x62>
 80040ac:	2301      	movs	r3, #1
 80040ae:	4622      	mov	r2, r4
 80040b0:	4639      	mov	r1, r7
 80040b2:	4630      	mov	r0, r6
 80040b4:	47c0      	blx	r8
 80040b6:	3001      	adds	r0, #1
 80040b8:	d0e6      	beq.n	8004088 <_printf_common+0xb4>
 80040ba:	f109 0901 	add.w	r9, r9, #1
 80040be:	e7d7      	b.n	8004070 <_printf_common+0x9c>

080040c0 <_printf_i>:
 80040c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040c4:	4617      	mov	r7, r2
 80040c6:	7e0a      	ldrb	r2, [r1, #24]
 80040c8:	b085      	sub	sp, #20
 80040ca:	2a6e      	cmp	r2, #110	; 0x6e
 80040cc:	4698      	mov	r8, r3
 80040ce:	4606      	mov	r6, r0
 80040d0:	460c      	mov	r4, r1
 80040d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040d4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80040d8:	f000 80bc 	beq.w	8004254 <_printf_i+0x194>
 80040dc:	d81a      	bhi.n	8004114 <_printf_i+0x54>
 80040de:	2a63      	cmp	r2, #99	; 0x63
 80040e0:	d02e      	beq.n	8004140 <_printf_i+0x80>
 80040e2:	d80a      	bhi.n	80040fa <_printf_i+0x3a>
 80040e4:	2a00      	cmp	r2, #0
 80040e6:	f000 80c8 	beq.w	800427a <_printf_i+0x1ba>
 80040ea:	2a58      	cmp	r2, #88	; 0x58
 80040ec:	f000 808a 	beq.w	8004204 <_printf_i+0x144>
 80040f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040f4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80040f8:	e02a      	b.n	8004150 <_printf_i+0x90>
 80040fa:	2a64      	cmp	r2, #100	; 0x64
 80040fc:	d001      	beq.n	8004102 <_printf_i+0x42>
 80040fe:	2a69      	cmp	r2, #105	; 0x69
 8004100:	d1f6      	bne.n	80040f0 <_printf_i+0x30>
 8004102:	6821      	ldr	r1, [r4, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	f011 0f80 	tst.w	r1, #128	; 0x80
 800410a:	d023      	beq.n	8004154 <_printf_i+0x94>
 800410c:	1d11      	adds	r1, r2, #4
 800410e:	6019      	str	r1, [r3, #0]
 8004110:	6813      	ldr	r3, [r2, #0]
 8004112:	e027      	b.n	8004164 <_printf_i+0xa4>
 8004114:	2a73      	cmp	r2, #115	; 0x73
 8004116:	f000 80b4 	beq.w	8004282 <_printf_i+0x1c2>
 800411a:	d808      	bhi.n	800412e <_printf_i+0x6e>
 800411c:	2a6f      	cmp	r2, #111	; 0x6f
 800411e:	d02a      	beq.n	8004176 <_printf_i+0xb6>
 8004120:	2a70      	cmp	r2, #112	; 0x70
 8004122:	d1e5      	bne.n	80040f0 <_printf_i+0x30>
 8004124:	680a      	ldr	r2, [r1, #0]
 8004126:	f042 0220 	orr.w	r2, r2, #32
 800412a:	600a      	str	r2, [r1, #0]
 800412c:	e003      	b.n	8004136 <_printf_i+0x76>
 800412e:	2a75      	cmp	r2, #117	; 0x75
 8004130:	d021      	beq.n	8004176 <_printf_i+0xb6>
 8004132:	2a78      	cmp	r2, #120	; 0x78
 8004134:	d1dc      	bne.n	80040f0 <_printf_i+0x30>
 8004136:	2278      	movs	r2, #120	; 0x78
 8004138:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800413c:	496e      	ldr	r1, [pc, #440]	; (80042f8 <_printf_i+0x238>)
 800413e:	e064      	b.n	800420a <_printf_i+0x14a>
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004146:	1d11      	adds	r1, r2, #4
 8004148:	6019      	str	r1, [r3, #0]
 800414a:	6813      	ldr	r3, [r2, #0]
 800414c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004150:	2301      	movs	r3, #1
 8004152:	e0a3      	b.n	800429c <_printf_i+0x1dc>
 8004154:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004158:	f102 0104 	add.w	r1, r2, #4
 800415c:	6019      	str	r1, [r3, #0]
 800415e:	d0d7      	beq.n	8004110 <_printf_i+0x50>
 8004160:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004164:	2b00      	cmp	r3, #0
 8004166:	da03      	bge.n	8004170 <_printf_i+0xb0>
 8004168:	222d      	movs	r2, #45	; 0x2d
 800416a:	425b      	negs	r3, r3
 800416c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004170:	4962      	ldr	r1, [pc, #392]	; (80042fc <_printf_i+0x23c>)
 8004172:	220a      	movs	r2, #10
 8004174:	e017      	b.n	80041a6 <_printf_i+0xe6>
 8004176:	6820      	ldr	r0, [r4, #0]
 8004178:	6819      	ldr	r1, [r3, #0]
 800417a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800417e:	d003      	beq.n	8004188 <_printf_i+0xc8>
 8004180:	1d08      	adds	r0, r1, #4
 8004182:	6018      	str	r0, [r3, #0]
 8004184:	680b      	ldr	r3, [r1, #0]
 8004186:	e006      	b.n	8004196 <_printf_i+0xd6>
 8004188:	f010 0f40 	tst.w	r0, #64	; 0x40
 800418c:	f101 0004 	add.w	r0, r1, #4
 8004190:	6018      	str	r0, [r3, #0]
 8004192:	d0f7      	beq.n	8004184 <_printf_i+0xc4>
 8004194:	880b      	ldrh	r3, [r1, #0]
 8004196:	4959      	ldr	r1, [pc, #356]	; (80042fc <_printf_i+0x23c>)
 8004198:	2a6f      	cmp	r2, #111	; 0x6f
 800419a:	bf14      	ite	ne
 800419c:	220a      	movne	r2, #10
 800419e:	2208      	moveq	r2, #8
 80041a0:	2000      	movs	r0, #0
 80041a2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80041a6:	6865      	ldr	r5, [r4, #4]
 80041a8:	60a5      	str	r5, [r4, #8]
 80041aa:	2d00      	cmp	r5, #0
 80041ac:	f2c0 809c 	blt.w	80042e8 <_printf_i+0x228>
 80041b0:	6820      	ldr	r0, [r4, #0]
 80041b2:	f020 0004 	bic.w	r0, r0, #4
 80041b6:	6020      	str	r0, [r4, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d13f      	bne.n	800423c <_printf_i+0x17c>
 80041bc:	2d00      	cmp	r5, #0
 80041be:	f040 8095 	bne.w	80042ec <_printf_i+0x22c>
 80041c2:	4675      	mov	r5, lr
 80041c4:	2a08      	cmp	r2, #8
 80041c6:	d10b      	bne.n	80041e0 <_printf_i+0x120>
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	07da      	lsls	r2, r3, #31
 80041cc:	d508      	bpl.n	80041e0 <_printf_i+0x120>
 80041ce:	6923      	ldr	r3, [r4, #16]
 80041d0:	6862      	ldr	r2, [r4, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	bfde      	ittt	le
 80041d6:	2330      	movle	r3, #48	; 0x30
 80041d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041e0:	ebae 0305 	sub.w	r3, lr, r5
 80041e4:	6123      	str	r3, [r4, #16]
 80041e6:	f8cd 8000 	str.w	r8, [sp]
 80041ea:	463b      	mov	r3, r7
 80041ec:	aa03      	add	r2, sp, #12
 80041ee:	4621      	mov	r1, r4
 80041f0:	4630      	mov	r0, r6
 80041f2:	f7ff feef 	bl	8003fd4 <_printf_common>
 80041f6:	3001      	adds	r0, #1
 80041f8:	d155      	bne.n	80042a6 <_printf_i+0x1e6>
 80041fa:	f04f 30ff 	mov.w	r0, #4294967295
 80041fe:	b005      	add	sp, #20
 8004200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004204:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004208:	493c      	ldr	r1, [pc, #240]	; (80042fc <_printf_i+0x23c>)
 800420a:	6822      	ldr	r2, [r4, #0]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004212:	f100 0504 	add.w	r5, r0, #4
 8004216:	601d      	str	r5, [r3, #0]
 8004218:	d001      	beq.n	800421e <_printf_i+0x15e>
 800421a:	6803      	ldr	r3, [r0, #0]
 800421c:	e002      	b.n	8004224 <_printf_i+0x164>
 800421e:	0655      	lsls	r5, r2, #25
 8004220:	d5fb      	bpl.n	800421a <_printf_i+0x15a>
 8004222:	8803      	ldrh	r3, [r0, #0]
 8004224:	07d0      	lsls	r0, r2, #31
 8004226:	bf44      	itt	mi
 8004228:	f042 0220 	orrmi.w	r2, r2, #32
 800422c:	6022      	strmi	r2, [r4, #0]
 800422e:	b91b      	cbnz	r3, 8004238 <_printf_i+0x178>
 8004230:	6822      	ldr	r2, [r4, #0]
 8004232:	f022 0220 	bic.w	r2, r2, #32
 8004236:	6022      	str	r2, [r4, #0]
 8004238:	2210      	movs	r2, #16
 800423a:	e7b1      	b.n	80041a0 <_printf_i+0xe0>
 800423c:	4675      	mov	r5, lr
 800423e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004242:	fb02 3310 	mls	r3, r2, r0, r3
 8004246:	5ccb      	ldrb	r3, [r1, r3]
 8004248:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800424c:	4603      	mov	r3, r0
 800424e:	2800      	cmp	r0, #0
 8004250:	d1f5      	bne.n	800423e <_printf_i+0x17e>
 8004252:	e7b7      	b.n	80041c4 <_printf_i+0x104>
 8004254:	6808      	ldr	r0, [r1, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	6949      	ldr	r1, [r1, #20]
 800425a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800425e:	d004      	beq.n	800426a <_printf_i+0x1aa>
 8004260:	1d10      	adds	r0, r2, #4
 8004262:	6018      	str	r0, [r3, #0]
 8004264:	6813      	ldr	r3, [r2, #0]
 8004266:	6019      	str	r1, [r3, #0]
 8004268:	e007      	b.n	800427a <_printf_i+0x1ba>
 800426a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800426e:	f102 0004 	add.w	r0, r2, #4
 8004272:	6018      	str	r0, [r3, #0]
 8004274:	6813      	ldr	r3, [r2, #0]
 8004276:	d0f6      	beq.n	8004266 <_printf_i+0x1a6>
 8004278:	8019      	strh	r1, [r3, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	6123      	str	r3, [r4, #16]
 800427e:	4675      	mov	r5, lr
 8004280:	e7b1      	b.n	80041e6 <_printf_i+0x126>
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	1d11      	adds	r1, r2, #4
 8004286:	6019      	str	r1, [r3, #0]
 8004288:	6815      	ldr	r5, [r2, #0]
 800428a:	6862      	ldr	r2, [r4, #4]
 800428c:	2100      	movs	r1, #0
 800428e:	4628      	mov	r0, r5
 8004290:	f7fb ffc6 	bl	8000220 <memchr>
 8004294:	b108      	cbz	r0, 800429a <_printf_i+0x1da>
 8004296:	1b40      	subs	r0, r0, r5
 8004298:	6060      	str	r0, [r4, #4]
 800429a:	6863      	ldr	r3, [r4, #4]
 800429c:	6123      	str	r3, [r4, #16]
 800429e:	2300      	movs	r3, #0
 80042a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a4:	e79f      	b.n	80041e6 <_printf_i+0x126>
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	462a      	mov	r2, r5
 80042aa:	4639      	mov	r1, r7
 80042ac:	4630      	mov	r0, r6
 80042ae:	47c0      	blx	r8
 80042b0:	3001      	adds	r0, #1
 80042b2:	d0a2      	beq.n	80041fa <_printf_i+0x13a>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	079b      	lsls	r3, r3, #30
 80042b8:	d507      	bpl.n	80042ca <_printf_i+0x20a>
 80042ba:	2500      	movs	r5, #0
 80042bc:	f104 0919 	add.w	r9, r4, #25
 80042c0:	68e3      	ldr	r3, [r4, #12]
 80042c2:	9a03      	ldr	r2, [sp, #12]
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	429d      	cmp	r5, r3
 80042c8:	db05      	blt.n	80042d6 <_printf_i+0x216>
 80042ca:	68e0      	ldr	r0, [r4, #12]
 80042cc:	9b03      	ldr	r3, [sp, #12]
 80042ce:	4298      	cmp	r0, r3
 80042d0:	bfb8      	it	lt
 80042d2:	4618      	movlt	r0, r3
 80042d4:	e793      	b.n	80041fe <_printf_i+0x13e>
 80042d6:	2301      	movs	r3, #1
 80042d8:	464a      	mov	r2, r9
 80042da:	4639      	mov	r1, r7
 80042dc:	4630      	mov	r0, r6
 80042de:	47c0      	blx	r8
 80042e0:	3001      	adds	r0, #1
 80042e2:	d08a      	beq.n	80041fa <_printf_i+0x13a>
 80042e4:	3501      	adds	r5, #1
 80042e6:	e7eb      	b.n	80042c0 <_printf_i+0x200>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1a7      	bne.n	800423c <_printf_i+0x17c>
 80042ec:	780b      	ldrb	r3, [r1, #0]
 80042ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f6:	e765      	b.n	80041c4 <_printf_i+0x104>
 80042f8:	080053b6 	.word	0x080053b6
 80042fc:	080053a5 	.word	0x080053a5

08004300 <_scanf_chars>:
 8004300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004304:	4615      	mov	r5, r2
 8004306:	688a      	ldr	r2, [r1, #8]
 8004308:	4680      	mov	r8, r0
 800430a:	460c      	mov	r4, r1
 800430c:	b932      	cbnz	r2, 800431c <_scanf_chars+0x1c>
 800430e:	698a      	ldr	r2, [r1, #24]
 8004310:	2a00      	cmp	r2, #0
 8004312:	bf0c      	ite	eq
 8004314:	2201      	moveq	r2, #1
 8004316:	f04f 32ff 	movne.w	r2, #4294967295
 800431a:	608a      	str	r2, [r1, #8]
 800431c:	6822      	ldr	r2, [r4, #0]
 800431e:	06d1      	lsls	r1, r2, #27
 8004320:	bf5f      	itttt	pl
 8004322:	681a      	ldrpl	r2, [r3, #0]
 8004324:	1d11      	addpl	r1, r2, #4
 8004326:	6019      	strpl	r1, [r3, #0]
 8004328:	6817      	ldrpl	r7, [r2, #0]
 800432a:	2600      	movs	r6, #0
 800432c:	69a3      	ldr	r3, [r4, #24]
 800432e:	b1db      	cbz	r3, 8004368 <_scanf_chars+0x68>
 8004330:	2b01      	cmp	r3, #1
 8004332:	d107      	bne.n	8004344 <_scanf_chars+0x44>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	6962      	ldr	r2, [r4, #20]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	5cd3      	ldrb	r3, [r2, r3]
 800433c:	b9a3      	cbnz	r3, 8004368 <_scanf_chars+0x68>
 800433e:	2e00      	cmp	r6, #0
 8004340:	d132      	bne.n	80043a8 <_scanf_chars+0xa8>
 8004342:	e006      	b.n	8004352 <_scanf_chars+0x52>
 8004344:	2b02      	cmp	r3, #2
 8004346:	d007      	beq.n	8004358 <_scanf_chars+0x58>
 8004348:	2e00      	cmp	r6, #0
 800434a:	d12d      	bne.n	80043a8 <_scanf_chars+0xa8>
 800434c:	69a3      	ldr	r3, [r4, #24]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d12a      	bne.n	80043a8 <_scanf_chars+0xa8>
 8004352:	2001      	movs	r0, #1
 8004354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004358:	f000 fabc 	bl	80048d4 <__locale_ctype_ptr>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	4418      	add	r0, r3
 8004362:	7843      	ldrb	r3, [r0, #1]
 8004364:	071b      	lsls	r3, r3, #28
 8004366:	d4ef      	bmi.n	8004348 <_scanf_chars+0x48>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	06da      	lsls	r2, r3, #27
 800436c:	bf5e      	ittt	pl
 800436e:	682b      	ldrpl	r3, [r5, #0]
 8004370:	781b      	ldrbpl	r3, [r3, #0]
 8004372:	703b      	strbpl	r3, [r7, #0]
 8004374:	682a      	ldr	r2, [r5, #0]
 8004376:	686b      	ldr	r3, [r5, #4]
 8004378:	f102 0201 	add.w	r2, r2, #1
 800437c:	602a      	str	r2, [r5, #0]
 800437e:	68a2      	ldr	r2, [r4, #8]
 8004380:	f103 33ff 	add.w	r3, r3, #4294967295
 8004384:	f102 32ff 	add.w	r2, r2, #4294967295
 8004388:	606b      	str	r3, [r5, #4]
 800438a:	f106 0601 	add.w	r6, r6, #1
 800438e:	bf58      	it	pl
 8004390:	3701      	addpl	r7, #1
 8004392:	60a2      	str	r2, [r4, #8]
 8004394:	b142      	cbz	r2, 80043a8 <_scanf_chars+0xa8>
 8004396:	2b00      	cmp	r3, #0
 8004398:	dcc8      	bgt.n	800432c <_scanf_chars+0x2c>
 800439a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800439e:	4629      	mov	r1, r5
 80043a0:	4640      	mov	r0, r8
 80043a2:	4798      	blx	r3
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d0c1      	beq.n	800432c <_scanf_chars+0x2c>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	f013 0310 	ands.w	r3, r3, #16
 80043ae:	d105      	bne.n	80043bc <_scanf_chars+0xbc>
 80043b0:	68e2      	ldr	r2, [r4, #12]
 80043b2:	3201      	adds	r2, #1
 80043b4:	60e2      	str	r2, [r4, #12]
 80043b6:	69a2      	ldr	r2, [r4, #24]
 80043b8:	b102      	cbz	r2, 80043bc <_scanf_chars+0xbc>
 80043ba:	703b      	strb	r3, [r7, #0]
 80043bc:	6923      	ldr	r3, [r4, #16]
 80043be:	441e      	add	r6, r3
 80043c0:	6126      	str	r6, [r4, #16]
 80043c2:	2000      	movs	r0, #0
 80043c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080043c8 <_scanf_i>:
 80043c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	469a      	mov	sl, r3
 80043ce:	4b74      	ldr	r3, [pc, #464]	; (80045a0 <_scanf_i+0x1d8>)
 80043d0:	460c      	mov	r4, r1
 80043d2:	4683      	mov	fp, r0
 80043d4:	4616      	mov	r6, r2
 80043d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043da:	b087      	sub	sp, #28
 80043dc:	ab03      	add	r3, sp, #12
 80043de:	68a7      	ldr	r7, [r4, #8]
 80043e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80043e4:	4b6f      	ldr	r3, [pc, #444]	; (80045a4 <_scanf_i+0x1dc>)
 80043e6:	69a1      	ldr	r1, [r4, #24]
 80043e8:	4a6f      	ldr	r2, [pc, #444]	; (80045a8 <_scanf_i+0x1e0>)
 80043ea:	2903      	cmp	r1, #3
 80043ec:	bf18      	it	ne
 80043ee:	461a      	movne	r2, r3
 80043f0:	1e7b      	subs	r3, r7, #1
 80043f2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80043f6:	bf84      	itt	hi
 80043f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80043fc:	60a3      	strhi	r3, [r4, #8]
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	9200      	str	r2, [sp, #0]
 8004402:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004406:	bf88      	it	hi
 8004408:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800440c:	f104 091c 	add.w	r9, r4, #28
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	bf8c      	ite	hi
 8004414:	197f      	addhi	r7, r7, r5
 8004416:	2700      	movls	r7, #0
 8004418:	464b      	mov	r3, r9
 800441a:	f04f 0800 	mov.w	r8, #0
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	6831      	ldr	r1, [r6, #0]
 8004422:	ab03      	add	r3, sp, #12
 8004424:	2202      	movs	r2, #2
 8004426:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800442a:	7809      	ldrb	r1, [r1, #0]
 800442c:	f7fb fef8 	bl	8000220 <memchr>
 8004430:	9b01      	ldr	r3, [sp, #4]
 8004432:	b328      	cbz	r0, 8004480 <_scanf_i+0xb8>
 8004434:	f1b8 0f01 	cmp.w	r8, #1
 8004438:	d156      	bne.n	80044e8 <_scanf_i+0x120>
 800443a:	6862      	ldr	r2, [r4, #4]
 800443c:	b92a      	cbnz	r2, 800444a <_scanf_i+0x82>
 800443e:	2208      	movs	r2, #8
 8004440:	6062      	str	r2, [r4, #4]
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004448:	6022      	str	r2, [r4, #0]
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004450:	6022      	str	r2, [r4, #0]
 8004452:	68a2      	ldr	r2, [r4, #8]
 8004454:	1e51      	subs	r1, r2, #1
 8004456:	60a1      	str	r1, [r4, #8]
 8004458:	b192      	cbz	r2, 8004480 <_scanf_i+0xb8>
 800445a:	6832      	ldr	r2, [r6, #0]
 800445c:	1c51      	adds	r1, r2, #1
 800445e:	6031      	str	r1, [r6, #0]
 8004460:	7812      	ldrb	r2, [r2, #0]
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	1c5d      	adds	r5, r3, #1
 8004466:	6873      	ldr	r3, [r6, #4]
 8004468:	3b01      	subs	r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	6073      	str	r3, [r6, #4]
 800446e:	dc06      	bgt.n	800447e <_scanf_i+0xb6>
 8004470:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004474:	4631      	mov	r1, r6
 8004476:	4658      	mov	r0, fp
 8004478:	4798      	blx	r3
 800447a:	2800      	cmp	r0, #0
 800447c:	d176      	bne.n	800456c <_scanf_i+0x1a4>
 800447e:	462b      	mov	r3, r5
 8004480:	f108 0801 	add.w	r8, r8, #1
 8004484:	f1b8 0f03 	cmp.w	r8, #3
 8004488:	d1c9      	bne.n	800441e <_scanf_i+0x56>
 800448a:	6862      	ldr	r2, [r4, #4]
 800448c:	b90a      	cbnz	r2, 8004492 <_scanf_i+0xca>
 800448e:	220a      	movs	r2, #10
 8004490:	6062      	str	r2, [r4, #4]
 8004492:	6862      	ldr	r2, [r4, #4]
 8004494:	4945      	ldr	r1, [pc, #276]	; (80045ac <_scanf_i+0x1e4>)
 8004496:	6960      	ldr	r0, [r4, #20]
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	1a89      	subs	r1, r1, r2
 800449c:	f000 f888 	bl	80045b0 <__sccl>
 80044a0:	9b01      	ldr	r3, [sp, #4]
 80044a2:	f04f 0800 	mov.w	r8, #0
 80044a6:	461d      	mov	r5, r3
 80044a8:	68a3      	ldr	r3, [r4, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d038      	beq.n	8004520 <_scanf_i+0x158>
 80044ae:	6831      	ldr	r1, [r6, #0]
 80044b0:	6960      	ldr	r0, [r4, #20]
 80044b2:	780a      	ldrb	r2, [r1, #0]
 80044b4:	5c80      	ldrb	r0, [r0, r2]
 80044b6:	2800      	cmp	r0, #0
 80044b8:	d032      	beq.n	8004520 <_scanf_i+0x158>
 80044ba:	2a30      	cmp	r2, #48	; 0x30
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	d121      	bne.n	8004504 <_scanf_i+0x13c>
 80044c0:	0510      	lsls	r0, r2, #20
 80044c2:	d51f      	bpl.n	8004504 <_scanf_i+0x13c>
 80044c4:	f108 0801 	add.w	r8, r8, #1
 80044c8:	b117      	cbz	r7, 80044d0 <_scanf_i+0x108>
 80044ca:	3301      	adds	r3, #1
 80044cc:	3f01      	subs	r7, #1
 80044ce:	60a3      	str	r3, [r4, #8]
 80044d0:	6873      	ldr	r3, [r6, #4]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	6073      	str	r3, [r6, #4]
 80044d8:	dd1b      	ble.n	8004512 <_scanf_i+0x14a>
 80044da:	6833      	ldr	r3, [r6, #0]
 80044dc:	3301      	adds	r3, #1
 80044de:	6033      	str	r3, [r6, #0]
 80044e0:	68a3      	ldr	r3, [r4, #8]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	60a3      	str	r3, [r4, #8]
 80044e6:	e7df      	b.n	80044a8 <_scanf_i+0xe0>
 80044e8:	f1b8 0f02 	cmp.w	r8, #2
 80044ec:	d1b1      	bne.n	8004452 <_scanf_i+0x8a>
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80044f4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80044f8:	d1c2      	bne.n	8004480 <_scanf_i+0xb8>
 80044fa:	2110      	movs	r1, #16
 80044fc:	6061      	str	r1, [r4, #4]
 80044fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004502:	e7a5      	b.n	8004450 <_scanf_i+0x88>
 8004504:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004508:	6022      	str	r2, [r4, #0]
 800450a:	780b      	ldrb	r3, [r1, #0]
 800450c:	702b      	strb	r3, [r5, #0]
 800450e:	3501      	adds	r5, #1
 8004510:	e7de      	b.n	80044d0 <_scanf_i+0x108>
 8004512:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004516:	4631      	mov	r1, r6
 8004518:	4658      	mov	r0, fp
 800451a:	4798      	blx	r3
 800451c:	2800      	cmp	r0, #0
 800451e:	d0df      	beq.n	80044e0 <_scanf_i+0x118>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	05d9      	lsls	r1, r3, #23
 8004524:	d50c      	bpl.n	8004540 <_scanf_i+0x178>
 8004526:	454d      	cmp	r5, r9
 8004528:	d908      	bls.n	800453c <_scanf_i+0x174>
 800452a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800452e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004532:	4632      	mov	r2, r6
 8004534:	4658      	mov	r0, fp
 8004536:	4798      	blx	r3
 8004538:	1e6f      	subs	r7, r5, #1
 800453a:	463d      	mov	r5, r7
 800453c:	454d      	cmp	r5, r9
 800453e:	d02c      	beq.n	800459a <_scanf_i+0x1d2>
 8004540:	6822      	ldr	r2, [r4, #0]
 8004542:	f012 0210 	ands.w	r2, r2, #16
 8004546:	d11e      	bne.n	8004586 <_scanf_i+0x1be>
 8004548:	702a      	strb	r2, [r5, #0]
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	9e00      	ldr	r6, [sp, #0]
 800454e:	4649      	mov	r1, r9
 8004550:	4658      	mov	r0, fp
 8004552:	47b0      	blx	r6
 8004554:	6822      	ldr	r2, [r4, #0]
 8004556:	f8da 3000 	ldr.w	r3, [sl]
 800455a:	f012 0f20 	tst.w	r2, #32
 800455e:	d008      	beq.n	8004572 <_scanf_i+0x1aa>
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	f8ca 2000 	str.w	r2, [sl]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6018      	str	r0, [r3, #0]
 800456a:	e009      	b.n	8004580 <_scanf_i+0x1b8>
 800456c:	f04f 0800 	mov.w	r8, #0
 8004570:	e7d6      	b.n	8004520 <_scanf_i+0x158>
 8004572:	07d2      	lsls	r2, r2, #31
 8004574:	d5f4      	bpl.n	8004560 <_scanf_i+0x198>
 8004576:	1d1a      	adds	r2, r3, #4
 8004578:	f8ca 2000 	str.w	r2, [sl]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	8018      	strh	r0, [r3, #0]
 8004580:	68e3      	ldr	r3, [r4, #12]
 8004582:	3301      	adds	r3, #1
 8004584:	60e3      	str	r3, [r4, #12]
 8004586:	eba5 0509 	sub.w	r5, r5, r9
 800458a:	44a8      	add	r8, r5
 800458c:	6925      	ldr	r5, [r4, #16]
 800458e:	4445      	add	r5, r8
 8004590:	6125      	str	r5, [r4, #16]
 8004592:	2000      	movs	r0, #0
 8004594:	b007      	add	sp, #28
 8004596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459a:	2001      	movs	r0, #1
 800459c:	e7fa      	b.n	8004594 <_scanf_i+0x1cc>
 800459e:	bf00      	nop
 80045a0:	08004b88 	.word	0x08004b88
 80045a4:	08004835 	.word	0x08004835
 80045a8:	08004715 	.word	0x08004715
 80045ac:	080053d7 	.word	0x080053d7

080045b0 <__sccl>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	780b      	ldrb	r3, [r1, #0]
 80045b4:	2b5e      	cmp	r3, #94	; 0x5e
 80045b6:	bf13      	iteet	ne
 80045b8:	1c4a      	addne	r2, r1, #1
 80045ba:	1c8a      	addeq	r2, r1, #2
 80045bc:	784b      	ldrbeq	r3, [r1, #1]
 80045be:	2100      	movne	r1, #0
 80045c0:	bf08      	it	eq
 80045c2:	2101      	moveq	r1, #1
 80045c4:	1e44      	subs	r4, r0, #1
 80045c6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80045ca:	f804 1f01 	strb.w	r1, [r4, #1]!
 80045ce:	42a5      	cmp	r5, r4
 80045d0:	d1fb      	bne.n	80045ca <__sccl+0x1a>
 80045d2:	b913      	cbnz	r3, 80045da <__sccl+0x2a>
 80045d4:	3a01      	subs	r2, #1
 80045d6:	4610      	mov	r0, r2
 80045d8:	bd70      	pop	{r4, r5, r6, pc}
 80045da:	f081 0401 	eor.w	r4, r1, #1
 80045de:	54c4      	strb	r4, [r0, r3]
 80045e0:	4611      	mov	r1, r2
 80045e2:	780d      	ldrb	r5, [r1, #0]
 80045e4:	2d2d      	cmp	r5, #45	; 0x2d
 80045e6:	f101 0201 	add.w	r2, r1, #1
 80045ea:	d006      	beq.n	80045fa <__sccl+0x4a>
 80045ec:	2d5d      	cmp	r5, #93	; 0x5d
 80045ee:	d0f2      	beq.n	80045d6 <__sccl+0x26>
 80045f0:	b90d      	cbnz	r5, 80045f6 <__sccl+0x46>
 80045f2:	460a      	mov	r2, r1
 80045f4:	e7ef      	b.n	80045d6 <__sccl+0x26>
 80045f6:	462b      	mov	r3, r5
 80045f8:	e7f1      	b.n	80045de <__sccl+0x2e>
 80045fa:	784e      	ldrb	r6, [r1, #1]
 80045fc:	2e5d      	cmp	r6, #93	; 0x5d
 80045fe:	d0fa      	beq.n	80045f6 <__sccl+0x46>
 8004600:	42b3      	cmp	r3, r6
 8004602:	dcf8      	bgt.n	80045f6 <__sccl+0x46>
 8004604:	3102      	adds	r1, #2
 8004606:	3301      	adds	r3, #1
 8004608:	429e      	cmp	r6, r3
 800460a:	54c4      	strb	r4, [r0, r3]
 800460c:	dcfb      	bgt.n	8004606 <__sccl+0x56>
 800460e:	e7e8      	b.n	80045e2 <__sccl+0x32>

08004610 <__seofread>:
 8004610:	2000      	movs	r0, #0
 8004612:	4770      	bx	lr

08004614 <_strtol_l.isra.0>:
 8004614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004618:	4680      	mov	r8, r0
 800461a:	4689      	mov	r9, r1
 800461c:	4692      	mov	sl, r2
 800461e:	461f      	mov	r7, r3
 8004620:	468b      	mov	fp, r1
 8004622:	465d      	mov	r5, fp
 8004624:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004626:	f815 4b01 	ldrb.w	r4, [r5], #1
 800462a:	f000 f950 	bl	80048ce <__locale_ctype_ptr_l>
 800462e:	4420      	add	r0, r4
 8004630:	7846      	ldrb	r6, [r0, #1]
 8004632:	f016 0608 	ands.w	r6, r6, #8
 8004636:	d10b      	bne.n	8004650 <_strtol_l.isra.0+0x3c>
 8004638:	2c2d      	cmp	r4, #45	; 0x2d
 800463a:	d10b      	bne.n	8004654 <_strtol_l.isra.0+0x40>
 800463c:	782c      	ldrb	r4, [r5, #0]
 800463e:	2601      	movs	r6, #1
 8004640:	f10b 0502 	add.w	r5, fp, #2
 8004644:	b167      	cbz	r7, 8004660 <_strtol_l.isra.0+0x4c>
 8004646:	2f10      	cmp	r7, #16
 8004648:	d114      	bne.n	8004674 <_strtol_l.isra.0+0x60>
 800464a:	2c30      	cmp	r4, #48	; 0x30
 800464c:	d00a      	beq.n	8004664 <_strtol_l.isra.0+0x50>
 800464e:	e011      	b.n	8004674 <_strtol_l.isra.0+0x60>
 8004650:	46ab      	mov	fp, r5
 8004652:	e7e6      	b.n	8004622 <_strtol_l.isra.0+0xe>
 8004654:	2c2b      	cmp	r4, #43	; 0x2b
 8004656:	bf04      	itt	eq
 8004658:	782c      	ldrbeq	r4, [r5, #0]
 800465a:	f10b 0502 	addeq.w	r5, fp, #2
 800465e:	e7f1      	b.n	8004644 <_strtol_l.isra.0+0x30>
 8004660:	2c30      	cmp	r4, #48	; 0x30
 8004662:	d127      	bne.n	80046b4 <_strtol_l.isra.0+0xa0>
 8004664:	782b      	ldrb	r3, [r5, #0]
 8004666:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800466a:	2b58      	cmp	r3, #88	; 0x58
 800466c:	d14b      	bne.n	8004706 <_strtol_l.isra.0+0xf2>
 800466e:	786c      	ldrb	r4, [r5, #1]
 8004670:	2710      	movs	r7, #16
 8004672:	3502      	adds	r5, #2
 8004674:	2e00      	cmp	r6, #0
 8004676:	bf0c      	ite	eq
 8004678:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800467c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004680:	2200      	movs	r2, #0
 8004682:	fbb1 fef7 	udiv	lr, r1, r7
 8004686:	4610      	mov	r0, r2
 8004688:	fb07 1c1e 	mls	ip, r7, lr, r1
 800468c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004690:	2b09      	cmp	r3, #9
 8004692:	d811      	bhi.n	80046b8 <_strtol_l.isra.0+0xa4>
 8004694:	461c      	mov	r4, r3
 8004696:	42a7      	cmp	r7, r4
 8004698:	dd1d      	ble.n	80046d6 <_strtol_l.isra.0+0xc2>
 800469a:	1c53      	adds	r3, r2, #1
 800469c:	d007      	beq.n	80046ae <_strtol_l.isra.0+0x9a>
 800469e:	4586      	cmp	lr, r0
 80046a0:	d316      	bcc.n	80046d0 <_strtol_l.isra.0+0xbc>
 80046a2:	d101      	bne.n	80046a8 <_strtol_l.isra.0+0x94>
 80046a4:	45a4      	cmp	ip, r4
 80046a6:	db13      	blt.n	80046d0 <_strtol_l.isra.0+0xbc>
 80046a8:	fb00 4007 	mla	r0, r0, r7, r4
 80046ac:	2201      	movs	r2, #1
 80046ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046b2:	e7eb      	b.n	800468c <_strtol_l.isra.0+0x78>
 80046b4:	270a      	movs	r7, #10
 80046b6:	e7dd      	b.n	8004674 <_strtol_l.isra.0+0x60>
 80046b8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80046bc:	2b19      	cmp	r3, #25
 80046be:	d801      	bhi.n	80046c4 <_strtol_l.isra.0+0xb0>
 80046c0:	3c37      	subs	r4, #55	; 0x37
 80046c2:	e7e8      	b.n	8004696 <_strtol_l.isra.0+0x82>
 80046c4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80046c8:	2b19      	cmp	r3, #25
 80046ca:	d804      	bhi.n	80046d6 <_strtol_l.isra.0+0xc2>
 80046cc:	3c57      	subs	r4, #87	; 0x57
 80046ce:	e7e2      	b.n	8004696 <_strtol_l.isra.0+0x82>
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295
 80046d4:	e7eb      	b.n	80046ae <_strtol_l.isra.0+0x9a>
 80046d6:	1c53      	adds	r3, r2, #1
 80046d8:	d108      	bne.n	80046ec <_strtol_l.isra.0+0xd8>
 80046da:	2322      	movs	r3, #34	; 0x22
 80046dc:	f8c8 3000 	str.w	r3, [r8]
 80046e0:	4608      	mov	r0, r1
 80046e2:	f1ba 0f00 	cmp.w	sl, #0
 80046e6:	d107      	bne.n	80046f8 <_strtol_l.isra.0+0xe4>
 80046e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ec:	b106      	cbz	r6, 80046f0 <_strtol_l.isra.0+0xdc>
 80046ee:	4240      	negs	r0, r0
 80046f0:	f1ba 0f00 	cmp.w	sl, #0
 80046f4:	d00c      	beq.n	8004710 <_strtol_l.isra.0+0xfc>
 80046f6:	b122      	cbz	r2, 8004702 <_strtol_l.isra.0+0xee>
 80046f8:	3d01      	subs	r5, #1
 80046fa:	f8ca 5000 	str.w	r5, [sl]
 80046fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004702:	464d      	mov	r5, r9
 8004704:	e7f9      	b.n	80046fa <_strtol_l.isra.0+0xe6>
 8004706:	2430      	movs	r4, #48	; 0x30
 8004708:	2f00      	cmp	r7, #0
 800470a:	d1b3      	bne.n	8004674 <_strtol_l.isra.0+0x60>
 800470c:	2708      	movs	r7, #8
 800470e:	e7b1      	b.n	8004674 <_strtol_l.isra.0+0x60>
 8004710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004714 <_strtol_r>:
 8004714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004716:	4c06      	ldr	r4, [pc, #24]	; (8004730 <_strtol_r+0x1c>)
 8004718:	4d06      	ldr	r5, [pc, #24]	; (8004734 <_strtol_r+0x20>)
 800471a:	6824      	ldr	r4, [r4, #0]
 800471c:	6a24      	ldr	r4, [r4, #32]
 800471e:	2c00      	cmp	r4, #0
 8004720:	bf08      	it	eq
 8004722:	462c      	moveq	r4, r5
 8004724:	9400      	str	r4, [sp, #0]
 8004726:	f7ff ff75 	bl	8004614 <_strtol_l.isra.0>
 800472a:	b003      	add	sp, #12
 800472c:	bd30      	pop	{r4, r5, pc}
 800472e:	bf00      	nop
 8004730:	2000000c 	.word	0x2000000c
 8004734:	20000070 	.word	0x20000070

08004738 <_strtoul_l.isra.0>:
 8004738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800473c:	4680      	mov	r8, r0
 800473e:	4689      	mov	r9, r1
 8004740:	4692      	mov	sl, r2
 8004742:	461e      	mov	r6, r3
 8004744:	460f      	mov	r7, r1
 8004746:	463d      	mov	r5, r7
 8004748:	9808      	ldr	r0, [sp, #32]
 800474a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800474e:	f000 f8be 	bl	80048ce <__locale_ctype_ptr_l>
 8004752:	4420      	add	r0, r4
 8004754:	7843      	ldrb	r3, [r0, #1]
 8004756:	f013 0308 	ands.w	r3, r3, #8
 800475a:	d10a      	bne.n	8004772 <_strtoul_l.isra.0+0x3a>
 800475c:	2c2d      	cmp	r4, #45	; 0x2d
 800475e:	d10a      	bne.n	8004776 <_strtoul_l.isra.0+0x3e>
 8004760:	782c      	ldrb	r4, [r5, #0]
 8004762:	2301      	movs	r3, #1
 8004764:	1cbd      	adds	r5, r7, #2
 8004766:	b15e      	cbz	r6, 8004780 <_strtoul_l.isra.0+0x48>
 8004768:	2e10      	cmp	r6, #16
 800476a:	d113      	bne.n	8004794 <_strtoul_l.isra.0+0x5c>
 800476c:	2c30      	cmp	r4, #48	; 0x30
 800476e:	d009      	beq.n	8004784 <_strtoul_l.isra.0+0x4c>
 8004770:	e010      	b.n	8004794 <_strtoul_l.isra.0+0x5c>
 8004772:	462f      	mov	r7, r5
 8004774:	e7e7      	b.n	8004746 <_strtoul_l.isra.0+0xe>
 8004776:	2c2b      	cmp	r4, #43	; 0x2b
 8004778:	bf04      	itt	eq
 800477a:	782c      	ldrbeq	r4, [r5, #0]
 800477c:	1cbd      	addeq	r5, r7, #2
 800477e:	e7f2      	b.n	8004766 <_strtoul_l.isra.0+0x2e>
 8004780:	2c30      	cmp	r4, #48	; 0x30
 8004782:	d125      	bne.n	80047d0 <_strtoul_l.isra.0+0x98>
 8004784:	782a      	ldrb	r2, [r5, #0]
 8004786:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800478a:	2a58      	cmp	r2, #88	; 0x58
 800478c:	d14a      	bne.n	8004824 <_strtoul_l.isra.0+0xec>
 800478e:	786c      	ldrb	r4, [r5, #1]
 8004790:	2610      	movs	r6, #16
 8004792:	3502      	adds	r5, #2
 8004794:	f04f 31ff 	mov.w	r1, #4294967295
 8004798:	2700      	movs	r7, #0
 800479a:	fbb1 f1f6 	udiv	r1, r1, r6
 800479e:	fb06 fe01 	mul.w	lr, r6, r1
 80047a2:	ea6f 0e0e 	mvn.w	lr, lr
 80047a6:	4638      	mov	r0, r7
 80047a8:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80047ac:	2a09      	cmp	r2, #9
 80047ae:	d811      	bhi.n	80047d4 <_strtoul_l.isra.0+0x9c>
 80047b0:	4614      	mov	r4, r2
 80047b2:	42a6      	cmp	r6, r4
 80047b4:	dd1d      	ble.n	80047f2 <_strtoul_l.isra.0+0xba>
 80047b6:	2f00      	cmp	r7, #0
 80047b8:	db18      	blt.n	80047ec <_strtoul_l.isra.0+0xb4>
 80047ba:	4281      	cmp	r1, r0
 80047bc:	d316      	bcc.n	80047ec <_strtoul_l.isra.0+0xb4>
 80047be:	d101      	bne.n	80047c4 <_strtoul_l.isra.0+0x8c>
 80047c0:	45a6      	cmp	lr, r4
 80047c2:	db13      	blt.n	80047ec <_strtoul_l.isra.0+0xb4>
 80047c4:	fb00 4006 	mla	r0, r0, r6, r4
 80047c8:	2701      	movs	r7, #1
 80047ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047ce:	e7eb      	b.n	80047a8 <_strtoul_l.isra.0+0x70>
 80047d0:	260a      	movs	r6, #10
 80047d2:	e7df      	b.n	8004794 <_strtoul_l.isra.0+0x5c>
 80047d4:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80047d8:	2a19      	cmp	r2, #25
 80047da:	d801      	bhi.n	80047e0 <_strtoul_l.isra.0+0xa8>
 80047dc:	3c37      	subs	r4, #55	; 0x37
 80047de:	e7e8      	b.n	80047b2 <_strtoul_l.isra.0+0x7a>
 80047e0:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 80047e4:	2a19      	cmp	r2, #25
 80047e6:	d804      	bhi.n	80047f2 <_strtoul_l.isra.0+0xba>
 80047e8:	3c57      	subs	r4, #87	; 0x57
 80047ea:	e7e2      	b.n	80047b2 <_strtoul_l.isra.0+0x7a>
 80047ec:	f04f 37ff 	mov.w	r7, #4294967295
 80047f0:	e7eb      	b.n	80047ca <_strtoul_l.isra.0+0x92>
 80047f2:	2f00      	cmp	r7, #0
 80047f4:	da09      	bge.n	800480a <_strtoul_l.isra.0+0xd2>
 80047f6:	2322      	movs	r3, #34	; 0x22
 80047f8:	f8c8 3000 	str.w	r3, [r8]
 80047fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004800:	f1ba 0f00 	cmp.w	sl, #0
 8004804:	d107      	bne.n	8004816 <_strtoul_l.isra.0+0xde>
 8004806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480a:	b103      	cbz	r3, 800480e <_strtoul_l.isra.0+0xd6>
 800480c:	4240      	negs	r0, r0
 800480e:	f1ba 0f00 	cmp.w	sl, #0
 8004812:	d00c      	beq.n	800482e <_strtoul_l.isra.0+0xf6>
 8004814:	b127      	cbz	r7, 8004820 <_strtoul_l.isra.0+0xe8>
 8004816:	3d01      	subs	r5, #1
 8004818:	f8ca 5000 	str.w	r5, [sl]
 800481c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004820:	464d      	mov	r5, r9
 8004822:	e7f9      	b.n	8004818 <_strtoul_l.isra.0+0xe0>
 8004824:	2430      	movs	r4, #48	; 0x30
 8004826:	2e00      	cmp	r6, #0
 8004828:	d1b4      	bne.n	8004794 <_strtoul_l.isra.0+0x5c>
 800482a:	2608      	movs	r6, #8
 800482c:	e7b2      	b.n	8004794 <_strtoul_l.isra.0+0x5c>
 800482e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004834 <_strtoul_r>:
 8004834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004836:	4c06      	ldr	r4, [pc, #24]	; (8004850 <_strtoul_r+0x1c>)
 8004838:	4d06      	ldr	r5, [pc, #24]	; (8004854 <_strtoul_r+0x20>)
 800483a:	6824      	ldr	r4, [r4, #0]
 800483c:	6a24      	ldr	r4, [r4, #32]
 800483e:	2c00      	cmp	r4, #0
 8004840:	bf08      	it	eq
 8004842:	462c      	moveq	r4, r5
 8004844:	9400      	str	r4, [sp, #0]
 8004846:	f7ff ff77 	bl	8004738 <_strtoul_l.isra.0>
 800484a:	b003      	add	sp, #12
 800484c:	bd30      	pop	{r4, r5, pc}
 800484e:	bf00      	nop
 8004850:	2000000c 	.word	0x2000000c
 8004854:	20000070 	.word	0x20000070

08004858 <__submore>:
 8004858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800485c:	460c      	mov	r4, r1
 800485e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004864:	4299      	cmp	r1, r3
 8004866:	d11e      	bne.n	80048a6 <__submore+0x4e>
 8004868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800486c:	f000 f8c6 	bl	80049fc <_malloc_r>
 8004870:	b918      	cbnz	r0, 800487a <__submore+0x22>
 8004872:	f04f 30ff 	mov.w	r0, #4294967295
 8004876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800487a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800487e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004880:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004884:	6360      	str	r0, [r4, #52]	; 0x34
 8004886:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800488a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800488e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004892:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004896:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800489a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800489e:	6020      	str	r0, [r4, #0]
 80048a0:	2000      	movs	r0, #0
 80048a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80048a8:	0077      	lsls	r7, r6, #1
 80048aa:	463a      	mov	r2, r7
 80048ac:	f000 f904 	bl	8004ab8 <_realloc_r>
 80048b0:	4605      	mov	r5, r0
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0dd      	beq.n	8004872 <__submore+0x1a>
 80048b6:	eb00 0806 	add.w	r8, r0, r6
 80048ba:	4601      	mov	r1, r0
 80048bc:	4632      	mov	r2, r6
 80048be:	4640      	mov	r0, r8
 80048c0:	f000 f828 	bl	8004914 <memcpy>
 80048c4:	f8c4 8000 	str.w	r8, [r4]
 80048c8:	6365      	str	r5, [r4, #52]	; 0x34
 80048ca:	63a7      	str	r7, [r4, #56]	; 0x38
 80048cc:	e7e8      	b.n	80048a0 <__submore+0x48>

080048ce <__locale_ctype_ptr_l>:
 80048ce:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80048d2:	4770      	bx	lr

080048d4 <__locale_ctype_ptr>:
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <__locale_ctype_ptr+0x14>)
 80048d6:	4a05      	ldr	r2, [pc, #20]	; (80048ec <__locale_ctype_ptr+0x18>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf08      	it	eq
 80048e0:	4613      	moveq	r3, r2
 80048e2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80048e6:	4770      	bx	lr
 80048e8:	2000000c 	.word	0x2000000c
 80048ec:	20000070 	.word	0x20000070

080048f0 <__ascii_mbtowc>:
 80048f0:	b082      	sub	sp, #8
 80048f2:	b901      	cbnz	r1, 80048f6 <__ascii_mbtowc+0x6>
 80048f4:	a901      	add	r1, sp, #4
 80048f6:	b142      	cbz	r2, 800490a <__ascii_mbtowc+0x1a>
 80048f8:	b14b      	cbz	r3, 800490e <__ascii_mbtowc+0x1e>
 80048fa:	7813      	ldrb	r3, [r2, #0]
 80048fc:	600b      	str	r3, [r1, #0]
 80048fe:	7812      	ldrb	r2, [r2, #0]
 8004900:	1c10      	adds	r0, r2, #0
 8004902:	bf18      	it	ne
 8004904:	2001      	movne	r0, #1
 8004906:	b002      	add	sp, #8
 8004908:	4770      	bx	lr
 800490a:	4610      	mov	r0, r2
 800490c:	e7fb      	b.n	8004906 <__ascii_mbtowc+0x16>
 800490e:	f06f 0001 	mvn.w	r0, #1
 8004912:	e7f8      	b.n	8004906 <__ascii_mbtowc+0x16>

08004914 <memcpy>:
 8004914:	b510      	push	{r4, lr}
 8004916:	1e43      	subs	r3, r0, #1
 8004918:	440a      	add	r2, r1
 800491a:	4291      	cmp	r1, r2
 800491c:	d100      	bne.n	8004920 <memcpy+0xc>
 800491e:	bd10      	pop	{r4, pc}
 8004920:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004924:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004928:	e7f7      	b.n	800491a <memcpy+0x6>

0800492a <memmove>:
 800492a:	4288      	cmp	r0, r1
 800492c:	b510      	push	{r4, lr}
 800492e:	eb01 0302 	add.w	r3, r1, r2
 8004932:	d803      	bhi.n	800493c <memmove+0x12>
 8004934:	1e42      	subs	r2, r0, #1
 8004936:	4299      	cmp	r1, r3
 8004938:	d10c      	bne.n	8004954 <memmove+0x2a>
 800493a:	bd10      	pop	{r4, pc}
 800493c:	4298      	cmp	r0, r3
 800493e:	d2f9      	bcs.n	8004934 <memmove+0xa>
 8004940:	1881      	adds	r1, r0, r2
 8004942:	1ad2      	subs	r2, r2, r3
 8004944:	42d3      	cmn	r3, r2
 8004946:	d100      	bne.n	800494a <memmove+0x20>
 8004948:	bd10      	pop	{r4, pc}
 800494a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800494e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004952:	e7f7      	b.n	8004944 <memmove+0x1a>
 8004954:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004958:	f802 4f01 	strb.w	r4, [r2, #1]!
 800495c:	e7eb      	b.n	8004936 <memmove+0xc>
	...

08004960 <_free_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	4605      	mov	r5, r0
 8004964:	2900      	cmp	r1, #0
 8004966:	d045      	beq.n	80049f4 <_free_r+0x94>
 8004968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800496c:	1f0c      	subs	r4, r1, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	bfb8      	it	lt
 8004972:	18e4      	addlt	r4, r4, r3
 8004974:	f000 f8e3 	bl	8004b3e <__malloc_lock>
 8004978:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <_free_r+0x98>)
 800497a:	6813      	ldr	r3, [r2, #0]
 800497c:	4610      	mov	r0, r2
 800497e:	b933      	cbnz	r3, 800498e <_free_r+0x2e>
 8004980:	6063      	str	r3, [r4, #4]
 8004982:	6014      	str	r4, [r2, #0]
 8004984:	4628      	mov	r0, r5
 8004986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800498a:	f000 b8d9 	b.w	8004b40 <__malloc_unlock>
 800498e:	42a3      	cmp	r3, r4
 8004990:	d90c      	bls.n	80049ac <_free_r+0x4c>
 8004992:	6821      	ldr	r1, [r4, #0]
 8004994:	1862      	adds	r2, r4, r1
 8004996:	4293      	cmp	r3, r2
 8004998:	bf04      	itt	eq
 800499a:	681a      	ldreq	r2, [r3, #0]
 800499c:	685b      	ldreq	r3, [r3, #4]
 800499e:	6063      	str	r3, [r4, #4]
 80049a0:	bf04      	itt	eq
 80049a2:	1852      	addeq	r2, r2, r1
 80049a4:	6022      	streq	r2, [r4, #0]
 80049a6:	6004      	str	r4, [r0, #0]
 80049a8:	e7ec      	b.n	8004984 <_free_r+0x24>
 80049aa:	4613      	mov	r3, r2
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	b10a      	cbz	r2, 80049b4 <_free_r+0x54>
 80049b0:	42a2      	cmp	r2, r4
 80049b2:	d9fa      	bls.n	80049aa <_free_r+0x4a>
 80049b4:	6819      	ldr	r1, [r3, #0]
 80049b6:	1858      	adds	r0, r3, r1
 80049b8:	42a0      	cmp	r0, r4
 80049ba:	d10b      	bne.n	80049d4 <_free_r+0x74>
 80049bc:	6820      	ldr	r0, [r4, #0]
 80049be:	4401      	add	r1, r0
 80049c0:	1858      	adds	r0, r3, r1
 80049c2:	4282      	cmp	r2, r0
 80049c4:	6019      	str	r1, [r3, #0]
 80049c6:	d1dd      	bne.n	8004984 <_free_r+0x24>
 80049c8:	6810      	ldr	r0, [r2, #0]
 80049ca:	6852      	ldr	r2, [r2, #4]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	4401      	add	r1, r0
 80049d0:	6019      	str	r1, [r3, #0]
 80049d2:	e7d7      	b.n	8004984 <_free_r+0x24>
 80049d4:	d902      	bls.n	80049dc <_free_r+0x7c>
 80049d6:	230c      	movs	r3, #12
 80049d8:	602b      	str	r3, [r5, #0]
 80049da:	e7d3      	b.n	8004984 <_free_r+0x24>
 80049dc:	6820      	ldr	r0, [r4, #0]
 80049de:	1821      	adds	r1, r4, r0
 80049e0:	428a      	cmp	r2, r1
 80049e2:	bf04      	itt	eq
 80049e4:	6811      	ldreq	r1, [r2, #0]
 80049e6:	6852      	ldreq	r2, [r2, #4]
 80049e8:	6062      	str	r2, [r4, #4]
 80049ea:	bf04      	itt	eq
 80049ec:	1809      	addeq	r1, r1, r0
 80049ee:	6021      	streq	r1, [r4, #0]
 80049f0:	605c      	str	r4, [r3, #4]
 80049f2:	e7c7      	b.n	8004984 <_free_r+0x24>
 80049f4:	bd38      	pop	{r3, r4, r5, pc}
 80049f6:	bf00      	nop
 80049f8:	200001fc 	.word	0x200001fc

080049fc <_malloc_r>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	1ccd      	adds	r5, r1, #3
 8004a00:	f025 0503 	bic.w	r5, r5, #3
 8004a04:	3508      	adds	r5, #8
 8004a06:	2d0c      	cmp	r5, #12
 8004a08:	bf38      	it	cc
 8004a0a:	250c      	movcc	r5, #12
 8004a0c:	2d00      	cmp	r5, #0
 8004a0e:	4606      	mov	r6, r0
 8004a10:	db01      	blt.n	8004a16 <_malloc_r+0x1a>
 8004a12:	42a9      	cmp	r1, r5
 8004a14:	d903      	bls.n	8004a1e <_malloc_r+0x22>
 8004a16:	230c      	movs	r3, #12
 8004a18:	6033      	str	r3, [r6, #0]
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	bd70      	pop	{r4, r5, r6, pc}
 8004a1e:	f000 f88e 	bl	8004b3e <__malloc_lock>
 8004a22:	4a23      	ldr	r2, [pc, #140]	; (8004ab0 <_malloc_r+0xb4>)
 8004a24:	6814      	ldr	r4, [r2, #0]
 8004a26:	4621      	mov	r1, r4
 8004a28:	b991      	cbnz	r1, 8004a50 <_malloc_r+0x54>
 8004a2a:	4c22      	ldr	r4, [pc, #136]	; (8004ab4 <_malloc_r+0xb8>)
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	b91b      	cbnz	r3, 8004a38 <_malloc_r+0x3c>
 8004a30:	4630      	mov	r0, r6
 8004a32:	f000 f867 	bl	8004b04 <_sbrk_r>
 8004a36:	6020      	str	r0, [r4, #0]
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f000 f862 	bl	8004b04 <_sbrk_r>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d126      	bne.n	8004a92 <_malloc_r+0x96>
 8004a44:	230c      	movs	r3, #12
 8004a46:	6033      	str	r3, [r6, #0]
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f000 f879 	bl	8004b40 <__malloc_unlock>
 8004a4e:	e7e4      	b.n	8004a1a <_malloc_r+0x1e>
 8004a50:	680b      	ldr	r3, [r1, #0]
 8004a52:	1b5b      	subs	r3, r3, r5
 8004a54:	d41a      	bmi.n	8004a8c <_malloc_r+0x90>
 8004a56:	2b0b      	cmp	r3, #11
 8004a58:	d90f      	bls.n	8004a7a <_malloc_r+0x7e>
 8004a5a:	600b      	str	r3, [r1, #0]
 8004a5c:	50cd      	str	r5, [r1, r3]
 8004a5e:	18cc      	adds	r4, r1, r3
 8004a60:	4630      	mov	r0, r6
 8004a62:	f000 f86d 	bl	8004b40 <__malloc_unlock>
 8004a66:	f104 000b 	add.w	r0, r4, #11
 8004a6a:	1d23      	adds	r3, r4, #4
 8004a6c:	f020 0007 	bic.w	r0, r0, #7
 8004a70:	1ac3      	subs	r3, r0, r3
 8004a72:	d01b      	beq.n	8004aac <_malloc_r+0xb0>
 8004a74:	425a      	negs	r2, r3
 8004a76:	50e2      	str	r2, [r4, r3]
 8004a78:	bd70      	pop	{r4, r5, r6, pc}
 8004a7a:	428c      	cmp	r4, r1
 8004a7c:	bf0d      	iteet	eq
 8004a7e:	6863      	ldreq	r3, [r4, #4]
 8004a80:	684b      	ldrne	r3, [r1, #4]
 8004a82:	6063      	strne	r3, [r4, #4]
 8004a84:	6013      	streq	r3, [r2, #0]
 8004a86:	bf18      	it	ne
 8004a88:	460c      	movne	r4, r1
 8004a8a:	e7e9      	b.n	8004a60 <_malloc_r+0x64>
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	6849      	ldr	r1, [r1, #4]
 8004a90:	e7ca      	b.n	8004a28 <_malloc_r+0x2c>
 8004a92:	1cc4      	adds	r4, r0, #3
 8004a94:	f024 0403 	bic.w	r4, r4, #3
 8004a98:	42a0      	cmp	r0, r4
 8004a9a:	d005      	beq.n	8004aa8 <_malloc_r+0xac>
 8004a9c:	1a21      	subs	r1, r4, r0
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f000 f830 	bl	8004b04 <_sbrk_r>
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d0cd      	beq.n	8004a44 <_malloc_r+0x48>
 8004aa8:	6025      	str	r5, [r4, #0]
 8004aaa:	e7d9      	b.n	8004a60 <_malloc_r+0x64>
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	bf00      	nop
 8004ab0:	200001fc 	.word	0x200001fc
 8004ab4:	20000200 	.word	0x20000200

08004ab8 <_realloc_r>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	4607      	mov	r7, r0
 8004abc:	4614      	mov	r4, r2
 8004abe:	460e      	mov	r6, r1
 8004ac0:	b921      	cbnz	r1, 8004acc <_realloc_r+0x14>
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ac8:	f7ff bf98 	b.w	80049fc <_malloc_r>
 8004acc:	b922      	cbnz	r2, 8004ad8 <_realloc_r+0x20>
 8004ace:	f7ff ff47 	bl	8004960 <_free_r>
 8004ad2:	4625      	mov	r5, r4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad8:	f000 f833 	bl	8004b42 <_malloc_usable_size_r>
 8004adc:	4284      	cmp	r4, r0
 8004ade:	d90f      	bls.n	8004b00 <_realloc_r+0x48>
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	f7ff ff8a 	bl	80049fc <_malloc_r>
 8004ae8:	4605      	mov	r5, r0
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d0f2      	beq.n	8004ad4 <_realloc_r+0x1c>
 8004aee:	4631      	mov	r1, r6
 8004af0:	4622      	mov	r2, r4
 8004af2:	f7ff ff0f 	bl	8004914 <memcpy>
 8004af6:	4631      	mov	r1, r6
 8004af8:	4638      	mov	r0, r7
 8004afa:	f7ff ff31 	bl	8004960 <_free_r>
 8004afe:	e7e9      	b.n	8004ad4 <_realloc_r+0x1c>
 8004b00:	4635      	mov	r5, r6
 8004b02:	e7e7      	b.n	8004ad4 <_realloc_r+0x1c>

08004b04 <_sbrk_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	4c06      	ldr	r4, [pc, #24]	; (8004b20 <_sbrk_r+0x1c>)
 8004b08:	2300      	movs	r3, #0
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	6023      	str	r3, [r4, #0]
 8004b10:	f000 f820 	bl	8004b54 <_sbrk>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d102      	bne.n	8004b1e <_sbrk_r+0x1a>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	b103      	cbz	r3, 8004b1e <_sbrk_r+0x1a>
 8004b1c:	602b      	str	r3, [r5, #0]
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	200005cc 	.word	0x200005cc

08004b24 <__ascii_wctomb>:
 8004b24:	b149      	cbz	r1, 8004b3a <__ascii_wctomb+0x16>
 8004b26:	2aff      	cmp	r2, #255	; 0xff
 8004b28:	bf85      	ittet	hi
 8004b2a:	238a      	movhi	r3, #138	; 0x8a
 8004b2c:	6003      	strhi	r3, [r0, #0]
 8004b2e:	700a      	strbls	r2, [r1, #0]
 8004b30:	f04f 30ff 	movhi.w	r0, #4294967295
 8004b34:	bf98      	it	ls
 8004b36:	2001      	movls	r0, #1
 8004b38:	4770      	bx	lr
 8004b3a:	4608      	mov	r0, r1
 8004b3c:	4770      	bx	lr

08004b3e <__malloc_lock>:
 8004b3e:	4770      	bx	lr

08004b40 <__malloc_unlock>:
 8004b40:	4770      	bx	lr

08004b42 <_malloc_usable_size_r>:
 8004b42:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004b46:	2800      	cmp	r0, #0
 8004b48:	f1a0 0004 	sub.w	r0, r0, #4
 8004b4c:	bfbc      	itt	lt
 8004b4e:	580b      	ldrlt	r3, [r1, r0]
 8004b50:	18c0      	addlt	r0, r0, r3
 8004b52:	4770      	bx	lr

08004b54 <_sbrk>:
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <_sbrk+0x14>)
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	4602      	mov	r2, r0
 8004b5a:	b909      	cbnz	r1, 8004b60 <_sbrk+0xc>
 8004b5c:	4903      	ldr	r1, [pc, #12]	; (8004b6c <_sbrk+0x18>)
 8004b5e:	6019      	str	r1, [r3, #0]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	4402      	add	r2, r0
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	4770      	bx	lr
 8004b68:	20000204 	.word	0x20000204
 8004b6c:	200005d0 	.word	0x200005d0

08004b70 <_init>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr

08004b7c <_fini>:
 8004b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7e:	bf00      	nop
 8004b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b82:	bc08      	pop	{r3}
 8004b84:	469e      	mov	lr, r3
 8004b86:	4770      	bx	lr
